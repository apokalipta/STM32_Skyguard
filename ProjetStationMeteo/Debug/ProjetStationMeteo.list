
ProjetStationMeteo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da68  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  0800dba8  0800dba8  0000eba8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e010  0800e010  000102b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e010  0800e010  0000f010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e018  0800e018  000102b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e018  0800e018  0000f018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e01c  0800e01c  0000f01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002b0  20000000  0800e020  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  200002b0  0800e2d0  000102b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b8  0800e2d0  000106b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000102b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b21c  00000000  00000000  000102d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b8c  00000000  00000000  0002b4f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ae0  00000000  00000000  0002f088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014b5  00000000  00000000  00030b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e6f  00000000  00000000  0003201d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b166  00000000  00000000  0004be8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d83d  00000000  00000000  00066ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010482f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008814  00000000  00000000  00104874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0010d088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002b0 	.word	0x200002b0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800db90 	.word	0x0800db90

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002b4 	.word	0x200002b4
 800017c:	0800db90 	.word	0x0800db90

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dc6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	@ 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	@ 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	@ 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__gesf2>:
 8001014:	f04f 3cff 	mov.w	ip, #4294967295
 8001018:	e006      	b.n	8001028 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__lesf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	e002      	b.n	8001028 <__cmpsf2+0x4>
 8001022:	bf00      	nop

08001024 <__cmpsf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	f84d cd04 	str.w	ip, [sp, #-4]!
 800102c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001030:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	bf18      	it	ne
 800103a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800103e:	d011      	beq.n	8001064 <__cmpsf2+0x40>
 8001040:	b001      	add	sp, #4
 8001042:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001046:	bf18      	it	ne
 8001048:	ea90 0f01 	teqne	r0, r1
 800104c:	bf58      	it	pl
 800104e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001052:	bf88      	it	hi
 8001054:	17c8      	asrhi	r0, r1, #31
 8001056:	bf38      	it	cc
 8001058:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800105c:	bf18      	it	ne
 800105e:	f040 0001 	orrne.w	r0, r0, #1
 8001062:	4770      	bx	lr
 8001064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001068:	d102      	bne.n	8001070 <__cmpsf2+0x4c>
 800106a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800106e:	d105      	bne.n	800107c <__cmpsf2+0x58>
 8001070:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001074:	d1e4      	bne.n	8001040 <__cmpsf2+0x1c>
 8001076:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800107a:	d0e1      	beq.n	8001040 <__cmpsf2+0x1c>
 800107c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_cfrcmple>:
 8001084:	4684      	mov	ip, r0
 8001086:	4608      	mov	r0, r1
 8001088:	4661      	mov	r1, ip
 800108a:	e7ff      	b.n	800108c <__aeabi_cfcmpeq>

0800108c <__aeabi_cfcmpeq>:
 800108c:	b50f      	push	{r0, r1, r2, r3, lr}
 800108e:	f7ff ffc9 	bl	8001024 <__cmpsf2>
 8001092:	2800      	cmp	r0, #0
 8001094:	bf48      	it	mi
 8001096:	f110 0f00 	cmnmi.w	r0, #0
 800109a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800109c <__aeabi_fcmpeq>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff fff4 	bl	800108c <__aeabi_cfcmpeq>
 80010a4:	bf0c      	ite	eq
 80010a6:	2001      	moveq	r0, #1
 80010a8:	2000      	movne	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmplt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffea 	bl	800108c <__aeabi_cfcmpeq>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmple>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffe0 	bl	800108c <__aeabi_cfcmpeq>
 80010cc:	bf94      	ite	ls
 80010ce:	2001      	movls	r0, #1
 80010d0:	2000      	movhi	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmpge>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffd2 	bl	8001084 <__aeabi_cfrcmple>
 80010e0:	bf94      	ite	ls
 80010e2:	2001      	movls	r0, #1
 80010e4:	2000      	movhi	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmpgt>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffc8 	bl	8001084 <__aeabi_cfrcmple>
 80010f4:	bf34      	ite	cc
 80010f6:	2001      	movcc	r0, #1
 80010f8:	2000      	movcs	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_f2iz>:
 8001100:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001104:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001108:	d30f      	bcc.n	800112a <__aeabi_f2iz+0x2a>
 800110a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800110e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001112:	d90d      	bls.n	8001130 <__aeabi_f2iz+0x30>
 8001114:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001118:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800111c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001120:	fa23 f002 	lsr.w	r0, r3, r2
 8001124:	bf18      	it	ne
 8001126:	4240      	negne	r0, r0
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr
 8001130:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001134:	d101      	bne.n	800113a <__aeabi_f2iz+0x3a>
 8001136:	0242      	lsls	r2, r0, #9
 8001138:	d105      	bne.n	8001146 <__aeabi_f2iz+0x46>
 800113a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800113e:	bf08      	it	eq
 8001140:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001144:	4770      	bx	lr
 8001146:	f04f 0000 	mov.w	r0, #0
 800114a:	4770      	bx	lr

0800114c <__aeabi_uldivmod>:
 800114c:	b953      	cbnz	r3, 8001164 <__aeabi_uldivmod+0x18>
 800114e:	b94a      	cbnz	r2, 8001164 <__aeabi_uldivmod+0x18>
 8001150:	2900      	cmp	r1, #0
 8001152:	bf08      	it	eq
 8001154:	2800      	cmpeq	r0, #0
 8001156:	bf1c      	itt	ne
 8001158:	f04f 31ff 	movne.w	r1, #4294967295
 800115c:	f04f 30ff 	movne.w	r0, #4294967295
 8001160:	f000 b968 	b.w	8001434 <__aeabi_idiv0>
 8001164:	f1ad 0c08 	sub.w	ip, sp, #8
 8001168:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800116c:	f000 f806 	bl	800117c <__udivmoddi4>
 8001170:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001174:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001178:	b004      	add	sp, #16
 800117a:	4770      	bx	lr

0800117c <__udivmoddi4>:
 800117c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001180:	9d08      	ldr	r5, [sp, #32]
 8001182:	460c      	mov	r4, r1
 8001184:	2b00      	cmp	r3, #0
 8001186:	d14e      	bne.n	8001226 <__udivmoddi4+0xaa>
 8001188:	4694      	mov	ip, r2
 800118a:	458c      	cmp	ip, r1
 800118c:	4686      	mov	lr, r0
 800118e:	fab2 f282 	clz	r2, r2
 8001192:	d962      	bls.n	800125a <__udivmoddi4+0xde>
 8001194:	b14a      	cbz	r2, 80011aa <__udivmoddi4+0x2e>
 8001196:	f1c2 0320 	rsb	r3, r2, #32
 800119a:	4091      	lsls	r1, r2
 800119c:	fa20 f303 	lsr.w	r3, r0, r3
 80011a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80011a4:	4319      	orrs	r1, r3
 80011a6:	fa00 fe02 	lsl.w	lr, r0, r2
 80011aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80011b2:	fb07 1114 	mls	r1, r7, r4, r1
 80011b6:	fa1f f68c 	uxth.w	r6, ip
 80011ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011c2:	fb04 f106 	mul.w	r1, r4, r6
 80011c6:	4299      	cmp	r1, r3
 80011c8:	d90a      	bls.n	80011e0 <__udivmoddi4+0x64>
 80011ca:	eb1c 0303 	adds.w	r3, ip, r3
 80011ce:	f104 30ff 	add.w	r0, r4, #4294967295
 80011d2:	f080 8110 	bcs.w	80013f6 <__udivmoddi4+0x27a>
 80011d6:	4299      	cmp	r1, r3
 80011d8:	f240 810d 	bls.w	80013f6 <__udivmoddi4+0x27a>
 80011dc:	3c02      	subs	r4, #2
 80011de:	4463      	add	r3, ip
 80011e0:	1a59      	subs	r1, r3, r1
 80011e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80011e6:	fb07 1110 	mls	r1, r7, r0, r1
 80011ea:	fb00 f606 	mul.w	r6, r0, r6
 80011ee:	fa1f f38e 	uxth.w	r3, lr
 80011f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011f6:	429e      	cmp	r6, r3
 80011f8:	d90a      	bls.n	8001210 <__udivmoddi4+0x94>
 80011fa:	eb1c 0303 	adds.w	r3, ip, r3
 80011fe:	f100 31ff 	add.w	r1, r0, #4294967295
 8001202:	f080 80fa 	bcs.w	80013fa <__udivmoddi4+0x27e>
 8001206:	429e      	cmp	r6, r3
 8001208:	f240 80f7 	bls.w	80013fa <__udivmoddi4+0x27e>
 800120c:	4463      	add	r3, ip
 800120e:	3802      	subs	r0, #2
 8001210:	2100      	movs	r1, #0
 8001212:	1b9b      	subs	r3, r3, r6
 8001214:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001218:	b11d      	cbz	r5, 8001222 <__udivmoddi4+0xa6>
 800121a:	40d3      	lsrs	r3, r2
 800121c:	2200      	movs	r2, #0
 800121e:	e9c5 3200 	strd	r3, r2, [r5]
 8001222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001226:	428b      	cmp	r3, r1
 8001228:	d905      	bls.n	8001236 <__udivmoddi4+0xba>
 800122a:	b10d      	cbz	r5, 8001230 <__udivmoddi4+0xb4>
 800122c:	e9c5 0100 	strd	r0, r1, [r5]
 8001230:	2100      	movs	r1, #0
 8001232:	4608      	mov	r0, r1
 8001234:	e7f5      	b.n	8001222 <__udivmoddi4+0xa6>
 8001236:	fab3 f183 	clz	r1, r3
 800123a:	2900      	cmp	r1, #0
 800123c:	d146      	bne.n	80012cc <__udivmoddi4+0x150>
 800123e:	42a3      	cmp	r3, r4
 8001240:	d302      	bcc.n	8001248 <__udivmoddi4+0xcc>
 8001242:	4290      	cmp	r0, r2
 8001244:	f0c0 80ee 	bcc.w	8001424 <__udivmoddi4+0x2a8>
 8001248:	1a86      	subs	r6, r0, r2
 800124a:	eb64 0303 	sbc.w	r3, r4, r3
 800124e:	2001      	movs	r0, #1
 8001250:	2d00      	cmp	r5, #0
 8001252:	d0e6      	beq.n	8001222 <__udivmoddi4+0xa6>
 8001254:	e9c5 6300 	strd	r6, r3, [r5]
 8001258:	e7e3      	b.n	8001222 <__udivmoddi4+0xa6>
 800125a:	2a00      	cmp	r2, #0
 800125c:	f040 808f 	bne.w	800137e <__udivmoddi4+0x202>
 8001260:	eba1 040c 	sub.w	r4, r1, ip
 8001264:	2101      	movs	r1, #1
 8001266:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800126a:	fa1f f78c 	uxth.w	r7, ip
 800126e:	fbb4 f6f8 	udiv	r6, r4, r8
 8001272:	fb08 4416 	mls	r4, r8, r6, r4
 8001276:	fb07 f006 	mul.w	r0, r7, r6
 800127a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800127e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001282:	4298      	cmp	r0, r3
 8001284:	d908      	bls.n	8001298 <__udivmoddi4+0x11c>
 8001286:	eb1c 0303 	adds.w	r3, ip, r3
 800128a:	f106 34ff 	add.w	r4, r6, #4294967295
 800128e:	d202      	bcs.n	8001296 <__udivmoddi4+0x11a>
 8001290:	4298      	cmp	r0, r3
 8001292:	f200 80cb 	bhi.w	800142c <__udivmoddi4+0x2b0>
 8001296:	4626      	mov	r6, r4
 8001298:	1a1c      	subs	r4, r3, r0
 800129a:	fbb4 f0f8 	udiv	r0, r4, r8
 800129e:	fb08 4410 	mls	r4, r8, r0, r4
 80012a2:	fb00 f707 	mul.w	r7, r0, r7
 80012a6:	fa1f f38e 	uxth.w	r3, lr
 80012aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012ae:	429f      	cmp	r7, r3
 80012b0:	d908      	bls.n	80012c4 <__udivmoddi4+0x148>
 80012b2:	eb1c 0303 	adds.w	r3, ip, r3
 80012b6:	f100 34ff 	add.w	r4, r0, #4294967295
 80012ba:	d202      	bcs.n	80012c2 <__udivmoddi4+0x146>
 80012bc:	429f      	cmp	r7, r3
 80012be:	f200 80ae 	bhi.w	800141e <__udivmoddi4+0x2a2>
 80012c2:	4620      	mov	r0, r4
 80012c4:	1bdb      	subs	r3, r3, r7
 80012c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80012ca:	e7a5      	b.n	8001218 <__udivmoddi4+0x9c>
 80012cc:	f1c1 0720 	rsb	r7, r1, #32
 80012d0:	408b      	lsls	r3, r1
 80012d2:	fa22 fc07 	lsr.w	ip, r2, r7
 80012d6:	ea4c 0c03 	orr.w	ip, ip, r3
 80012da:	fa24 f607 	lsr.w	r6, r4, r7
 80012de:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80012e2:	fbb6 f8f9 	udiv	r8, r6, r9
 80012e6:	fa1f fe8c 	uxth.w	lr, ip
 80012ea:	fb09 6618 	mls	r6, r9, r8, r6
 80012ee:	fa20 f307 	lsr.w	r3, r0, r7
 80012f2:	408c      	lsls	r4, r1
 80012f4:	fa00 fa01 	lsl.w	sl, r0, r1
 80012f8:	fb08 f00e 	mul.w	r0, r8, lr
 80012fc:	431c      	orrs	r4, r3
 80012fe:	0c23      	lsrs	r3, r4, #16
 8001300:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001304:	4298      	cmp	r0, r3
 8001306:	fa02 f201 	lsl.w	r2, r2, r1
 800130a:	d90a      	bls.n	8001322 <__udivmoddi4+0x1a6>
 800130c:	eb1c 0303 	adds.w	r3, ip, r3
 8001310:	f108 36ff 	add.w	r6, r8, #4294967295
 8001314:	f080 8081 	bcs.w	800141a <__udivmoddi4+0x29e>
 8001318:	4298      	cmp	r0, r3
 800131a:	d97e      	bls.n	800141a <__udivmoddi4+0x29e>
 800131c:	f1a8 0802 	sub.w	r8, r8, #2
 8001320:	4463      	add	r3, ip
 8001322:	1a1e      	subs	r6, r3, r0
 8001324:	fbb6 f3f9 	udiv	r3, r6, r9
 8001328:	fb09 6613 	mls	r6, r9, r3, r6
 800132c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001330:	b2a4      	uxth	r4, r4
 8001332:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001336:	45a6      	cmp	lr, r4
 8001338:	d908      	bls.n	800134c <__udivmoddi4+0x1d0>
 800133a:	eb1c 0404 	adds.w	r4, ip, r4
 800133e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001342:	d266      	bcs.n	8001412 <__udivmoddi4+0x296>
 8001344:	45a6      	cmp	lr, r4
 8001346:	d964      	bls.n	8001412 <__udivmoddi4+0x296>
 8001348:	3b02      	subs	r3, #2
 800134a:	4464      	add	r4, ip
 800134c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001350:	fba0 8302 	umull	r8, r3, r0, r2
 8001354:	eba4 040e 	sub.w	r4, r4, lr
 8001358:	429c      	cmp	r4, r3
 800135a:	46c6      	mov	lr, r8
 800135c:	461e      	mov	r6, r3
 800135e:	d350      	bcc.n	8001402 <__udivmoddi4+0x286>
 8001360:	d04d      	beq.n	80013fe <__udivmoddi4+0x282>
 8001362:	b155      	cbz	r5, 800137a <__udivmoddi4+0x1fe>
 8001364:	ebba 030e 	subs.w	r3, sl, lr
 8001368:	eb64 0406 	sbc.w	r4, r4, r6
 800136c:	fa04 f707 	lsl.w	r7, r4, r7
 8001370:	40cb      	lsrs	r3, r1
 8001372:	431f      	orrs	r7, r3
 8001374:	40cc      	lsrs	r4, r1
 8001376:	e9c5 7400 	strd	r7, r4, [r5]
 800137a:	2100      	movs	r1, #0
 800137c:	e751      	b.n	8001222 <__udivmoddi4+0xa6>
 800137e:	fa0c fc02 	lsl.w	ip, ip, r2
 8001382:	f1c2 0320 	rsb	r3, r2, #32
 8001386:	40d9      	lsrs	r1, r3
 8001388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800138c:	fa20 f303 	lsr.w	r3, r0, r3
 8001390:	fa00 fe02 	lsl.w	lr, r0, r2
 8001394:	fbb1 f0f8 	udiv	r0, r1, r8
 8001398:	fb08 1110 	mls	r1, r8, r0, r1
 800139c:	4094      	lsls	r4, r2
 800139e:	431c      	orrs	r4, r3
 80013a0:	fa1f f78c 	uxth.w	r7, ip
 80013a4:	0c23      	lsrs	r3, r4, #16
 80013a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80013aa:	fb00 f107 	mul.w	r1, r0, r7
 80013ae:	4299      	cmp	r1, r3
 80013b0:	d908      	bls.n	80013c4 <__udivmoddi4+0x248>
 80013b2:	eb1c 0303 	adds.w	r3, ip, r3
 80013b6:	f100 36ff 	add.w	r6, r0, #4294967295
 80013ba:	d22c      	bcs.n	8001416 <__udivmoddi4+0x29a>
 80013bc:	4299      	cmp	r1, r3
 80013be:	d92a      	bls.n	8001416 <__udivmoddi4+0x29a>
 80013c0:	3802      	subs	r0, #2
 80013c2:	4463      	add	r3, ip
 80013c4:	1a5b      	subs	r3, r3, r1
 80013c6:	fbb3 f1f8 	udiv	r1, r3, r8
 80013ca:	fb08 3311 	mls	r3, r8, r1, r3
 80013ce:	b2a4      	uxth	r4, r4
 80013d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80013d4:	fb01 f307 	mul.w	r3, r1, r7
 80013d8:	42a3      	cmp	r3, r4
 80013da:	d908      	bls.n	80013ee <__udivmoddi4+0x272>
 80013dc:	eb1c 0404 	adds.w	r4, ip, r4
 80013e0:	f101 36ff 	add.w	r6, r1, #4294967295
 80013e4:	d213      	bcs.n	800140e <__udivmoddi4+0x292>
 80013e6:	42a3      	cmp	r3, r4
 80013e8:	d911      	bls.n	800140e <__udivmoddi4+0x292>
 80013ea:	3902      	subs	r1, #2
 80013ec:	4464      	add	r4, ip
 80013ee:	1ae4      	subs	r4, r4, r3
 80013f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013f4:	e73b      	b.n	800126e <__udivmoddi4+0xf2>
 80013f6:	4604      	mov	r4, r0
 80013f8:	e6f2      	b.n	80011e0 <__udivmoddi4+0x64>
 80013fa:	4608      	mov	r0, r1
 80013fc:	e708      	b.n	8001210 <__udivmoddi4+0x94>
 80013fe:	45c2      	cmp	sl, r8
 8001400:	d2af      	bcs.n	8001362 <__udivmoddi4+0x1e6>
 8001402:	ebb8 0e02 	subs.w	lr, r8, r2
 8001406:	eb63 060c 	sbc.w	r6, r3, ip
 800140a:	3801      	subs	r0, #1
 800140c:	e7a9      	b.n	8001362 <__udivmoddi4+0x1e6>
 800140e:	4631      	mov	r1, r6
 8001410:	e7ed      	b.n	80013ee <__udivmoddi4+0x272>
 8001412:	4603      	mov	r3, r0
 8001414:	e79a      	b.n	800134c <__udivmoddi4+0x1d0>
 8001416:	4630      	mov	r0, r6
 8001418:	e7d4      	b.n	80013c4 <__udivmoddi4+0x248>
 800141a:	46b0      	mov	r8, r6
 800141c:	e781      	b.n	8001322 <__udivmoddi4+0x1a6>
 800141e:	4463      	add	r3, ip
 8001420:	3802      	subs	r0, #2
 8001422:	e74f      	b.n	80012c4 <__udivmoddi4+0x148>
 8001424:	4606      	mov	r6, r0
 8001426:	4623      	mov	r3, r4
 8001428:	4608      	mov	r0, r1
 800142a:	e711      	b.n	8001250 <__udivmoddi4+0xd4>
 800142c:	3e02      	subs	r6, #2
 800142e:	4463      	add	r3, ip
 8001430:	e732      	b.n	8001298 <__udivmoddi4+0x11c>
 8001432:	bf00      	nop

08001434 <__aeabi_idiv0>:
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop

08001438 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001440:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001444:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	2b00      	cmp	r3, #0
 800144e:	d013      	beq.n	8001478 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001450:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001454:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001458:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00b      	beq.n	8001478 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001460:	e000      	b.n	8001464 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001462:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001464:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0f9      	beq.n	8001462 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800146e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001478:	687b      	ldr	r3, [r7, #4]
}
 800147a:	4618      	mov	r0, r3
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr

08001484 <floatToInt>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//Fonction permettant de découper le float en int
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 8001484:	b5b0      	push	{r4, r5, r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  if(in >= 0.0f)
 8001490:	f04f 0100 	mov.w	r1, #0
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	f7ff fe1f 	bl	80010d8 <__aeabi_fcmpge>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <floatToInt+0x24>
  {
    out_value->sign = 0;
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
 80014a6:	e006      	b.n	80014b6 <floatToInt+0x32>
  }else
  {
    out_value->sign = 1;
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	2201      	movs	r2, #1
 80014ac:	701a      	strb	r2, [r3, #0]
    in = -in;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80014b4:	60fb      	str	r3, [r7, #12]
  }

  in = in + (0.5 / pow(10, dec_prec));
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f7fe ffce 	bl	8000458 <__aeabi_f2d>
 80014bc:	4604      	mov	r4, r0
 80014be:	460d      	mov	r5, r1
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7fe ffb7 	bl	8000434 <__aeabi_i2d>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	f04f 0000 	mov.w	r0, #0
 80014ce:	492a      	ldr	r1, [pc, #168]	@ (8001578 <floatToInt+0xf4>)
 80014d0:	f00b fc1e 	bl	800cd10 <pow>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	f04f 0000 	mov.w	r0, #0
 80014dc:	4927      	ldr	r1, [pc, #156]	@ (800157c <floatToInt+0xf8>)
 80014de:	f7ff f93d 	bl	800075c <__aeabi_ddiv>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4620      	mov	r0, r4
 80014e8:	4629      	mov	r1, r5
 80014ea:	f7fe fe57 	bl	800019c <__adddf3>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4610      	mov	r0, r2
 80014f4:	4619      	mov	r1, r3
 80014f6:	f7ff fadf 	bl	8000ab8 <__aeabi_d2f>
 80014fa:	4603      	mov	r3, r0
 80014fc:	60fb      	str	r3, [r7, #12]
  out_value->out_int = (int32_t)in;
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f7ff fdfe 	bl	8001100 <__aeabi_f2iz>
 8001504:	4603      	mov	r3, r0
 8001506:	461a      	mov	r2, r3
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fbd7 	bl	8000cc4 <__aeabi_ui2f>
 8001516:	4603      	mov	r3, r0
 8001518:	4619      	mov	r1, r3
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f7ff fb20 	bl	8000b60 <__aeabi_fsub>
 8001520:	4603      	mov	r3, r0
 8001522:	60fb      	str	r3, [r7, #12]
  out_value->out_dec = (int32_t)trunc(in * pow(10, dec_prec));
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	f7fe ff97 	bl	8000458 <__aeabi_f2d>
 800152a:	4604      	mov	r4, r0
 800152c:	460d      	mov	r5, r1
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7fe ff80 	bl	8000434 <__aeabi_i2d>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	f04f 0000 	mov.w	r0, #0
 800153c:	490e      	ldr	r1, [pc, #56]	@ (8001578 <floatToInt+0xf4>)
 800153e:	f00b fbe7 	bl	800cd10 <pow>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4620      	mov	r0, r4
 8001548:	4629      	mov	r1, r5
 800154a:	f7fe ffdd 	bl	8000508 <__aeabi_dmul>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4610      	mov	r0, r2
 8001554:	4619      	mov	r1, r3
 8001556:	f00b fc49 	bl	800cdec <trunc>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4610      	mov	r0, r2
 8001560:	4619      	mov	r1, r3
 8001562:	f7ff fa81 	bl	8000a68 <__aeabi_d2iz>
 8001566:	4603      	mov	r3, r0
 8001568:	461a      	mov	r2, r3
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	609a      	str	r2, [r3, #8]
}
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bdb0      	pop	{r4, r5, r7, pc}
 8001576:	bf00      	nop
 8001578:	40240000 	.word	0x40240000
 800157c:	3fe00000 	.word	0x3fe00000

08001580 <motor>:

//Fonction qui active et désactive le moteur en fonction du paramètre qu'on lui donne
void motor(uint8_t motorstate){
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
	if(motorstate){
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d007      	beq.n	80015a0 <motor+0x20>
		HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8001590:	2100      	movs	r1, #0
 8001592:	4809      	ldr	r0, [pc, #36]	@ (80015b8 <motor+0x38>)
 8001594:	f007 fd5c 	bl	8009050 <HAL_TIM_PWM_Start_IT>
		printf("Motor activated\r\n");
 8001598:	4808      	ldr	r0, [pc, #32]	@ (80015bc <motor+0x3c>)
 800159a:	f009 fa79 	bl	800aa90 <puts>
	else{
		HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
		printf("Motor disable\r\n");
	}

}
 800159e:	e006      	b.n	80015ae <motor+0x2e>
		HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 80015a0:	2100      	movs	r1, #0
 80015a2:	4805      	ldr	r0, [pc, #20]	@ (80015b8 <motor+0x38>)
 80015a4:	f007 fe36 	bl	8009214 <HAL_TIM_PWM_Stop_IT>
		printf("Motor disable\r\n");
 80015a8:	4805      	ldr	r0, [pc, #20]	@ (80015c0 <motor+0x40>)
 80015aa:	f009 fa71 	bl	800aa90 <puts>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000378 	.word	0x20000378
 80015bc:	0800dba8 	.word	0x0800dba8
 80015c0:	0800dbbc 	.word	0x0800dbbc

080015c4 <buzzer>:

//Pareil que pour le moteur mais avec le buzzer
void buzzer (uint8_t buzzerState)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
	if(buzzerState){
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d004      	beq.n	80015de <buzzer+0x1a>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80015d4:	2104      	movs	r1, #4
 80015d6:	4806      	ldr	r0, [pc, #24]	@ (80015f0 <buzzer+0x2c>)
 80015d8:	f007 fc66 	bl	8008ea8 <HAL_TIM_PWM_Start>

	}else {
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
	}
}
 80015dc:	e003      	b.n	80015e6 <buzzer+0x22>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80015de:	2104      	movs	r1, #4
 80015e0:	4803      	ldr	r0, [pc, #12]	@ (80015f0 <buzzer+0x2c>)
 80015e2:	f007 fcf7 	bl	8008fd4 <HAL_TIM_PWM_Stop>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000378 	.word	0x20000378

080015f4 <conf_capteur>:

//Ici on configure l'initialisation de nos capteurs avec les fonctions de l'IKS
void conf_capteur(void){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0

	IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_TEMPERATURE);
 80015f8:	2101      	movs	r1, #1
 80015fa:	2000      	movs	r0, #0
 80015fc:	f003 fcf0 	bl	8004fe0 <IKS01A3_ENV_SENSOR_Init>
	IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_HUMIDITY);
 8001600:	2104      	movs	r1, #4
 8001602:	2000      	movs	r0, #0
 8001604:	f003 fcec 	bl	8004fe0 <IKS01A3_ENV_SENSOR_Init>
	IKS01A3_ENV_SENSOR_Init(IKS01A3_LPS22HH_0, ENV_PRESSURE);
 8001608:	2102      	movs	r1, #2
 800160a:	2001      	movs	r0, #1
 800160c:	f003 fce8 	bl	8004fe0 <IKS01A3_ENV_SENSOR_Init>

}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}

08001614 <affichage_menu>:

//Création d'un affichage menu
void affichage_menu(void){
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0

	MAX7219_DisplayChar('1',menu_seq[0]);
 8001618:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <affichage_menu+0x38>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	4619      	mov	r1, r3
 800161e:	2031      	movs	r0, #49	@ 0x31
 8001620:	f000 fea3 	bl	800236a <MAX7219_DisplayChar>
	MAX7219_DisplayChar('2',menu_seq[1]);
 8001624:	4b09      	ldr	r3, [pc, #36]	@ (800164c <affichage_menu+0x38>)
 8001626:	785b      	ldrb	r3, [r3, #1]
 8001628:	4619      	mov	r1, r3
 800162a:	2032      	movs	r0, #50	@ 0x32
 800162c:	f000 fe9d 	bl	800236a <MAX7219_DisplayChar>
	MAX7219_DisplayChar('3',menu_seq[2]);
 8001630:	4b06      	ldr	r3, [pc, #24]	@ (800164c <affichage_menu+0x38>)
 8001632:	789b      	ldrb	r3, [r3, #2]
 8001634:	4619      	mov	r1, r3
 8001636:	2033      	movs	r0, #51	@ 0x33
 8001638:	f000 fe97 	bl	800236a <MAX7219_DisplayChar>
	MAX7219_DisplayChar('4',menu_seq[3]);
 800163c:	4b03      	ldr	r3, [pc, #12]	@ (800164c <affichage_menu+0x38>)
 800163e:	78db      	ldrb	r3, [r3, #3]
 8001640:	4619      	mov	r1, r3
 8001642:	2034      	movs	r0, #52	@ 0x34
 8001644:	f000 fe91 	bl	800236a <MAX7219_DisplayChar>
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	2000000c 	.word	0x2000000c

08001650 <menu_temp>:

//Pareil pour la température
void menu_temp(void){
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0

	MAX7219_DisplayChar('1',temp_seq[0]);
 8001654:	4b0c      	ldr	r3, [pc, #48]	@ (8001688 <menu_temp+0x38>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	4619      	mov	r1, r3
 800165a:	2031      	movs	r0, #49	@ 0x31
 800165c:	f000 fe85 	bl	800236a <MAX7219_DisplayChar>
	MAX7219_DisplayChar('2',temp_seq[1]);
 8001660:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <menu_temp+0x38>)
 8001662:	785b      	ldrb	r3, [r3, #1]
 8001664:	4619      	mov	r1, r3
 8001666:	2032      	movs	r0, #50	@ 0x32
 8001668:	f000 fe7f 	bl	800236a <MAX7219_DisplayChar>
	MAX7219_DisplayChar('3',temp_seq[2]);
 800166c:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <menu_temp+0x38>)
 800166e:	789b      	ldrb	r3, [r3, #2]
 8001670:	4619      	mov	r1, r3
 8001672:	2033      	movs	r0, #51	@ 0x33
 8001674:	f000 fe79 	bl	800236a <MAX7219_DisplayChar>
	MAX7219_DisplayChar('4',temp_seq[3]);
 8001678:	4b03      	ldr	r3, [pc, #12]	@ (8001688 <menu_temp+0x38>)
 800167a:	78db      	ldrb	r3, [r3, #3]
 800167c:	4619      	mov	r1, r3
 800167e:	2034      	movs	r0, #52	@ 0x34
 8001680:	f000 fe73 	bl	800236a <MAX7219_DisplayChar>
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000000 	.word	0x20000000

0800168c <menu_hum>:

//Pareil pour l'humidité
void menu_hum(void){
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0

	MAX7219_DisplayChar('1',hum_seq[0]);
 8001690:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <menu_hum+0x38>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	4619      	mov	r1, r3
 8001696:	2031      	movs	r0, #49	@ 0x31
 8001698:	f000 fe67 	bl	800236a <MAX7219_DisplayChar>
	MAX7219_DisplayChar('2',hum_seq[1]);
 800169c:	4b09      	ldr	r3, [pc, #36]	@ (80016c4 <menu_hum+0x38>)
 800169e:	785b      	ldrb	r3, [r3, #1]
 80016a0:	4619      	mov	r1, r3
 80016a2:	2032      	movs	r0, #50	@ 0x32
 80016a4:	f000 fe61 	bl	800236a <MAX7219_DisplayChar>
	MAX7219_DisplayChar('3',hum_seq[2]);
 80016a8:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <menu_hum+0x38>)
 80016aa:	789b      	ldrb	r3, [r3, #2]
 80016ac:	4619      	mov	r1, r3
 80016ae:	2033      	movs	r0, #51	@ 0x33
 80016b0:	f000 fe5b 	bl	800236a <MAX7219_DisplayChar>
	MAX7219_DisplayChar('4',hum_seq[3]);
 80016b4:	4b03      	ldr	r3, [pc, #12]	@ (80016c4 <menu_hum+0x38>)
 80016b6:	78db      	ldrb	r3, [r3, #3]
 80016b8:	4619      	mov	r1, r3
 80016ba:	2034      	movs	r0, #52	@ 0x34
 80016bc:	f000 fe55 	bl	800236a <MAX7219_DisplayChar>
}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000004 	.word	0x20000004

080016c8 <menu_pres>:

//Pareil pour la pression
void menu_pres(void){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0

	MAX7219_DisplayChar('1',pres_seq[0]);
 80016cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001700 <menu_pres+0x38>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4619      	mov	r1, r3
 80016d2:	2031      	movs	r0, #49	@ 0x31
 80016d4:	f000 fe49 	bl	800236a <MAX7219_DisplayChar>
	MAX7219_DisplayChar('2',pres_seq[1]);
 80016d8:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <menu_pres+0x38>)
 80016da:	785b      	ldrb	r3, [r3, #1]
 80016dc:	4619      	mov	r1, r3
 80016de:	2032      	movs	r0, #50	@ 0x32
 80016e0:	f000 fe43 	bl	800236a <MAX7219_DisplayChar>
	MAX7219_DisplayChar('3',pres_seq[2]);
 80016e4:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <menu_pres+0x38>)
 80016e6:	789b      	ldrb	r3, [r3, #2]
 80016e8:	4619      	mov	r1, r3
 80016ea:	2033      	movs	r0, #51	@ 0x33
 80016ec:	f000 fe3d 	bl	800236a <MAX7219_DisplayChar>
	MAX7219_DisplayChar('4',pres_seq[3]);
 80016f0:	4b03      	ldr	r3, [pc, #12]	@ (8001700 <menu_pres+0x38>)
 80016f2:	78db      	ldrb	r3, [r3, #3]
 80016f4:	4619      	mov	r1, r3
 80016f6:	2034      	movs	r0, #52	@ 0x34
 80016f8:	f000 fe37 	bl	800236a <MAX7219_DisplayChar>
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000008 	.word	0x20000008

08001704 <display_temp>:

//Ici on récupère la valeur de notre température ensuite on déclare un char de 4 pour
//stocker la valeur dedans et on utilise notre fonction nous permettant de la transformer
//et à l'aide d'un sprintf on transforme notre float en int
void display_temp(void){
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0

	IKS01A3_ENV_SENSOR_GetValue(IKS01A3_HTS221_0, ENV_TEMPERATURE, &Temperature);
 800170a:	4a19      	ldr	r2, [pc, #100]	@ (8001770 <display_temp+0x6c>)
 800170c:	2101      	movs	r1, #1
 800170e:	2000      	movs	r0, #0
 8001710:	f003 fd74 	bl	80051fc <IKS01A3_ENV_SENSOR_GetValue>
	char buff[4];
	displayFloatToInt_t out_value;
	floatToInt(Temperature, &out_value, 2);
 8001714:	4b16      	ldr	r3, [pc, #88]	@ (8001770 <display_temp+0x6c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4639      	mov	r1, r7
 800171a:	2202      	movs	r2, #2
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff feb1 	bl	8001484 <floatToInt>
	sprintf(buff, "%d", (int)out_value.out_int);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	461a      	mov	r2, r3
 8001726:	f107 030c 	add.w	r3, r7, #12
 800172a:	4912      	ldr	r1, [pc, #72]	@ (8001774 <display_temp+0x70>)
 800172c:	4618      	mov	r0, r3
 800172e:	f009 f9b7 	bl	800aaa0 <siprintf>
	MAX7219_DisplayChar('1',buff[0]);
 8001732:	7b3b      	ldrb	r3, [r7, #12]
 8001734:	4619      	mov	r1, r3
 8001736:	2031      	movs	r0, #49	@ 0x31
 8001738:	f000 fe17 	bl	800236a <MAX7219_DisplayChar>
	MAX7219_DisplayChar('2',buff[1]);
 800173c:	7b7b      	ldrb	r3, [r7, #13]
 800173e:	4619      	mov	r1, r3
 8001740:	2032      	movs	r0, #50	@ 0x32
 8001742:	f000 fe12 	bl	800236a <MAX7219_DisplayChar>
	MAX7219_DisplayChar('3','.');
 8001746:	212e      	movs	r1, #46	@ 0x2e
 8001748:	2033      	movs	r0, #51	@ 0x33
 800174a:	f000 fe0e 	bl	800236a <MAX7219_DisplayChar>
	sprintf(buff, "%d", (int)out_value.out_dec);
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	461a      	mov	r2, r3
 8001752:	f107 030c 	add.w	r3, r7, #12
 8001756:	4907      	ldr	r1, [pc, #28]	@ (8001774 <display_temp+0x70>)
 8001758:	4618      	mov	r0, r3
 800175a:	f009 f9a1 	bl	800aaa0 <siprintf>
	MAX7219_DisplayChar('4',buff[0]);
 800175e:	7b3b      	ldrb	r3, [r7, #12]
 8001760:	4619      	mov	r1, r3
 8001762:	2034      	movs	r0, #52	@ 0x34
 8001764:	f000 fe01 	bl	800236a <MAX7219_DisplayChar>
}
 8001768:	bf00      	nop
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000400 	.word	0x20000400
 8001774:	0800dbcc 	.word	0x0800dbcc

08001778 <display_hum>:

//Exactement pareil mais pour l'humidité
void display_hum(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0

	IKS01A3_ENV_SENSOR_GetValue(IKS01A3_HTS221_0, ENV_HUMIDITY, &humidity);
 800177e:	4a19      	ldr	r2, [pc, #100]	@ (80017e4 <display_hum+0x6c>)
 8001780:	2104      	movs	r1, #4
 8001782:	2000      	movs	r0, #0
 8001784:	f003 fd3a 	bl	80051fc <IKS01A3_ENV_SENSOR_GetValue>
	char buff[4];
	displayFloatToInt_t out_value;
	floatToInt(humidity, &out_value, 2);
 8001788:	4b16      	ldr	r3, [pc, #88]	@ (80017e4 <display_hum+0x6c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4639      	mov	r1, r7
 800178e:	2202      	movs	r2, #2
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fe77 	bl	8001484 <floatToInt>
	sprintf(buff, "%d", (int)out_value.out_int);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	461a      	mov	r2, r3
 800179a:	f107 030c 	add.w	r3, r7, #12
 800179e:	4912      	ldr	r1, [pc, #72]	@ (80017e8 <display_hum+0x70>)
 80017a0:	4618      	mov	r0, r3
 80017a2:	f009 f97d 	bl	800aaa0 <siprintf>
	MAX7219_DisplayChar('1',buff[0]);
 80017a6:	7b3b      	ldrb	r3, [r7, #12]
 80017a8:	4619      	mov	r1, r3
 80017aa:	2031      	movs	r0, #49	@ 0x31
 80017ac:	f000 fddd 	bl	800236a <MAX7219_DisplayChar>
	MAX7219_DisplayChar('2',buff[1]);
 80017b0:	7b7b      	ldrb	r3, [r7, #13]
 80017b2:	4619      	mov	r1, r3
 80017b4:	2032      	movs	r0, #50	@ 0x32
 80017b6:	f000 fdd8 	bl	800236a <MAX7219_DisplayChar>
	MAX7219_DisplayChar('3','.');
 80017ba:	212e      	movs	r1, #46	@ 0x2e
 80017bc:	2033      	movs	r0, #51	@ 0x33
 80017be:	f000 fdd4 	bl	800236a <MAX7219_DisplayChar>
	sprintf(buff, "%d", (int)out_value.out_dec);
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	461a      	mov	r2, r3
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	4907      	ldr	r1, [pc, #28]	@ (80017e8 <display_hum+0x70>)
 80017cc:	4618      	mov	r0, r3
 80017ce:	f009 f967 	bl	800aaa0 <siprintf>
	MAX7219_DisplayChar('4',buff[0]);
 80017d2:	7b3b      	ldrb	r3, [r7, #12]
 80017d4:	4619      	mov	r1, r3
 80017d6:	2034      	movs	r0, #52	@ 0x34
 80017d8:	f000 fdc7 	bl	800236a <MAX7219_DisplayChar>
}
 80017dc:	bf00      	nop
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000404 	.word	0x20000404
 80017e8:	0800dbcc 	.word	0x0800dbcc

080017ec <display_pression>:

//La même chose pour la pression sauf qu'on ne met pas de virgule dans notre char
void display_pression(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0

	IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &pression);
 80017f2:	4a16      	ldr	r2, [pc, #88]	@ (800184c <display_pression+0x60>)
 80017f4:	2102      	movs	r1, #2
 80017f6:	2001      	movs	r0, #1
 80017f8:	f003 fd00 	bl	80051fc <IKS01A3_ENV_SENSOR_GetValue>
	char buff[10];
	displayFloatToInt_t out_value;
	floatToInt(pression, &out_value, 2);
 80017fc:	4b13      	ldr	r3, [pc, #76]	@ (800184c <display_pression+0x60>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4639      	mov	r1, r7
 8001802:	2202      	movs	r2, #2
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fe3d 	bl	8001484 <floatToInt>
	sprintf(buff, "%d", (int)out_value.out_int);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	461a      	mov	r2, r3
 800180e:	f107 030c 	add.w	r3, r7, #12
 8001812:	490f      	ldr	r1, [pc, #60]	@ (8001850 <display_pression+0x64>)
 8001814:	4618      	mov	r0, r3
 8001816:	f009 f943 	bl	800aaa0 <siprintf>
	MAX7219_DisplayChar('1',buff[0]);
 800181a:	7b3b      	ldrb	r3, [r7, #12]
 800181c:	4619      	mov	r1, r3
 800181e:	2031      	movs	r0, #49	@ 0x31
 8001820:	f000 fda3 	bl	800236a <MAX7219_DisplayChar>
	MAX7219_DisplayChar('2',buff[1]);
 8001824:	7b7b      	ldrb	r3, [r7, #13]
 8001826:	4619      	mov	r1, r3
 8001828:	2032      	movs	r0, #50	@ 0x32
 800182a:	f000 fd9e 	bl	800236a <MAX7219_DisplayChar>
	MAX7219_DisplayChar('3',buff[2]);
 800182e:	7bbb      	ldrb	r3, [r7, #14]
 8001830:	4619      	mov	r1, r3
 8001832:	2033      	movs	r0, #51	@ 0x33
 8001834:	f000 fd99 	bl	800236a <MAX7219_DisplayChar>
	MAX7219_DisplayChar('4',buff[3]);
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	4619      	mov	r1, r3
 800183c:	2034      	movs	r0, #52	@ 0x34
 800183e:	f000 fd94 	bl	800236a <MAX7219_DisplayChar>

}
 8001842:	bf00      	nop
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000408 	.word	0x20000408
 8001850:	0800dbcc 	.word	0x0800dbcc

08001854 <frequenceNote>:

//Fonction permettant la création des différentes notes
int frequenceNote(Note note){
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
	int freq;
		switch(note){
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	2b07      	cmp	r3, #7
 8001862:	d833      	bhi.n	80018cc <frequenceNote+0x78>
 8001864:	a201      	add	r2, pc, #4	@ (adr r2, 800186c <frequenceNote+0x18>)
 8001866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186a:	bf00      	nop
 800186c:	0800188d 	.word	0x0800188d
 8001870:	08001895 	.word	0x08001895
 8001874:	0800189d 	.word	0x0800189d
 8001878:	080018a5 	.word	0x080018a5
 800187c:	080018ad 	.word	0x080018ad
 8001880:	080018b5 	.word	0x080018b5
 8001884:	080018bd 	.word	0x080018bd
 8001888:	080018c5 	.word	0x080018c5

		case DO:
			freq = 261;
 800188c:	f240 1305 	movw	r3, #261	@ 0x105
 8001890:	60fb      	str	r3, [r7, #12]
			break;
 8001892:	e01b      	b.n	80018cc <frequenceNote+0x78>

		case RE:
			freq = 294;
 8001894:	f44f 7393 	mov.w	r3, #294	@ 0x126
 8001898:	60fb      	str	r3, [r7, #12]
			break;
 800189a:	e017      	b.n	80018cc <frequenceNote+0x78>

		case MI:
			freq = 329;
 800189c:	f240 1349 	movw	r3, #329	@ 0x149
 80018a0:	60fb      	str	r3, [r7, #12]
			break;
 80018a2:	e013      	b.n	80018cc <frequenceNote+0x78>

		case FA:
			freq = 349;
 80018a4:	f240 135d 	movw	r3, #349	@ 0x15d
 80018a8:	60fb      	str	r3, [r7, #12]
			break;
 80018aa:	e00f      	b.n	80018cc <frequenceNote+0x78>

		case SOL:
			freq = 392;
 80018ac:	f44f 73c4 	mov.w	r3, #392	@ 0x188
 80018b0:	60fb      	str	r3, [r7, #12]
			break;
 80018b2:	e00b      	b.n	80018cc <frequenceNote+0x78>

		case LA:
			freq = 440;
 80018b4:	f44f 73dc 	mov.w	r3, #440	@ 0x1b8
 80018b8:	60fb      	str	r3, [r7, #12]
			break;
 80018ba:	e007      	b.n	80018cc <frequenceNote+0x78>

		case SI:
			freq = 493;
 80018bc:	f240 13ed 	movw	r3, #493	@ 0x1ed
 80018c0:	60fb      	str	r3, [r7, #12]
			break;
 80018c2:	e003      	b.n	80018cc <frequenceNote+0x78>

		case SIB:
			freq = 466;
 80018c4:	f44f 73e9 	mov.w	r3, #466	@ 0x1d2
 80018c8:	60fb      	str	r3, [r7, #12]
			break;
 80018ca:	bf00      	nop
		}
	return freq;
 80018cc:	68fb      	ldr	r3, [r7, #12]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <buzzerFunction>:

//Fonction qui vient exploiter les notes et calculer la fréquence et ensuite on rentre
//la valeur dans le registre
void buzzerFunction(Note note, int tempsMs, int pause){
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
 80018e4:	73fb      	strb	r3, [r7, #15]

	uint32_t calc = 32000/(frequenceNote(note));
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ffb3 	bl	8001854 <frequenceNote>
 80018ee:	4603      	mov	r3, r0
 80018f0:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80018f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80018f8:	617b      	str	r3, [r7, #20]
	TIM3->PSC = calc;
 80018fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001928 <buzzerFunction+0x50>)
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	6293      	str	r3, [r2, #40]	@ 0x28

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //Démarrage du Buzzer
 8001900:	2104      	movs	r1, #4
 8001902:	480a      	ldr	r0, [pc, #40]	@ (800192c <buzzerFunction+0x54>)
 8001904:	f007 fad0 	bl	8008ea8 <HAL_TIM_PWM_Start>
	HAL_Delay(tempsMs);
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	4618      	mov	r0, r3
 800190c:	f003 ff6e 	bl	80057ec <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2); // Arret du buzzer
 8001910:	2104      	movs	r1, #4
 8001912:	4806      	ldr	r0, [pc, #24]	@ (800192c <buzzerFunction+0x54>)
 8001914:	f007 fb5e 	bl	8008fd4 <HAL_TIM_PWM_Stop>
	HAL_Delay(pause);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4618      	mov	r0, r3
 800191c:	f003 ff66 	bl	80057ec <HAL_Delay>
}
 8001920:	bf00      	nop
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40000400 	.word	0x40000400
 800192c:	20000378 	.word	0x20000378

08001930 <MusiqueAmbiance>:


//Musique d'acceuil quand on lance notre application qui reprend la fonction du dessus
//pour la création de la musique
void MusiqueAmbiance(void){
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0

	buzzerFunction(DO,  500,  100);
 8001934:	2264      	movs	r2, #100	@ 0x64
 8001936:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800193a:	2000      	movs	r0, #0
 800193c:	f7ff ffcc 	bl	80018d8 <buzzerFunction>
	buzzerFunction(MI,  500,  100);
 8001940:	2264      	movs	r2, #100	@ 0x64
 8001942:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001946:	2002      	movs	r0, #2
 8001948:	f7ff ffc6 	bl	80018d8 <buzzerFunction>
	buzzerFunction(SOL,  500,  100);
 800194c:	2264      	movs	r2, #100	@ 0x64
 800194e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001952:	2004      	movs	r0, #4
 8001954:	f7ff ffc0 	bl	80018d8 <buzzerFunction>
	buzzerFunction(DO,  500,  300);
 8001958:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800195c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001960:	2000      	movs	r0, #0
 8001962:	f7ff ffb9 	bl	80018d8 <buzzerFunction>

	buzzerFunction(SOL,  500,  100);
 8001966:	2264      	movs	r2, #100	@ 0x64
 8001968:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800196c:	2004      	movs	r0, #4
 800196e:	f7ff ffb3 	bl	80018d8 <buzzerFunction>
	buzzerFunction(LA,  500,  100);
 8001972:	2264      	movs	r2, #100	@ 0x64
 8001974:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001978:	2005      	movs	r0, #5
 800197a:	f7ff ffad 	bl	80018d8 <buzzerFunction>
	buzzerFunction(SI,  500,  100);
 800197e:	2264      	movs	r2, #100	@ 0x64
 8001980:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001984:	2006      	movs	r0, #6
 8001986:	f7ff ffa7 	bl	80018d8 <buzzerFunction>
	buzzerFunction(SOL,  500,  300);
 800198a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800198e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001992:	2004      	movs	r0, #4
 8001994:	f7ff ffa0 	bl	80018d8 <buzzerFunction>

	buzzerFunction(DO,  500,  100);
 8001998:	2264      	movs	r2, #100	@ 0x64
 800199a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800199e:	2000      	movs	r0, #0
 80019a0:	f7ff ff9a 	bl	80018d8 <buzzerFunction>
	buzzerFunction(MI,  500,  100);
 80019a4:	2264      	movs	r2, #100	@ 0x64
 80019a6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80019aa:	2002      	movs	r0, #2
 80019ac:	f7ff ff94 	bl	80018d8 <buzzerFunction>
	buzzerFunction(SOL,  500,  100);
 80019b0:	2264      	movs	r2, #100	@ 0x64
 80019b2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80019b6:	2004      	movs	r0, #4
 80019b8:	f7ff ff8e 	bl	80018d8 <buzzerFunction>
	buzzerFunction(DO,  500,  300);
 80019bc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80019c0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80019c4:	2000      	movs	r0, #0
 80019c6:	f7ff ff87 	bl	80018d8 <buzzerFunction>

}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <menu>:

//Affichage du menu
void menu(void){
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0

	MAX7219_DisplayChar('1',menu_seq[0]);
 80019d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a08 <menu+0x38>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4619      	mov	r1, r3
 80019da:	2031      	movs	r0, #49	@ 0x31
 80019dc:	f000 fcc5 	bl	800236a <MAX7219_DisplayChar>
	MAX7219_DisplayChar('2',menu_seq[1]);
 80019e0:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <menu+0x38>)
 80019e2:	785b      	ldrb	r3, [r3, #1]
 80019e4:	4619      	mov	r1, r3
 80019e6:	2032      	movs	r0, #50	@ 0x32
 80019e8:	f000 fcbf 	bl	800236a <MAX7219_DisplayChar>
	MAX7219_DisplayChar('3',menu_seq[2]);
 80019ec:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <menu+0x38>)
 80019ee:	789b      	ldrb	r3, [r3, #2]
 80019f0:	4619      	mov	r1, r3
 80019f2:	2033      	movs	r0, #51	@ 0x33
 80019f4:	f000 fcb9 	bl	800236a <MAX7219_DisplayChar>
	MAX7219_DisplayChar('4',menu_seq[3]);
 80019f8:	4b03      	ldr	r3, [pc, #12]	@ (8001a08 <menu+0x38>)
 80019fa:	78db      	ldrb	r3, [r3, #3]
 80019fc:	4619      	mov	r1, r3
 80019fe:	2034      	movs	r0, #52	@ 0x34
 8001a00:	f000 fcb3 	bl	800236a <MAX7219_DisplayChar>
}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	2000000c 	.word	0x2000000c

08001a0c <MusiqueAlerte>:

void MusiqueAlerte(void){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
	for(int i = 0; i < 5; i++) { // Augmenter le i pour un effet continu
 8001a12:	2300      	movs	r3, #0
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	e00e      	b.n	8001a36 <MusiqueAlerte+0x2a>
		buzzerFunction(DO,  500,  50); // Note basse
 8001a18:	2232      	movs	r2, #50	@ 0x32
 8001a1a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f7ff ff5a 	bl	80018d8 <buzzerFunction>
		buzzerFunction(SI,  500,  50); // Note haute
 8001a24:	2232      	movs	r2, #50	@ 0x32
 8001a26:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001a2a:	2006      	movs	r0, #6
 8001a2c:	f7ff ff54 	bl	80018d8 <buzzerFunction>
	for(int i = 0; i < 5; i++) { // Augmenter le i pour un effet continu
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3301      	adds	r3, #1
 8001a34:	607b      	str	r3, [r7, #4]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	dded      	ble.n	8001a18 <MusiqueAlerte+0xc>
	}
}
 8001a3c:	bf00      	nop
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <adcFunction>:

//Dans la fonction ADC on viendra selon la valeur de notre ADC incrémenter la valeur
//de notre moteur ainsi qu'allumer des leds et changer l'écran de notre afficheur
//pour préciser les vitesses en cours
void adcFunction(){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc);
 8001a4c:	486b      	ldr	r0, [pc, #428]	@ (8001bfc <adcFunction+0x1b4>)
 8001a4e:	f004 f8c5 	bl	8005bdc <HAL_ADC_Start_IT>
	HAL_ADC_PollForConversion(&hadc, 1000);
 8001a52:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a56:	4869      	ldr	r0, [pc, #420]	@ (8001bfc <adcFunction+0x1b4>)
 8001a58:	f004 f830 	bl	8005abc <HAL_ADC_PollForConversion>
	analogValue = HAL_ADC_GetValue(&hadc);
 8001a5c:	4867      	ldr	r0, [pc, #412]	@ (8001bfc <adcFunction+0x1b4>)
 8001a5e:	f004 f95b 	bl	8005d18 <HAL_ADC_GetValue>
 8001a62:	4603      	mov	r3, r0
 8001a64:	4a66      	ldr	r2, [pc, #408]	@ (8001c00 <adcFunction+0x1b8>)
 8001a66:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop_IT(&hadc);
 8001a68:	4864      	ldr	r0, [pc, #400]	@ (8001bfc <adcFunction+0x1b4>)
 8001a6a:	f004 f921 	bl	8005cb0 <HAL_ADC_Stop_IT>

	printf("ADC value = %lu\r\n",analogValue);
 8001a6e:	4b64      	ldr	r3, [pc, #400]	@ (8001c00 <adcFunction+0x1b8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4619      	mov	r1, r3
 8001a74:	4863      	ldr	r0, [pc, #396]	@ (8001c04 <adcFunction+0x1bc>)
 8001a76:	f008 ffa3 	bl	800a9c0 <iprintf>
	//HAL_Delay(1000);
	if(analogValue>500){
 8001a7a:	4b61      	ldr	r3, [pc, #388]	@ (8001c00 <adcFunction+0x1b8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001a82:	d91d      	bls.n	8001ac0 <adcFunction+0x78>
		HAL_GPIO_WritePin(L0_GPIO_Port, L0_Pin,GPIO_PIN_SET);
 8001a84:	2201      	movs	r2, #1
 8001a86:	2102      	movs	r1, #2
 8001a88:	485f      	ldr	r0, [pc, #380]	@ (8001c08 <adcFunction+0x1c0>)
 8001a8a:	f005 f857 	bl	8006b3c <HAL_GPIO_WritePin>
		TIM3->CCR1+=1500;	//On rentre 1500 dans notre registre pour le démarrage du
 8001a8e:	4b5f      	ldr	r3, [pc, #380]	@ (8001c0c <adcFunction+0x1c4>)
 8001a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a92:	4a5e      	ldr	r2, [pc, #376]	@ (8001c0c <adcFunction+0x1c4>)
 8001a94:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8001a98:	6353      	str	r3, [r2, #52]	@ 0x34
		MAX7219_Clear();	//moteur, il démarre à moins mais ce n'est pas optimal
 8001a9a:	f000 fc50 	bl	800233e <MAX7219_Clear>
		MAX7219_DisplayChar('1', 'S'); 	//pour notre utilisation
 8001a9e:	2153      	movs	r1, #83	@ 0x53
 8001aa0:	2031      	movs	r0, #49	@ 0x31
 8001aa2:	f000 fc62 	bl	800236a <MAX7219_DisplayChar>
		MAX7219_DisplayChar('2', 'P');
 8001aa6:	2150      	movs	r1, #80	@ 0x50
 8001aa8:	2032      	movs	r0, #50	@ 0x32
 8001aaa:	f000 fc5e 	bl	800236a <MAX7219_DisplayChar>
		MAX7219_DisplayChar('3', '.');
 8001aae:	212e      	movs	r1, #46	@ 0x2e
 8001ab0:	2033      	movs	r0, #51	@ 0x33
 8001ab2:	f000 fc5a 	bl	800236a <MAX7219_DisplayChar>
		MAX7219_DisplayChar('4', '1');
 8001ab6:	2131      	movs	r1, #49	@ 0x31
 8001ab8:	2034      	movs	r0, #52	@ 0x34
 8001aba:	f000 fc56 	bl	800236a <MAX7219_DisplayChar>
 8001abe:	e004      	b.n	8001aca <adcFunction+0x82>
	}
		else{
			HAL_GPIO_WritePin(L0_GPIO_Port, L0_Pin,GPIO_PIN_RESET);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2102      	movs	r1, #2
 8001ac4:	4850      	ldr	r0, [pc, #320]	@ (8001c08 <adcFunction+0x1c0>)
 8001ac6:	f005 f839 	bl	8006b3c <HAL_GPIO_WritePin>
		}
	if(analogValue>1000){
 8001aca:	4b4d      	ldr	r3, [pc, #308]	@ (8001c00 <adcFunction+0x1b8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ad2:	d91c      	bls.n	8001b0e <adcFunction+0xc6>
		HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin,GPIO_PIN_SET);
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	2104      	movs	r1, #4
 8001ad8:	484b      	ldr	r0, [pc, #300]	@ (8001c08 <adcFunction+0x1c0>)
 8001ada:	f005 f82f 	bl	8006b3c <HAL_GPIO_WritePin>
		TIM3->CCR1+=150;
 8001ade:	4b4b      	ldr	r3, [pc, #300]	@ (8001c0c <adcFunction+0x1c4>)
 8001ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ae2:	4a4a      	ldr	r2, [pc, #296]	@ (8001c0c <adcFunction+0x1c4>)
 8001ae4:	3396      	adds	r3, #150	@ 0x96
 8001ae6:	6353      	str	r3, [r2, #52]	@ 0x34
		MAX7219_Clear();
 8001ae8:	f000 fc29 	bl	800233e <MAX7219_Clear>
		MAX7219_DisplayChar('1', 'S');
 8001aec:	2153      	movs	r1, #83	@ 0x53
 8001aee:	2031      	movs	r0, #49	@ 0x31
 8001af0:	f000 fc3b 	bl	800236a <MAX7219_DisplayChar>
		MAX7219_DisplayChar('2', 'P');
 8001af4:	2150      	movs	r1, #80	@ 0x50
 8001af6:	2032      	movs	r0, #50	@ 0x32
 8001af8:	f000 fc37 	bl	800236a <MAX7219_DisplayChar>
		MAX7219_DisplayChar('3', '.');
 8001afc:	212e      	movs	r1, #46	@ 0x2e
 8001afe:	2033      	movs	r0, #51	@ 0x33
 8001b00:	f000 fc33 	bl	800236a <MAX7219_DisplayChar>
		MAX7219_DisplayChar('4', '2');
 8001b04:	2132      	movs	r1, #50	@ 0x32
 8001b06:	2034      	movs	r0, #52	@ 0x34
 8001b08:	f000 fc2f 	bl	800236a <MAX7219_DisplayChar>
 8001b0c:	e004      	b.n	8001b18 <adcFunction+0xd0>

	}
		else{
			HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin,GPIO_PIN_RESET);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2104      	movs	r1, #4
 8001b12:	483d      	ldr	r0, [pc, #244]	@ (8001c08 <adcFunction+0x1c0>)
 8001b14:	f005 f812 	bl	8006b3c <HAL_GPIO_WritePin>

		}
	if(analogValue>2000){
 8001b18:	4b39      	ldr	r3, [pc, #228]	@ (8001c00 <adcFunction+0x1b8>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001b20:	d91d      	bls.n	8001b5e <adcFunction+0x116>
		HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin,GPIO_PIN_SET);
 8001b22:	2201      	movs	r2, #1
 8001b24:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b28:	4837      	ldr	r0, [pc, #220]	@ (8001c08 <adcFunction+0x1c0>)
 8001b2a:	f005 f807 	bl	8006b3c <HAL_GPIO_WritePin>
		TIM3->CCR1+=150;
 8001b2e:	4b37      	ldr	r3, [pc, #220]	@ (8001c0c <adcFunction+0x1c4>)
 8001b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b32:	4a36      	ldr	r2, [pc, #216]	@ (8001c0c <adcFunction+0x1c4>)
 8001b34:	3396      	adds	r3, #150	@ 0x96
 8001b36:	6353      	str	r3, [r2, #52]	@ 0x34
		MAX7219_Clear();
 8001b38:	f000 fc01 	bl	800233e <MAX7219_Clear>
		MAX7219_DisplayChar('1', 'S');
 8001b3c:	2153      	movs	r1, #83	@ 0x53
 8001b3e:	2031      	movs	r0, #49	@ 0x31
 8001b40:	f000 fc13 	bl	800236a <MAX7219_DisplayChar>
		MAX7219_DisplayChar('2', 'P');
 8001b44:	2150      	movs	r1, #80	@ 0x50
 8001b46:	2032      	movs	r0, #50	@ 0x32
 8001b48:	f000 fc0f 	bl	800236a <MAX7219_DisplayChar>
		MAX7219_DisplayChar('3', '.');
 8001b4c:	212e      	movs	r1, #46	@ 0x2e
 8001b4e:	2033      	movs	r0, #51	@ 0x33
 8001b50:	f000 fc0b 	bl	800236a <MAX7219_DisplayChar>
		MAX7219_DisplayChar('4', '3');
 8001b54:	2133      	movs	r1, #51	@ 0x33
 8001b56:	2034      	movs	r0, #52	@ 0x34
 8001b58:	f000 fc07 	bl	800236a <MAX7219_DisplayChar>
 8001b5c:	e005      	b.n	8001b6a <adcFunction+0x122>
	}
		else{
			HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin,GPIO_PIN_RESET);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b64:	4828      	ldr	r0, [pc, #160]	@ (8001c08 <adcFunction+0x1c0>)
 8001b66:	f004 ffe9 	bl	8006b3c <HAL_GPIO_WritePin>

		}
	if(analogValue>3000){
 8001b6a:	4b25      	ldr	r3, [pc, #148]	@ (8001c00 <adcFunction+0x1b8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d91d      	bls.n	8001bb2 <adcFunction+0x16a>
		HAL_GPIO_WritePin(L3_GPIO_Port, L3_Pin,GPIO_PIN_SET);
 8001b76:	2201      	movs	r2, #1
 8001b78:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b7c:	4822      	ldr	r0, [pc, #136]	@ (8001c08 <adcFunction+0x1c0>)
 8001b7e:	f004 ffdd 	bl	8006b3c <HAL_GPIO_WritePin>
		TIM3->CCR1+=150;
 8001b82:	4b22      	ldr	r3, [pc, #136]	@ (8001c0c <adcFunction+0x1c4>)
 8001b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b86:	4a21      	ldr	r2, [pc, #132]	@ (8001c0c <adcFunction+0x1c4>)
 8001b88:	3396      	adds	r3, #150	@ 0x96
 8001b8a:	6353      	str	r3, [r2, #52]	@ 0x34
		MAX7219_Clear();
 8001b8c:	f000 fbd7 	bl	800233e <MAX7219_Clear>
		MAX7219_DisplayChar('1', 'S');
 8001b90:	2153      	movs	r1, #83	@ 0x53
 8001b92:	2031      	movs	r0, #49	@ 0x31
 8001b94:	f000 fbe9 	bl	800236a <MAX7219_DisplayChar>
		MAX7219_DisplayChar('2', 'P');
 8001b98:	2150      	movs	r1, #80	@ 0x50
 8001b9a:	2032      	movs	r0, #50	@ 0x32
 8001b9c:	f000 fbe5 	bl	800236a <MAX7219_DisplayChar>
		MAX7219_DisplayChar('3', '.');
 8001ba0:	212e      	movs	r1, #46	@ 0x2e
 8001ba2:	2033      	movs	r0, #51	@ 0x33
 8001ba4:	f000 fbe1 	bl	800236a <MAX7219_DisplayChar>
		MAX7219_DisplayChar('4', '4');
 8001ba8:	2134      	movs	r1, #52	@ 0x34
 8001baa:	2034      	movs	r0, #52	@ 0x34
 8001bac:	f000 fbdd 	bl	800236a <MAX7219_DisplayChar>
 8001bb0:	e005      	b.n	8001bbe <adcFunction+0x176>

	}
		else{
			HAL_GPIO_WritePin(L3_GPIO_Port, L3_Pin,GPIO_PIN_RESET);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001bb8:	4813      	ldr	r0, [pc, #76]	@ (8001c08 <adcFunction+0x1c0>)
 8001bba:	f004 ffbf 	bl	8006b3c <HAL_GPIO_WritePin>

		}
	if(analogValue>4000){
 8001bbe:	4b10      	ldr	r3, [pc, #64]	@ (8001c00 <adcFunction+0x1b8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001bc6:	d917      	bls.n	8001bf8 <adcFunction+0x1b0>
		TIM3->CCR1+=500;
 8001bc8:	4b10      	ldr	r3, [pc, #64]	@ (8001c0c <adcFunction+0x1c4>)
 8001bca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bcc:	4a0f      	ldr	r2, [pc, #60]	@ (8001c0c <adcFunction+0x1c4>)
 8001bce:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001bd2:	6353      	str	r3, [r2, #52]	@ 0x34
		MAX7219_Clear();
 8001bd4:	f000 fbb3 	bl	800233e <MAX7219_Clear>
		MAX7219_DisplayChar('1', 'S');
 8001bd8:	2153      	movs	r1, #83	@ 0x53
 8001bda:	2031      	movs	r0, #49	@ 0x31
 8001bdc:	f000 fbc5 	bl	800236a <MAX7219_DisplayChar>
		MAX7219_DisplayChar('2', 'P');
 8001be0:	2150      	movs	r1, #80	@ 0x50
 8001be2:	2032      	movs	r0, #50	@ 0x32
 8001be4:	f000 fbc1 	bl	800236a <MAX7219_DisplayChar>
		MAX7219_DisplayChar('3', '.');
 8001be8:	212e      	movs	r1, #46	@ 0x2e
 8001bea:	2033      	movs	r0, #51	@ 0x33
 8001bec:	f000 fbbd 	bl	800236a <MAX7219_DisplayChar>
		MAX7219_DisplayChar('4', '5');
 8001bf0:	2135      	movs	r1, #53	@ 0x35
 8001bf2:	2034      	movs	r0, #52	@ 0x34
 8001bf4:	f000 fbb9 	bl	800236a <MAX7219_DisplayChar>

	}

}
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	200002cc 	.word	0x200002cc
 8001c00:	20000410 	.word	0x20000410
 8001c04:	0800dbd0 	.word	0x0800dbd0
 8001c08:	40020400 	.word	0x40020400
 8001c0c:	40000400 	.word	0x40000400

08001c10 <check_temperature_motor>:

//Dans cette fonction on compare la valeur que l'on récupère de notre capteur avec une
//valeur maximale que l'on a fixé pour déclencher le moteur qu'à parti de cette valeur
void check_temperature_motor(float temp){
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]

	uint8_t motorstate = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	73fb      	strb	r3, [r7, #15]
	float max_temp = 32.00;
 8001c1c:	f04f 4384 	mov.w	r3, #1107296256	@ 0x42000000
 8001c20:	60bb      	str	r3, [r7, #8]
	IKS01A3_ENV_SENSOR_GetValue(IKS01A3_HTS221_0, ENV_TEMPERATURE, &temp);
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	461a      	mov	r2, r3
 8001c26:	2101      	movs	r1, #1
 8001c28:	2000      	movs	r0, #0
 8001c2a:	f003 fae7 	bl	80051fc <IKS01A3_ENV_SENSOR_GetValue>
	printf("Temperature %.2f\r\n",temp);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe fc11 	bl	8000458 <__aeabi_f2d>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4812      	ldr	r0, [pc, #72]	@ (8001c84 <check_temperature_motor+0x74>)
 8001c3c:	f008 fec0 	bl	800a9c0 <iprintf>
		if(temp>max_temp){
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4619      	mov	r1, r3
 8001c44:	68b8      	ldr	r0, [r7, #8]
 8001c46:	f7ff fa33 	bl	80010b0 <__aeabi_fcmplt>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00d      	beq.n	8001c6c <check_temperature_motor+0x5c>
			  motor(!motorstate);
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	bf0c      	ite	eq
 8001c56:	2301      	moveq	r3, #1
 8001c58:	2300      	movne	r3, #0
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fc8f 	bl	8001580 <motor>
				TIM3->CCR1 = 2000;
 8001c62:	4b09      	ldr	r3, [pc, #36]	@ (8001c88 <check_temperature_motor+0x78>)
 8001c64:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001c68:	635a      	str	r2, [r3, #52]	@ 0x34
		  }else{
			  motor(motorstate);
			  TIM3->CCR1 = 0;
		  }
}
 8001c6a:	e006      	b.n	8001c7a <check_temperature_motor+0x6a>
			  motor(motorstate);
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fc86 	bl	8001580 <motor>
			  TIM3->CCR1 = 0;
 8001c74:	4b04      	ldr	r3, [pc, #16]	@ (8001c88 <check_temperature_motor+0x78>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	0800dbe4 	.word	0x0800dbe4
 8001c88:	40000400 	.word	0x40000400

08001c8c <check_temperature>:

//Ici on fait basqiquement la même chose avec le buzzer sauf qu'on précise deux valeurs
//pour éviter que le buzzer continue d'être actif quand le moteur se lance
void check_temperature(float temp){
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

	float temp_motor =32.00;
 8001c94:	f04f 4384 	mov.w	r3, #1107296256	@ 0x42000000
 8001c98:	60fb      	str	r3, [r7, #12]
	float max_temp = 30.00;
 8001c9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001d08 <check_temperature+0x7c>)
 8001c9c:	60bb      	str	r3, [r7, #8]
	IKS01A3_ENV_SENSOR_GetValue(IKS01A3_HTS221_0, ENV_TEMPERATURE, &temp);
 8001c9e:	1d3b      	adds	r3, r7, #4
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f003 faa9 	bl	80051fc <IKS01A3_ENV_SENSOR_GetValue>
	if(temp>max_temp && temp<= temp_motor){
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4619      	mov	r1, r3
 8001cae:	68b8      	ldr	r0, [r7, #8]
 8001cb0:	f7ff f9fe 	bl	80010b0 <__aeabi_fcmplt>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d014      	beq.n	8001ce4 <check_temperature+0x58>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f7ff fa0a 	bl	80010d8 <__aeabi_fcmpge>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00c      	beq.n	8001ce4 <check_temperature+0x58>
		buzzer(!buzzerstate);
 8001cca:	4b10      	ldr	r3, [pc, #64]	@ (8001d0c <check_temperature+0x80>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	bf0c      	ite	eq
 8001cd2:	2301      	moveq	r3, #1
 8001cd4:	2300      	movne	r3, #0
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fc73 	bl	80015c4 <buzzer>
		MusiqueAlerte();
 8001cde:	f7ff fe95 	bl	8001a0c <MusiqueAlerte>

	}else if(temp<max_temp){
		buzzer(buzzerstate);

	}
}
 8001ce2:	e00d      	b.n	8001d00 <check_temperature+0x74>
	}else if(temp<max_temp){
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	68b8      	ldr	r0, [r7, #8]
 8001cea:	f7ff f9ff 	bl	80010ec <__aeabi_fcmpgt>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d100      	bne.n	8001cf6 <check_temperature+0x6a>
}
 8001cf4:	e004      	b.n	8001d00 <check_temperature+0x74>
		buzzer(buzzerstate);
 8001cf6:	4b05      	ldr	r3, [pc, #20]	@ (8001d0c <check_temperature+0x80>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fc62 	bl	80015c4 <buzzer>
}
 8001d00:	bf00      	nop
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	41f00000 	.word	0x41f00000
 8001d0c:	2000040c 	.word	0x2000040c

08001d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d14:	f003 fcfc 	bl	8005710 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d18:	f000 f856 	bl	8001dc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d1c:	f000 f9fe 	bl	800211c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001d20:	f000 f9d2 	bl	80020c8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001d24:	f000 f918 	bl	8001f58 <MX_SPI1_Init>
  MX_TIM3_Init();
 8001d28:	f000 f94c 	bl	8001fc4 <MX_TIM3_Init>
  MX_ADC_Init();
 8001d2c:	f000 f89a 	bl	8001e64 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  MAX7219_Init();				//Initialisation des fonctions de début et on vérifie
 8001d30:	f000 fac6 	bl	80022c0 <MAX7219_Init>
  MAX7219_DisplayTestStart();	//que notre afficheur fonctionne bien
 8001d34:	f000 fae1 	bl	80022fa <MAX7219_DisplayTestStart>
  HAL_Delay(2000);
 8001d38:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001d3c:	f003 fd56 	bl	80057ec <HAL_Delay>
  MAX7219_DisplayTestStop();
 8001d40:	f000 fae3 	bl	800230a <MAX7219_DisplayTestStop>
  conf_capteur();
 8001d44:	f7ff fc56 	bl	80015f4 <conf_capteur>
  affichage_menu();
 8001d48:	f7ff fc64 	bl	8001614 <affichage_menu>
  MusiqueAmbiance();
 8001d4c:	f7ff fdf0 	bl	8001930 <MusiqueAmbiance>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(flag_temp == 1){		//Quand le flag est à 1 on attend une seconde puis on
 8001d50:	4b19      	ldr	r3, [pc, #100]	@ (8001db8 <main+0xa8>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d108      	bne.n	8001d6a <main+0x5a>
		  HAL_Delay(1000);		//affiche notre température, on récupère la valeur du
 8001d58:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d5c:	f003 fd46 	bl	80057ec <HAL_Delay>
		  display_temp();		//flag dans le fichier d'IT
 8001d60:	f7ff fcd0 	bl	8001704 <display_temp>
		  flag_temp=0;
 8001d64:	4b14      	ldr	r3, [pc, #80]	@ (8001db8 <main+0xa8>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	701a      	strb	r2, [r3, #0]
	  }

	  if(flag_hum == 1){		//Pareil avec l'humidité
 8001d6a:	4b14      	ldr	r3, [pc, #80]	@ (8001dbc <main+0xac>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d108      	bne.n	8001d84 <main+0x74>
		  HAL_Delay(1000);
 8001d72:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d76:	f003 fd39 	bl	80057ec <HAL_Delay>
		  display_hum();
 8001d7a:	f7ff fcfd 	bl	8001778 <display_hum>
		  flag_hum=0;
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001dbc <main+0xac>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
	  }

	  if(flag_pres == 1){		//Pareil avec la pression
 8001d84:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc0 <main+0xb0>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d108      	bne.n	8001d9e <main+0x8e>
		  HAL_Delay(1000);
 8001d8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d90:	f003 fd2c 	bl	80057ec <HAL_Delay>
		  display_pression();
 8001d94:	f7ff fd2a 	bl	80017ec <display_pression>
		  flag_pres=0;
 8001d98:	4b09      	ldr	r3, [pc, #36]	@ (8001dc0 <main+0xb0>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	701a      	strb	r2, [r3, #0]
	  }

	  check_temperature(Temperature);	//On check la température en continue
 8001d9e:	4b09      	ldr	r3, [pc, #36]	@ (8001dc4 <main+0xb4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff ff72 	bl	8001c8c <check_temperature>
	  adcFunction();
 8001da8:	f7ff fe4e 	bl	8001a48 <adcFunction>
	  check_temperature_motor(Temperature);
 8001dac:	4b05      	ldr	r3, [pc, #20]	@ (8001dc4 <main+0xb4>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff2d 	bl	8001c10 <check_temperature_motor>
	  if(flag_temp == 1){		//Quand le flag est à 1 on attend une seconde puis on
 8001db6:	e7cb      	b.n	8001d50 <main+0x40>
 8001db8:	20000414 	.word	0x20000414
 8001dbc:	20000415 	.word	0x20000415
 8001dc0:	20000416 	.word	0x20000416
 8001dc4:	20000400 	.word	0x20000400

08001dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b092      	sub	sp, #72	@ 0x48
 8001dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dce:	f107 0314 	add.w	r3, r7, #20
 8001dd2:	2234      	movs	r2, #52	@ 0x34
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f008 ff5a 	bl	800ac90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ddc:	463b      	mov	r3, r7
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	60da      	str	r2, [r3, #12]
 8001de8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dea:	4b1d      	ldr	r3, [pc, #116]	@ (8001e60 <SystemClock_Config+0x98>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8001df2:	4a1b      	ldr	r2, [pc, #108]	@ (8001e60 <SystemClock_Config+0x98>)
 8001df4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001df8:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e02:	2310      	movs	r3, #16
 8001e04:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e06:	2302      	movs	r3, #2
 8001e08:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001e0e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001e12:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001e14:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001e18:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e1a:	f107 0314 	add.w	r3, r7, #20
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f005 ff2e 	bl	8007c80 <HAL_RCC_OscConfig>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001e2a:	f000 fa2b 	bl	8002284 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e2e:	230f      	movs	r3, #15
 8001e30:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e32:	2303      	movs	r3, #3
 8001e34:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e42:	463b      	mov	r3, r7
 8001e44:	2101      	movs	r1, #1
 8001e46:	4618      	mov	r0, r3
 8001e48:	f006 fa4a 	bl	80082e0 <HAL_RCC_ClockConfig>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001e52:	f000 fa17 	bl	8002284 <Error_Handler>
  }
}
 8001e56:	bf00      	nop
 8001e58:	3748      	adds	r7, #72	@ 0x48
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40007000 	.word	0x40007000

08001e64 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	@ 0x28
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001e6a:	f107 0310 	add.w	r3, r7, #16
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	605a      	str	r2, [r3, #4]
 8001e74:	609a      	str	r2, [r3, #8]
 8001e76:	60da      	str	r2, [r3, #12]
 8001e78:	611a      	str	r2, [r3, #16]
 8001e7a:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001e7c:	1d3b      	adds	r3, r7, #4
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001e86:	4b31      	ldr	r3, [pc, #196]	@ (8001f4c <MX_ADC_Init+0xe8>)
 8001e88:	4a31      	ldr	r2, [pc, #196]	@ (8001f50 <MX_ADC_Init+0xec>)
 8001e8a:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001e8c:	4b2f      	ldr	r3, [pc, #188]	@ (8001f4c <MX_ADC_Init+0xe8>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001e92:	4b2e      	ldr	r3, [pc, #184]	@ (8001f4c <MX_ADC_Init+0xe8>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e98:	4b2c      	ldr	r3, [pc, #176]	@ (8001f4c <MX_ADC_Init+0xe8>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e9e:	4b2b      	ldr	r3, [pc, #172]	@ (8001f4c <MX_ADC_Init+0xe8>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001ea4:	4b29      	ldr	r3, [pc, #164]	@ (8001f4c <MX_ADC_Init+0xe8>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001eaa:	4b28      	ldr	r3, [pc, #160]	@ (8001f4c <MX_ADC_Init+0xe8>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001eb0:	4b26      	ldr	r3, [pc, #152]	@ (8001f4c <MX_ADC_Init+0xe8>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001eb6:	4b25      	ldr	r3, [pc, #148]	@ (8001f4c <MX_ADC_Init+0xe8>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001ebc:	4b23      	ldr	r3, [pc, #140]	@ (8001f4c <MX_ADC_Init+0xe8>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc.Init.NbrOfConversion = 1;
 8001ec4:	4b21      	ldr	r3, [pc, #132]	@ (8001f4c <MX_ADC_Init+0xe8>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001eca:	4b20      	ldr	r3, [pc, #128]	@ (8001f4c <MX_ADC_Init+0xe8>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f4c <MX_ADC_Init+0xe8>)
 8001ed4:	2210      	movs	r2, #16
 8001ed6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f4c <MX_ADC_Init+0xe8>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001ede:	4b1b      	ldr	r3, [pc, #108]	@ (8001f4c <MX_ADC_Init+0xe8>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001ee6:	4819      	ldr	r0, [pc, #100]	@ (8001f4c <MX_ADC_Init+0xe8>)
 8001ee8:	f003 fca2 	bl	8005830 <HAL_ADC_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_ADC_Init+0x92>
  {
    Error_Handler();
 8001ef2:	f000 f9c7 	bl	8002284 <Error_Handler>
  }

  /** Configure the analog watchdog
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8001ef6:	4b17      	ldr	r3, [pc, #92]	@ (8001f54 <MX_ADC_Init+0xf0>)
 8001ef8:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.Channel = ADC_CHANNEL_0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.ITMode = ENABLE;
 8001efe:	2301      	movs	r3, #1
 8001f00:	763b      	strb	r3, [r7, #24]
  AnalogWDGConfig.HighThreshold = 500;
 8001f02:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001f06:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.LowThreshold = 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 8001f0c:	f107 0310 	add.w	r3, r7, #16
 8001f10:	4619      	mov	r1, r3
 8001f12:	480e      	ldr	r0, [pc, #56]	@ (8001f4c <MX_ADC_Init+0xe8>)
 8001f14:	f004 f982 	bl	800621c <HAL_ADC_AnalogWDGConfig>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8001f1e:	f000 f9b1 	bl	8002284 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f26:	2301      	movs	r3, #1
 8001f28:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001f2e:	1d3b      	adds	r3, r7, #4
 8001f30:	4619      	mov	r1, r3
 8001f32:	4806      	ldr	r0, [pc, #24]	@ (8001f4c <MX_ADC_Init+0xe8>)
 8001f34:	f004 f806 	bl	8005f44 <HAL_ADC_ConfigChannel>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_ADC_Init+0xde>
  {
    Error_Handler();
 8001f3e:	f000 f9a1 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001f42:	bf00      	nop
 8001f44:	3728      	adds	r7, #40	@ 0x28
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	200002cc 	.word	0x200002cc
 8001f50:	40012400 	.word	0x40012400
 8001f54:	00800200 	.word	0x00800200

08001f58 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f5c:	4b17      	ldr	r3, [pc, #92]	@ (8001fbc <MX_SPI1_Init+0x64>)
 8001f5e:	4a18      	ldr	r2, [pc, #96]	@ (8001fc0 <MX_SPI1_Init+0x68>)
 8001f60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f62:	4b16      	ldr	r3, [pc, #88]	@ (8001fbc <MX_SPI1_Init+0x64>)
 8001f64:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f6a:	4b14      	ldr	r3, [pc, #80]	@ (8001fbc <MX_SPI1_Init+0x64>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f70:	4b12      	ldr	r3, [pc, #72]	@ (8001fbc <MX_SPI1_Init+0x64>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f76:	4b11      	ldr	r3, [pc, #68]	@ (8001fbc <MX_SPI1_Init+0x64>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fbc <MX_SPI1_Init+0x64>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f82:	4b0e      	ldr	r3, [pc, #56]	@ (8001fbc <MX_SPI1_Init+0x64>)
 8001f84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f88:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001fbc <MX_SPI1_Init+0x64>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f90:	4b0a      	ldr	r3, [pc, #40]	@ (8001fbc <MX_SPI1_Init+0x64>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f96:	4b09      	ldr	r3, [pc, #36]	@ (8001fbc <MX_SPI1_Init+0x64>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f9c:	4b07      	ldr	r3, [pc, #28]	@ (8001fbc <MX_SPI1_Init+0x64>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001fa2:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <MX_SPI1_Init+0x64>)
 8001fa4:	220a      	movs	r2, #10
 8001fa6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fa8:	4804      	ldr	r0, [pc, #16]	@ (8001fbc <MX_SPI1_Init+0x64>)
 8001faa:	f006 fc5f 	bl	800886c <HAL_SPI_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001fb4:	f000 f966 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20000320 	.word	0x20000320
 8001fc0:	40013000 	.word	0x40013000

08001fc4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08a      	sub	sp, #40	@ 0x28
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fca:	f107 0318 	add.w	r3, r7, #24
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
 8001fd4:	609a      	str	r2, [r3, #8]
 8001fd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd8:	f107 0310 	add.w	r3, r7, #16
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fe2:	463b      	mov	r3, r7
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fee:	4b34      	ldr	r3, [pc, #208]	@ (80020c0 <MX_TIM3_Init+0xfc>)
 8001ff0:	4a34      	ldr	r2, [pc, #208]	@ (80020c4 <MX_TIM3_Init+0x100>)
 8001ff2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 8001ff4:	4b32      	ldr	r3, [pc, #200]	@ (80020c0 <MX_TIM3_Init+0xfc>)
 8001ff6:	221f      	movs	r2, #31
 8001ff8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ffa:	4b31      	ldr	r3, [pc, #196]	@ (80020c0 <MX_TIM3_Init+0xfc>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2278;
 8002000:	4b2f      	ldr	r3, [pc, #188]	@ (80020c0 <MX_TIM3_Init+0xfc>)
 8002002:	f640 02e6 	movw	r2, #2278	@ 0x8e6
 8002006:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002008:	4b2d      	ldr	r3, [pc, #180]	@ (80020c0 <MX_TIM3_Init+0xfc>)
 800200a:	2200      	movs	r2, #0
 800200c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800200e:	4b2c      	ldr	r3, [pc, #176]	@ (80020c0 <MX_TIM3_Init+0xfc>)
 8002010:	2200      	movs	r2, #0
 8002012:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002014:	482a      	ldr	r0, [pc, #168]	@ (80020c0 <MX_TIM3_Init+0xfc>)
 8002016:	f006 febf 	bl	8008d98 <HAL_TIM_Base_Init>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8002020:	f000 f930 	bl	8002284 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002024:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002028:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800202a:	f107 0318 	add.w	r3, r7, #24
 800202e:	4619      	mov	r1, r3
 8002030:	4823      	ldr	r0, [pc, #140]	@ (80020c0 <MX_TIM3_Init+0xfc>)
 8002032:	f007 fa3b 	bl	80094ac <HAL_TIM_ConfigClockSource>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800203c:	f000 f922 	bl	8002284 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002040:	481f      	ldr	r0, [pc, #124]	@ (80020c0 <MX_TIM3_Init+0xfc>)
 8002042:	f006 fee8 	bl	8008e16 <HAL_TIM_PWM_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800204c:	f000 f91a 	bl	8002284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002050:	2300      	movs	r3, #0
 8002052:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002058:	f107 0310 	add.w	r3, r7, #16
 800205c:	4619      	mov	r1, r3
 800205e:	4818      	ldr	r0, [pc, #96]	@ (80020c0 <MX_TIM3_Init+0xfc>)
 8002060:	f007 fd0c 	bl	8009a7c <HAL_TIMEx_MasterConfigSynchronization>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800206a:	f000 f90b 	bl	8002284 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800206e:	2360      	movs	r3, #96	@ 0x60
 8002070:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8002072:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002076:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002078:	2300      	movs	r3, #0
 800207a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002080:	463b      	mov	r3, r7
 8002082:	2200      	movs	r2, #0
 8002084:	4619      	mov	r1, r3
 8002086:	480e      	ldr	r0, [pc, #56]	@ (80020c0 <MX_TIM3_Init+0xfc>)
 8002088:	f007 f94e 	bl	8009328 <HAL_TIM_PWM_ConfigChannel>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8002092:	f000 f8f7 	bl	8002284 <Error_Handler>
  }
  sConfigOC.Pulse = 1139;
 8002096:	f240 4373 	movw	r3, #1139	@ 0x473
 800209a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800209c:	463b      	mov	r3, r7
 800209e:	2204      	movs	r2, #4
 80020a0:	4619      	mov	r1, r3
 80020a2:	4807      	ldr	r0, [pc, #28]	@ (80020c0 <MX_TIM3_Init+0xfc>)
 80020a4:	f007 f940 	bl	8009328 <HAL_TIM_PWM_ConfigChannel>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80020ae:	f000 f8e9 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80020b2:	4803      	ldr	r0, [pc, #12]	@ (80020c0 <MX_TIM3_Init+0xfc>)
 80020b4:	f000 fa9c 	bl	80025f0 <HAL_TIM_MspPostInit>

}
 80020b8:	bf00      	nop
 80020ba:	3728      	adds	r7, #40	@ 0x28
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20000378 	.word	0x20000378
 80020c4:	40000400 	.word	0x40000400

080020c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020cc:	4b11      	ldr	r3, [pc, #68]	@ (8002114 <MX_USART2_UART_Init+0x4c>)
 80020ce:	4a12      	ldr	r2, [pc, #72]	@ (8002118 <MX_USART2_UART_Init+0x50>)
 80020d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020d2:	4b10      	ldr	r3, [pc, #64]	@ (8002114 <MX_USART2_UART_Init+0x4c>)
 80020d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020da:	4b0e      	ldr	r3, [pc, #56]	@ (8002114 <MX_USART2_UART_Init+0x4c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002114 <MX_USART2_UART_Init+0x4c>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002114 <MX_USART2_UART_Init+0x4c>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020ec:	4b09      	ldr	r3, [pc, #36]	@ (8002114 <MX_USART2_UART_Init+0x4c>)
 80020ee:	220c      	movs	r2, #12
 80020f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020f2:	4b08      	ldr	r3, [pc, #32]	@ (8002114 <MX_USART2_UART_Init+0x4c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020f8:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <MX_USART2_UART_Init+0x4c>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020fe:	4805      	ldr	r0, [pc, #20]	@ (8002114 <MX_USART2_UART_Init+0x4c>)
 8002100:	f007 fd1a 	bl	8009b38 <HAL_UART_Init>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800210a:	f000 f8bb 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	200003b8 	.word	0x200003b8
 8002118:	40004400 	.word	0x40004400

0800211c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08a      	sub	sp, #40	@ 0x28
 8002120:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002122:	f107 0314 	add.w	r3, r7, #20
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	60da      	str	r2, [r3, #12]
 8002130:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002132:	4b45      	ldr	r3, [pc, #276]	@ (8002248 <MX_GPIO_Init+0x12c>)
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	4a44      	ldr	r2, [pc, #272]	@ (8002248 <MX_GPIO_Init+0x12c>)
 8002138:	f043 0304 	orr.w	r3, r3, #4
 800213c:	61d3      	str	r3, [r2, #28]
 800213e:	4b42      	ldr	r3, [pc, #264]	@ (8002248 <MX_GPIO_Init+0x12c>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800214a:	4b3f      	ldr	r3, [pc, #252]	@ (8002248 <MX_GPIO_Init+0x12c>)
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	4a3e      	ldr	r2, [pc, #248]	@ (8002248 <MX_GPIO_Init+0x12c>)
 8002150:	f043 0320 	orr.w	r3, r3, #32
 8002154:	61d3      	str	r3, [r2, #28]
 8002156:	4b3c      	ldr	r3, [pc, #240]	@ (8002248 <MX_GPIO_Init+0x12c>)
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	f003 0320 	and.w	r3, r3, #32
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002162:	4b39      	ldr	r3, [pc, #228]	@ (8002248 <MX_GPIO_Init+0x12c>)
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	4a38      	ldr	r2, [pc, #224]	@ (8002248 <MX_GPIO_Init+0x12c>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	61d3      	str	r3, [r2, #28]
 800216e:	4b36      	ldr	r3, [pc, #216]	@ (8002248 <MX_GPIO_Init+0x12c>)
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800217a:	4b33      	ldr	r3, [pc, #204]	@ (8002248 <MX_GPIO_Init+0x12c>)
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	4a32      	ldr	r2, [pc, #200]	@ (8002248 <MX_GPIO_Init+0x12c>)
 8002180:	f043 0302 	orr.w	r3, r3, #2
 8002184:	61d3      	str	r3, [r2, #28]
 8002186:	4b30      	ldr	r3, [pc, #192]	@ (8002248 <MX_GPIO_Init+0x12c>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	607b      	str	r3, [r7, #4]
 8002190:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L0_Pin|L1_Pin|L2_Pin|L3_Pin, GPIO_PIN_RESET);
 8002192:	2200      	movs	r2, #0
 8002194:	f640 4106 	movw	r1, #3078	@ 0xc06
 8002198:	482c      	ldr	r0, [pc, #176]	@ (800224c <MX_GPIO_Init+0x130>)
 800219a:	f004 fccf 	bl	8006b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800219e:	2200      	movs	r2, #0
 80021a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021a4:	482a      	ldr	r0, [pc, #168]	@ (8002250 <MX_GPIO_Init+0x134>)
 80021a6:	f004 fcc9 	bl	8006b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin BTN4_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = B1_Pin|BTN4_Pin|BTN3_Pin;
 80021aa:	f242 0360 	movw	r3, #8288	@ 0x2060
 80021ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80021b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ba:	f107 0314 	add.w	r3, r7, #20
 80021be:	4619      	mov	r1, r3
 80021c0:	4824      	ldr	r0, [pc, #144]	@ (8002254 <MX_GPIO_Init+0x138>)
 80021c2:	f004 fa3b 	bl	800663c <HAL_GPIO_Init>

  /*Configure GPIO pins : L0_Pin L1_Pin L2_Pin L3_Pin */
  GPIO_InitStruct.Pin = L0_Pin|L1_Pin|L2_Pin|L3_Pin;
 80021c6:	f640 4306 	movw	r3, #3078	@ 0xc06
 80021ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021cc:	2301      	movs	r3, #1
 80021ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d4:	2300      	movs	r3, #0
 80021d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d8:	f107 0314 	add.w	r3, r7, #20
 80021dc:	4619      	mov	r1, r3
 80021de:	481b      	ldr	r0, [pc, #108]	@ (800224c <MX_GPIO_Init+0x130>)
 80021e0:	f004 fa2c 	bl	800663c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80021e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ea:	2301      	movs	r3, #1
 80021ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f2:	2300      	movs	r3, #0
 80021f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80021f6:	f107 0314 	add.w	r3, r7, #20
 80021fa:	4619      	mov	r1, r3
 80021fc:	4814      	ldr	r0, [pc, #80]	@ (8002250 <MX_GPIO_Init+0x134>)
 80021fe:	f004 fa1d 	bl	800663c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 8002202:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002208:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800220c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002212:	f107 0314 	add.w	r3, r7, #20
 8002216:	4619      	mov	r1, r3
 8002218:	480d      	ldr	r0, [pc, #52]	@ (8002250 <MX_GPIO_Init+0x134>)
 800221a:	f004 fa0f 	bl	800663c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	2100      	movs	r1, #0
 8002222:	2017      	movs	r0, #23
 8002224:	f004 f9d3 	bl	80065ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002228:	2017      	movs	r0, #23
 800222a:	f004 f9ec 	bl	8006606 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	2100      	movs	r1, #0
 8002232:	2028      	movs	r0, #40	@ 0x28
 8002234:	f004 f9cb 	bl	80065ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002238:	2028      	movs	r0, #40	@ 0x28
 800223a:	f004 f9e4 	bl	8006606 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800223e:	bf00      	nop
 8002240:	3728      	adds	r7, #40	@ 0x28
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40023800 	.word	0x40023800
 800224c:	40020400 	.word	0x40020400
 8002250:	40020000 	.word	0x40020000
 8002254:	40020800 	.word	0x40020800

08002258 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff f8e8 	bl	8001438 <ITM_SendChar>
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
 8002268:	1d39      	adds	r1, r7, #4
 800226a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800226e:	2201      	movs	r2, #1
 8002270:	4803      	ldr	r0, [pc, #12]	@ (8002280 <__io_putchar+0x28>)
 8002272:	f007 fcb1 	bl	8009bd8 <HAL_UART_Transmit>
	return(ch);
 8002276:	687b      	ldr	r3, [r7, #4]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	200003b8 	.word	0x200003b8

08002284 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002288:	b672      	cpsid	i
}
 800228a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800228c:	bf00      	nop
 800228e:	e7fd      	b.n	800228c <Error_Handler+0x8>

08002290 <SPI_CS_High>:
#define LOAD_0()      SPI_CS_High()
#define LOAD_1()      SPI_CS_Low()


 void SPI_CS_High()
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8002294:	2201      	movs	r2, #1
 8002296:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800229a:	4802      	ldr	r0, [pc, #8]	@ (80022a4 <SPI_CS_High+0x14>)
 800229c:	f004 fc4e 	bl	8006b3c <HAL_GPIO_WritePin>
}
 80022a0:	bf00      	nop
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40020000 	.word	0x40020000

080022a8 <SPI_CS_Low>:

 void SPI_CS_Low()
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80022ac:	2200      	movs	r2, #0
 80022ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022b2:	4802      	ldr	r0, [pc, #8]	@ (80022bc <SPI_CS_Low+0x14>)
 80022b4:	f004 fc42 	bl	8006b3c <HAL_GPIO_WritePin>
}
 80022b8:	bf00      	nop
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40020000 	.word	0x40020000

080022c0 <MAX7219_Init>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Init (void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  //DATA_DDR |= DATA_BIT;                               // configure "DATA" as output
  //CLK_DDR  |= CLK_BIT;                                // configure "CLK"  as output
  //LOAD_DDR |= LOAD_BIT;                               // configure "LOAD" as output

  MAX7219_Write(REG_SCAN_LIMIT, 7);                   // set up to scan all eight digits
 80022c4:	2107      	movs	r1, #7
 80022c6:	200b      	movs	r0, #11
 80022c8:	f000 f88c 	bl	80023e4 <MAX7219_Write>
  MAX7219_Write(REG_DECODE, 0x00);                    // set to "no decode" for all digits
 80022cc:	2100      	movs	r1, #0
 80022ce:	2009      	movs	r0, #9
 80022d0:	f000 f888 	bl	80023e4 <MAX7219_Write>
  MAX7219_ShutdownStop();                             // select normal operation (i.e. not shutdown)
 80022d4:	f000 f809 	bl	80022ea <MAX7219_ShutdownStop>
  MAX7219_DisplayTestStop();                          // select normal operation (i.e. not test mode)
 80022d8:	f000 f817 	bl	800230a <MAX7219_DisplayTestStop>
  MAX7219_Clear();                                    // clear all digits
 80022dc:	f000 f82f 	bl	800233e <MAX7219_Clear>
  MAX7219_SetBrightness(INTENSITY_MAX);               // set to maximum intensity
 80022e0:	200f      	movs	r0, #15
 80022e2:	f000 f81a 	bl	800231a <MAX7219_SetBrightness>
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}

080022ea <MAX7219_ShutdownStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_ShutdownStop (void)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_SHUTDOWN, 1);                     // put MAX7219 into "normal" mode
 80022ee:	2101      	movs	r1, #1
 80022f0:	200c      	movs	r0, #12
 80022f2:	f000 f877 	bl	80023e4 <MAX7219_Write>
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}

080022fa <MAX7219_DisplayTestStart>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayTestStart (void)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_DISPLAY_TEST, 1);                 // put MAX7219 into "display test" mode
 80022fe:	2101      	movs	r1, #1
 8002300:	200f      	movs	r0, #15
 8002302:	f000 f86f 	bl	80023e4 <MAX7219_Write>
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}

0800230a <MAX7219_DisplayTestStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayTestStop (void)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_DISPLAY_TEST, 0);                 // put MAX7219 into "normal" mode
 800230e:	2100      	movs	r1, #0
 8002310:	200f      	movs	r0, #15
 8002312:	f000 f867 	bl	80023e4 <MAX7219_Write>
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}

0800231a <MAX7219_SetBrightness>:
* Arguments  : brightness (0-15)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_SetBrightness (char brightness)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	4603      	mov	r3, r0
 8002322:	71fb      	strb	r3, [r7, #7]
  brightness &= 0x0f;                                 // mask off extra bits
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	71fb      	strb	r3, [r7, #7]
  MAX7219_Write(REG_INTENSITY, brightness);           // set brightness
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	4619      	mov	r1, r3
 8002330:	200a      	movs	r0, #10
 8002332:	f000 f857 	bl	80023e4 <MAX7219_Write>
}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <MAX7219_Clear>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Clear (void)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
  char i;
  for (i=0; i < 8; i++)
 8002344:	2300      	movs	r3, #0
 8002346:	71fb      	strb	r3, [r7, #7]
 8002348:	e007      	b.n	800235a <MAX7219_Clear+0x1c>
    MAX7219_Write(i, 0x00);                           // turn all segments off
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	2100      	movs	r1, #0
 800234e:	4618      	mov	r0, r3
 8002350:	f000 f848 	bl	80023e4 <MAX7219_Write>
  for (i=0; i < 8; i++)
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	3301      	adds	r3, #1
 8002358:	71fb      	strb	r3, [r7, #7]
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	2b07      	cmp	r3, #7
 800235e:	d9f4      	bls.n	800234a <MAX7219_Clear+0xc>
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <MAX7219_DisplayChar>:
*              character = character to display (0-9, A-Z)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayChar (char digit, char character)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	4603      	mov	r3, r0
 8002372:	460a      	mov	r2, r1
 8002374:	71fb      	strb	r3, [r7, #7]
 8002376:	4613      	mov	r3, r2
 8002378:	71bb      	strb	r3, [r7, #6]
  MAX7219_Write(digit, MAX7219_LookupCode(character));
 800237a:	79bb      	ldrb	r3, [r7, #6]
 800237c:	4618      	mov	r0, r3
 800237e:	f000 f80b 	bl	8002398 <MAX7219_LookupCode>
 8002382:	4603      	mov	r3, r0
 8002384:	461a      	mov	r2, r3
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	4611      	mov	r1, r2
 800238a:	4618      	mov	r0, r3
 800238c:	f000 f82a 	bl	80023e4 <MAX7219_Write>
}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <MAX7219_LookupCode>:
* Arguments  : character to display
* Returns    : segment code
*********************************************************************************************************
*/
static unsigned char MAX7219_LookupCode (char character)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	71fb      	strb	r3, [r7, #7]
  char i;
  for (i = 0; MAX7219_Font[i].ascii; i++)             // scan font table for ascii code
 80023a2:	2300      	movs	r3, #0
 80023a4:	73fb      	strb	r3, [r7, #15]
 80023a6:	e00f      	b.n	80023c8 <MAX7219_LookupCode+0x30>
    if (character == MAX7219_Font[i].ascii)
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
 80023aa:	4a0d      	ldr	r2, [pc, #52]	@ (80023e0 <MAX7219_LookupCode+0x48>)
 80023ac:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80023b0:	79fa      	ldrb	r2, [r7, #7]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d105      	bne.n	80023c2 <MAX7219_LookupCode+0x2a>
      return MAX7219_Font[i].segs;                    // return segments code
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	4a09      	ldr	r2, [pc, #36]	@ (80023e0 <MAX7219_LookupCode+0x48>)
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	4413      	add	r3, r2
 80023be:	785b      	ldrb	r3, [r3, #1]
 80023c0:	e009      	b.n	80023d6 <MAX7219_LookupCode+0x3e>
  for (i = 0; MAX7219_Font[i].ascii; i++)             // scan font table for ascii code
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
 80023c4:	3301      	adds	r3, #1
 80023c6:	73fb      	strb	r3, [r7, #15]
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	4a05      	ldr	r2, [pc, #20]	@ (80023e0 <MAX7219_LookupCode+0x48>)
 80023cc:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1e9      	bne.n	80023a8 <MAX7219_LookupCode+0x10>
  return 0;                                           // code not found, return null (blank)
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr
 80023e0:	0800dc10 	.word	0x0800dc10

080023e4 <MAX7219_Write>:
*              dataout = data to write to MAX7219
* Returns    : none
*********************************************************************************************************
*/
static void MAX7219_Write (unsigned char reg_number, unsigned char dataout)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	460a      	mov	r2, r1
 80023ee:	71fb      	strb	r3, [r7, #7]
 80023f0:	4613      	mov	r3, r2
 80023f2:	71bb      	strb	r3, [r7, #6]
  LOAD_1();                                           // take LOAD high to begin
 80023f4:	f7ff ff58 	bl	80022a8 <SPI_CS_Low>
  MAX7219_SendByte(reg_number);                       // write register number to MAX7219
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 f80c 	bl	8002418 <MAX7219_SendByte>
  MAX7219_SendByte(dataout);                          // write data to MAX7219
 8002400:	79bb      	ldrb	r3, [r7, #6]
 8002402:	4618      	mov	r0, r3
 8002404:	f000 f808 	bl	8002418 <MAX7219_SendByte>
  LOAD_0();                                           // take LOAD low to latch in data
 8002408:	f7ff ff42 	bl	8002290 <SPI_CS_High>
  LOAD_1();                                           // take LOAD high to end
 800240c:	f7ff ff4c 	bl	80022a8 <SPI_CS_Low>
}
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <MAX7219_SendByte>:
      DATA_0();                                       //  "0"
    CLK_1();                                          // bring CLK high
	}
}*/
static void MAX7219_SendByte (unsigned char dataout)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &dataout, 1, 1000);
 8002422:	1df9      	adds	r1, r7, #7
 8002424:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002428:	2201      	movs	r2, #1
 800242a:	4803      	ldr	r0, [pc, #12]	@ (8002438 <MAX7219_SendByte+0x20>)
 800242c:	f006 faa7 	bl	800897e <HAL_SPI_Transmit>
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20000320 	.word	0x20000320

0800243c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8002442:	4b15      	ldr	r3, [pc, #84]	@ (8002498 <HAL_MspInit+0x5c>)
 8002444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002446:	4a14      	ldr	r2, [pc, #80]	@ (8002498 <HAL_MspInit+0x5c>)
 8002448:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800244c:	6253      	str	r3, [r2, #36]	@ 0x24
 800244e:	4b12      	ldr	r3, [pc, #72]	@ (8002498 <HAL_MspInit+0x5c>)
 8002450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002452:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245a:	4b0f      	ldr	r3, [pc, #60]	@ (8002498 <HAL_MspInit+0x5c>)
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	4a0e      	ldr	r2, [pc, #56]	@ (8002498 <HAL_MspInit+0x5c>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	6213      	str	r3, [r2, #32]
 8002466:	4b0c      	ldr	r3, [pc, #48]	@ (8002498 <HAL_MspInit+0x5c>)
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	60bb      	str	r3, [r7, #8]
 8002470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002472:	4b09      	ldr	r3, [pc, #36]	@ (8002498 <HAL_MspInit+0x5c>)
 8002474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002476:	4a08      	ldr	r2, [pc, #32]	@ (8002498 <HAL_MspInit+0x5c>)
 8002478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800247c:	6253      	str	r3, [r2, #36]	@ 0x24
 800247e:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <HAL_MspInit+0x5c>)
 8002480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002486:	607b      	str	r3, [r7, #4]
 8002488:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800248a:	2007      	movs	r0, #7
 800248c:	f004 f894 	bl	80065b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002490:	bf00      	nop
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40023800 	.word	0x40023800

0800249c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08a      	sub	sp, #40	@ 0x28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 0314 	add.w	r3, r7, #20
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a19      	ldr	r2, [pc, #100]	@ (8002520 <HAL_ADC_MspInit+0x84>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d12b      	bne.n	8002516 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024be:	4b19      	ldr	r3, [pc, #100]	@ (8002524 <HAL_ADC_MspInit+0x88>)
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	4a18      	ldr	r2, [pc, #96]	@ (8002524 <HAL_ADC_MspInit+0x88>)
 80024c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024c8:	6213      	str	r3, [r2, #32]
 80024ca:	4b16      	ldr	r3, [pc, #88]	@ (8002524 <HAL_ADC_MspInit+0x88>)
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d6:	4b13      	ldr	r3, [pc, #76]	@ (8002524 <HAL_ADC_MspInit+0x88>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	4a12      	ldr	r2, [pc, #72]	@ (8002524 <HAL_ADC_MspInit+0x88>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	61d3      	str	r3, [r2, #28]
 80024e2:	4b10      	ldr	r3, [pc, #64]	@ (8002524 <HAL_ADC_MspInit+0x88>)
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = myADC0_Pin;
 80024ee:	2301      	movs	r3, #1
 80024f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024f2:	2303      	movs	r3, #3
 80024f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(myADC0_GPIO_Port, &GPIO_InitStruct);
 80024fa:	f107 0314 	add.w	r3, r7, #20
 80024fe:	4619      	mov	r1, r3
 8002500:	4809      	ldr	r0, [pc, #36]	@ (8002528 <HAL_ADC_MspInit+0x8c>)
 8002502:	f004 f89b 	bl	800663c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8002506:	2200      	movs	r2, #0
 8002508:	2100      	movs	r1, #0
 800250a:	2012      	movs	r0, #18
 800250c:	f004 f85f 	bl	80065ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8002510:	2012      	movs	r0, #18
 8002512:	f004 f878 	bl	8006606 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002516:	bf00      	nop
 8002518:	3728      	adds	r7, #40	@ 0x28
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40012400 	.word	0x40012400
 8002524:	40023800 	.word	0x40023800
 8002528:	40020000 	.word	0x40020000

0800252c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08a      	sub	sp, #40	@ 0x28
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002534:	f107 0314 	add.w	r3, r7, #20
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a17      	ldr	r2, [pc, #92]	@ (80025a8 <HAL_SPI_MspInit+0x7c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d127      	bne.n	800259e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800254e:	4b17      	ldr	r3, [pc, #92]	@ (80025ac <HAL_SPI_MspInit+0x80>)
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4a16      	ldr	r2, [pc, #88]	@ (80025ac <HAL_SPI_MspInit+0x80>)
 8002554:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002558:	6213      	str	r3, [r2, #32]
 800255a:	4b14      	ldr	r3, [pc, #80]	@ (80025ac <HAL_SPI_MspInit+0x80>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002562:	613b      	str	r3, [r7, #16]
 8002564:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002566:	4b11      	ldr	r3, [pc, #68]	@ (80025ac <HAL_SPI_MspInit+0x80>)
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	4a10      	ldr	r2, [pc, #64]	@ (80025ac <HAL_SPI_MspInit+0x80>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	61d3      	str	r3, [r2, #28]
 8002572:	4b0e      	ldr	r3, [pc, #56]	@ (80025ac <HAL_SPI_MspInit+0x80>)
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800257e:	23e0      	movs	r3, #224	@ 0xe0
 8002580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002582:	2302      	movs	r3, #2
 8002584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258a:	2303      	movs	r3, #3
 800258c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800258e:	2305      	movs	r3, #5
 8002590:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002592:	f107 0314 	add.w	r3, r7, #20
 8002596:	4619      	mov	r1, r3
 8002598:	4805      	ldr	r0, [pc, #20]	@ (80025b0 <HAL_SPI_MspInit+0x84>)
 800259a:	f004 f84f 	bl	800663c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800259e:	bf00      	nop
 80025a0:	3728      	adds	r7, #40	@ 0x28
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40013000 	.word	0x40013000
 80025ac:	40023800 	.word	0x40023800
 80025b0:	40020000 	.word	0x40020000

080025b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a09      	ldr	r2, [pc, #36]	@ (80025e8 <HAL_TIM_Base_MspInit+0x34>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d10b      	bne.n	80025de <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025c6:	4b09      	ldr	r3, [pc, #36]	@ (80025ec <HAL_TIM_Base_MspInit+0x38>)
 80025c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ca:	4a08      	ldr	r2, [pc, #32]	@ (80025ec <HAL_TIM_Base_MspInit+0x38>)
 80025cc:	f043 0302 	orr.w	r3, r3, #2
 80025d0:	6253      	str	r3, [r2, #36]	@ 0x24
 80025d2:	4b06      	ldr	r3, [pc, #24]	@ (80025ec <HAL_TIM_Base_MspInit+0x38>)
 80025d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80025de:	bf00      	nop
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr
 80025e8:	40000400 	.word	0x40000400
 80025ec:	40023800 	.word	0x40023800

080025f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08a      	sub	sp, #40	@ 0x28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f8:	f107 0314 	add.w	r3, r7, #20
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	605a      	str	r2, [r3, #4]
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	60da      	str	r2, [r3, #12]
 8002606:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a1f      	ldr	r2, [pc, #124]	@ (800268c <HAL_TIM_MspPostInit+0x9c>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d137      	bne.n	8002682 <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002612:	4b1f      	ldr	r3, [pc, #124]	@ (8002690 <HAL_TIM_MspPostInit+0xa0>)
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	4a1e      	ldr	r2, [pc, #120]	@ (8002690 <HAL_TIM_MspPostInit+0xa0>)
 8002618:	f043 0304 	orr.w	r3, r3, #4
 800261c:	61d3      	str	r3, [r2, #28]
 800261e:	4b1c      	ldr	r3, [pc, #112]	@ (8002690 <HAL_TIM_MspPostInit+0xa0>)
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	613b      	str	r3, [r7, #16]
 8002628:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800262a:	4b19      	ldr	r3, [pc, #100]	@ (8002690 <HAL_TIM_MspPostInit+0xa0>)
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	4a18      	ldr	r2, [pc, #96]	@ (8002690 <HAL_TIM_MspPostInit+0xa0>)
 8002630:	f043 0302 	orr.w	r3, r3, #2
 8002634:	61d3      	str	r3, [r2, #28]
 8002636:	4b16      	ldr	r3, [pc, #88]	@ (8002690 <HAL_TIM_MspPostInit+0xa0>)
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002642:	2380      	movs	r3, #128	@ 0x80
 8002644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002646:	2302      	movs	r3, #2
 8002648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264a:	2300      	movs	r3, #0
 800264c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264e:	2300      	movs	r3, #0
 8002650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002652:	2302      	movs	r3, #2
 8002654:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002656:	f107 0314 	add.w	r3, r7, #20
 800265a:	4619      	mov	r1, r3
 800265c:	480d      	ldr	r0, [pc, #52]	@ (8002694 <HAL_TIM_MspPostInit+0xa4>)
 800265e:	f003 ffed 	bl	800663c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002662:	2310      	movs	r3, #16
 8002664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002666:	2302      	movs	r3, #2
 8002668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266e:	2300      	movs	r3, #0
 8002670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002672:	2302      	movs	r3, #2
 8002674:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002676:	f107 0314 	add.w	r3, r7, #20
 800267a:	4619      	mov	r1, r3
 800267c:	4806      	ldr	r0, [pc, #24]	@ (8002698 <HAL_TIM_MspPostInit+0xa8>)
 800267e:	f003 ffdd 	bl	800663c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002682:	bf00      	nop
 8002684:	3728      	adds	r7, #40	@ 0x28
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40000400 	.word	0x40000400
 8002690:	40023800 	.word	0x40023800
 8002694:	40020800 	.word	0x40020800
 8002698:	40020400 	.word	0x40020400

0800269c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08a      	sub	sp, #40	@ 0x28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a4:	f107 0314 	add.w	r3, r7, #20
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a17      	ldr	r2, [pc, #92]	@ (8002718 <HAL_UART_MspInit+0x7c>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d127      	bne.n	800270e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026be:	4b17      	ldr	r3, [pc, #92]	@ (800271c <HAL_UART_MspInit+0x80>)
 80026c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c2:	4a16      	ldr	r2, [pc, #88]	@ (800271c <HAL_UART_MspInit+0x80>)
 80026c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026c8:	6253      	str	r3, [r2, #36]	@ 0x24
 80026ca:	4b14      	ldr	r3, [pc, #80]	@ (800271c <HAL_UART_MspInit+0x80>)
 80026cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d6:	4b11      	ldr	r3, [pc, #68]	@ (800271c <HAL_UART_MspInit+0x80>)
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	4a10      	ldr	r2, [pc, #64]	@ (800271c <HAL_UART_MspInit+0x80>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	61d3      	str	r3, [r2, #28]
 80026e2:	4b0e      	ldr	r3, [pc, #56]	@ (800271c <HAL_UART_MspInit+0x80>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80026ee:	230c      	movs	r3, #12
 80026f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f2:	2302      	movs	r3, #2
 80026f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026fa:	2303      	movs	r3, #3
 80026fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026fe:	2307      	movs	r3, #7
 8002700:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002702:	f107 0314 	add.w	r3, r7, #20
 8002706:	4619      	mov	r1, r3
 8002708:	4805      	ldr	r0, [pc, #20]	@ (8002720 <HAL_UART_MspInit+0x84>)
 800270a:	f003 ff97 	bl	800663c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800270e:	bf00      	nop
 8002710:	3728      	adds	r7, #40	@ 0x28
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40004400 	.word	0x40004400
 800271c:	40023800 	.word	0x40023800
 8002720:	40020000 	.word	0x40020000

08002724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002728:	bf00      	nop
 800272a:	e7fd      	b.n	8002728 <NMI_Handler+0x4>

0800272c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002730:	bf00      	nop
 8002732:	e7fd      	b.n	8002730 <HardFault_Handler+0x4>

08002734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002738:	bf00      	nop
 800273a:	e7fd      	b.n	8002738 <MemManage_Handler+0x4>

0800273c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002740:	bf00      	nop
 8002742:	e7fd      	b.n	8002740 <BusFault_Handler+0x4>

08002744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002748:	bf00      	nop
 800274a:	e7fd      	b.n	8002748 <UsageFault_Handler+0x4>

0800274c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr

08002758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr

08002764 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr

08002770 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002774:	f003 f81e 	bl	80057b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002778:	bf00      	nop
 800277a:	bd80      	pop	{r7, pc}

0800277c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002780:	4802      	ldr	r0, [pc, #8]	@ (800278c <ADC1_IRQHandler+0x10>)
 8002782:	f003 fad5 	bl	8005d30 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	200002cc 	.word	0x200002cc

08002790 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

	if(__HAL_GPIO_EXTI_GET_IT(BTN3_Pin) != RESET){ //Get l'interruption
 8002794:	4b0f      	ldr	r3, [pc, #60]	@ (80027d4 <EXTI9_5_IRQHandler+0x44>)
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <EXTI9_5_IRQHandler+0x1c>
	      HAL_GPIO_EXTI_Callback(BTN3_Pin);
 80027a0:	2040      	movs	r0, #64	@ 0x40
 80027a2:	f000 f847 	bl	8002834 <HAL_GPIO_EXTI_Callback>
		  __HAL_GPIO_EXTI_CLEAR_IT(BTN3_Pin); // On relâche l'interruption
 80027a6:	4b0b      	ldr	r3, [pc, #44]	@ (80027d4 <EXTI9_5_IRQHandler+0x44>)
 80027a8:	2240      	movs	r2, #64	@ 0x40
 80027aa:	615a      	str	r2, [r3, #20]
	}

	if(__HAL_GPIO_EXTI_GET_IT(BTN4_Pin) != RESET){
 80027ac:	4b09      	ldr	r3, [pc, #36]	@ (80027d4 <EXTI9_5_IRQHandler+0x44>)
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	f003 0320 	and.w	r3, r3, #32
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <EXTI9_5_IRQHandler+0x34>
	      HAL_GPIO_EXTI_Callback(BTN4_Pin);
 80027b8:	2020      	movs	r0, #32
 80027ba:	f000 f83b 	bl	8002834 <HAL_GPIO_EXTI_Callback>
	      __HAL_GPIO_EXTI_CLEAR_IT(BTN4_Pin);
 80027be:	4b05      	ldr	r3, [pc, #20]	@ (80027d4 <EXTI9_5_IRQHandler+0x44>)
 80027c0:	2220      	movs	r2, #32
 80027c2:	615a      	str	r2, [r3, #20]
	}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN4_Pin);
 80027c4:	2020      	movs	r0, #32
 80027c6:	f004 f9d1 	bl	8006b6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN3_Pin);
 80027ca:	2040      	movs	r0, #64	@ 0x40
 80027cc:	f004 f9ce 	bl	8006b6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40010400 	.word	0x40010400

080027d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if(__HAL_GPIO_EXTI_GET_IT(BTN1_Pin) != RESET){
 80027dc:	4b14      	ldr	r3, [pc, #80]	@ (8002830 <EXTI15_10_IRQHandler+0x58>)
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d007      	beq.n	80027f8 <EXTI15_10_IRQHandler+0x20>
	      HAL_GPIO_EXTI_Callback(BTN1_Pin);
 80027e8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80027ec:	f000 f822 	bl	8002834 <HAL_GPIO_EXTI_Callback>
	      __HAL_GPIO_EXTI_CLEAR_IT(BTN1_Pin);
 80027f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002830 <EXTI15_10_IRQHandler+0x58>)
 80027f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027f6:	615a      	str	r2, [r3, #20]
	}

	if(__HAL_GPIO_EXTI_GET_IT(BTN2_Pin) != RESET){
 80027f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002830 <EXTI15_10_IRQHandler+0x58>)
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d007      	beq.n	8002814 <EXTI15_10_IRQHandler+0x3c>
	      HAL_GPIO_EXTI_Callback(BTN2_Pin);
 8002804:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002808:	f000 f814 	bl	8002834 <HAL_GPIO_EXTI_Callback>
	      __HAL_GPIO_EXTI_CLEAR_IT(BTN2_Pin);
 800280c:	4b08      	ldr	r3, [pc, #32]	@ (8002830 <EXTI15_10_IRQHandler+0x58>)
 800280e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002812:	615a      	str	r2, [r3, #20]
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8002814:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002818:	f004 f9a8 	bl	8006b6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 800281c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002820:	f004 f9a4 	bl	8006b6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002824:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002828:	f004 f9a0 	bl	8006b6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800282c:	bf00      	nop
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40010400 	.word	0x40010400

08002834 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == BTN1_Pin){
 800283e:	88fb      	ldrh	r3, [r7, #6]
 8002840:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002844:	d105      	bne.n	8002852 <HAL_GPIO_EXTI_Callback+0x1e>
		menu_temp();
 8002846:	f7fe ff03 	bl	8001650 <menu_temp>
		flag_temp=1;
 800284a:	4b10      	ldr	r3, [pc, #64]	@ (800288c <HAL_GPIO_EXTI_Callback+0x58>)
 800284c:	2201      	movs	r2, #1
 800284e:	701a      	strb	r2, [r3, #0]
		//display_pression();
	}else if(GPIO_Pin == BTN4_Pin){

		menu();
	}
}
 8002850:	e017      	b.n	8002882 <HAL_GPIO_EXTI_Callback+0x4e>
	}else if(GPIO_Pin == BTN2_Pin){
 8002852:	88fb      	ldrh	r3, [r7, #6]
 8002854:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002858:	d105      	bne.n	8002866 <HAL_GPIO_EXTI_Callback+0x32>
		menu_hum();
 800285a:	f7fe ff17 	bl	800168c <menu_hum>
		flag_hum=1;
 800285e:	4b0c      	ldr	r3, [pc, #48]	@ (8002890 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002860:	2201      	movs	r2, #1
 8002862:	701a      	strb	r2, [r3, #0]
}
 8002864:	e00d      	b.n	8002882 <HAL_GPIO_EXTI_Callback+0x4e>
	}else if(GPIO_Pin == BTN3_Pin){
 8002866:	88fb      	ldrh	r3, [r7, #6]
 8002868:	2b40      	cmp	r3, #64	@ 0x40
 800286a:	d105      	bne.n	8002878 <HAL_GPIO_EXTI_Callback+0x44>
		menu_pres();
 800286c:	f7fe ff2c 	bl	80016c8 <menu_pres>
		flag_pres=1;
 8002870:	4b08      	ldr	r3, [pc, #32]	@ (8002894 <HAL_GPIO_EXTI_Callback+0x60>)
 8002872:	2201      	movs	r2, #1
 8002874:	701a      	strb	r2, [r3, #0]
}
 8002876:	e004      	b.n	8002882 <HAL_GPIO_EXTI_Callback+0x4e>
	}else if(GPIO_Pin == BTN4_Pin){
 8002878:	88fb      	ldrh	r3, [r7, #6]
 800287a:	2b20      	cmp	r3, #32
 800287c:	d101      	bne.n	8002882 <HAL_GPIO_EXTI_Callback+0x4e>
		menu();
 800287e:	f7ff f8a7 	bl	80019d0 <menu>
}
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000414 	.word	0x20000414
 8002890:	20000415 	.word	0x20000415
 8002894:	20000416 	.word	0x20000416

08002898 <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc){
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]

	printf("bien rentrer dans l'IT\r\n");
 80028a0:	4809      	ldr	r0, [pc, #36]	@ (80028c8 <HAL_ADC_LevelOutOfWindowCallback+0x30>)
 80028a2:	f008 f8f5 	bl	800aa90 <puts>
	motor(!motorstate);
 80028a6:	4b09      	ldr	r3, [pc, #36]	@ (80028cc <HAL_ADC_LevelOutOfWindowCallback+0x34>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	bf0c      	ite	eq
 80028ae:	2301      	moveq	r3, #1
 80028b0:	2300      	movne	r3, #0
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fe fe63 	bl	8001580 <motor>
	//TIM3->CCR1=1000;
	adcFunction();
 80028ba:	f7ff f8c5 	bl	8001a48 <adcFunction>

}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	0800dbf8 	.word	0x0800dbf8
 80028cc:	20000417 	.word	0x20000417

080028d0 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80028d6:	2300      	movs	r3, #0
 80028d8:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80028da:	4b13      	ldr	r3, [pc, #76]	@ (8002928 <BSP_I2C1_Init+0x58>)
 80028dc:	4a13      	ldr	r2, [pc, #76]	@ (800292c <BSP_I2C1_Init+0x5c>)
 80028de:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80028e0:	4b13      	ldr	r3, [pc, #76]	@ (8002930 <BSP_I2C1_Init+0x60>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	1c5a      	adds	r2, r3, #1
 80028e6:	4912      	ldr	r1, [pc, #72]	@ (8002930 <BSP_I2C1_Init+0x60>)
 80028e8:	600a      	str	r2, [r1, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d117      	bne.n	800291e <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80028ee:	480e      	ldr	r0, [pc, #56]	@ (8002928 <BSP_I2C1_Init+0x58>)
 80028f0:	f004 fdfa 	bl	80074e8 <HAL_I2C_GetState>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d111      	bne.n	800291e <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80028fa:	480b      	ldr	r0, [pc, #44]	@ (8002928 <BSP_I2C1_Init+0x58>)
 80028fc:	f000 f8e2 	bl	8002ac4 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10b      	bne.n	800291e <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8002906:	4808      	ldr	r0, [pc, #32]	@ (8002928 <BSP_I2C1_Init+0x58>)
 8002908:	f000 f8a8 	bl	8002a5c <MX_I2C1_Init>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002912:	f06f 0307 	mvn.w	r3, #7
 8002916:	607b      	str	r3, [r7, #4]
 8002918:	e001      	b.n	800291e <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 800291a:	2300      	movs	r3, #0
 800291c:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 800291e:	687b      	ldr	r3, [r7, #4]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	20000418 	.word	0x20000418
 800292c:	40005400 	.word	0x40005400
 8002930:	2000046c 	.word	0x2000046c

08002934 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800293a:	2300      	movs	r3, #0
 800293c:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800293e:	4b0f      	ldr	r3, [pc, #60]	@ (800297c <BSP_I2C1_DeInit+0x48>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d014      	beq.n	8002970 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8002946:	4b0d      	ldr	r3, [pc, #52]	@ (800297c <BSP_I2C1_DeInit+0x48>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	3b01      	subs	r3, #1
 800294c:	4a0b      	ldr	r2, [pc, #44]	@ (800297c <BSP_I2C1_DeInit+0x48>)
 800294e:	6013      	str	r3, [r2, #0]
 8002950:	4b0a      	ldr	r3, [pc, #40]	@ (800297c <BSP_I2C1_DeInit+0x48>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10b      	bne.n	8002970 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8002958:	4809      	ldr	r0, [pc, #36]	@ (8002980 <BSP_I2C1_DeInit+0x4c>)
 800295a:	f000 f8f9 	bl	8002b50 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800295e:	4808      	ldr	r0, [pc, #32]	@ (8002980 <BSP_I2C1_DeInit+0x4c>)
 8002960:	f004 fa60 	bl	8006e24 <HAL_I2C_DeInit>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d002      	beq.n	8002970 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800296a:	f06f 0307 	mvn.w	r3, #7
 800296e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002970:	687b      	ldr	r3, [r7, #4]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	2000046c 	.word	0x2000046c
 8002980:	20000418 	.word	0x20000418

08002984 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b08a      	sub	sp, #40	@ 0x28
 8002988:	af04      	add	r7, sp, #16
 800298a:	60ba      	str	r2, [r7, #8]
 800298c:	461a      	mov	r2, r3
 800298e:	4603      	mov	r3, r0
 8002990:	81fb      	strh	r3, [r7, #14]
 8002992:	460b      	mov	r3, r1
 8002994:	81bb      	strh	r3, [r7, #12]
 8002996:	4613      	mov	r3, r2
 8002998:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800299e:	89ba      	ldrh	r2, [r7, #12]
 80029a0:	89f9      	ldrh	r1, [r7, #14]
 80029a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029a6:	9302      	str	r3, [sp, #8]
 80029a8:	88fb      	ldrh	r3, [r7, #6]
 80029aa:	9301      	str	r3, [sp, #4]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	2301      	movs	r3, #1
 80029b2:	480c      	ldr	r0, [pc, #48]	@ (80029e4 <BSP_I2C1_WriteReg+0x60>)
 80029b4:	f004 fa78 	bl	8006ea8 <HAL_I2C_Mem_Write>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00c      	beq.n	80029d8 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80029be:	4809      	ldr	r0, [pc, #36]	@ (80029e4 <BSP_I2C1_WriteReg+0x60>)
 80029c0:	f004 fd9f 	bl	8007502 <HAL_I2C_GetError>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d103      	bne.n	80029d2 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80029ca:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	e002      	b.n	80029d8 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80029d2:	f06f 0303 	mvn.w	r3, #3
 80029d6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80029d8:	697b      	ldr	r3, [r7, #20]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20000418 	.word	0x20000418

080029e8 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08a      	sub	sp, #40	@ 0x28
 80029ec:	af04      	add	r7, sp, #16
 80029ee:	60ba      	str	r2, [r7, #8]
 80029f0:	461a      	mov	r2, r3
 80029f2:	4603      	mov	r3, r0
 80029f4:	81fb      	strh	r3, [r7, #14]
 80029f6:	460b      	mov	r3, r1
 80029f8:	81bb      	strh	r3, [r7, #12]
 80029fa:	4613      	mov	r3, r2
 80029fc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002a02:	89ba      	ldrh	r2, [r7, #12]
 8002a04:	89f9      	ldrh	r1, [r7, #14]
 8002a06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a0a:	9302      	str	r3, [sp, #8]
 8002a0c:	88fb      	ldrh	r3, [r7, #6]
 8002a0e:	9301      	str	r3, [sp, #4]
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	2301      	movs	r3, #1
 8002a16:	480c      	ldr	r0, [pc, #48]	@ (8002a48 <BSP_I2C1_ReadReg+0x60>)
 8002a18:	f004 fb40 	bl	800709c <HAL_I2C_Mem_Read>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00c      	beq.n	8002a3c <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002a22:	4809      	ldr	r0, [pc, #36]	@ (8002a48 <BSP_I2C1_ReadReg+0x60>)
 8002a24:	f004 fd6d 	bl	8007502 <HAL_I2C_GetError>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	d103      	bne.n	8002a36 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002a2e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	e002      	b.n	8002a3c <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002a36:	f06f 0303 	mvn.w	r3, #3
 8002a3a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002a3c:	697b      	ldr	r3, [r7, #20]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000418 	.word	0x20000418

08002a4c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002a50:	f002 fec2 	bl	80057d8 <HAL_GetTick>
 8002a54:	4603      	mov	r3, r0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a14      	ldr	r2, [pc, #80]	@ (8002abc <MX_I2C1_Init+0x60>)
 8002a6c:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a13      	ldr	r2, [pc, #76]	@ (8002ac0 <MX_I2C1_Init+0x64>)
 8002a72:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a86:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f004 f87b 	bl	8006b9c <HAL_I2C_Init>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40005400 	.word	0x40005400
 8002ac0:	00061a80 	.word	0x00061a80

08002ac4 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08a      	sub	sp, #40	@ 0x28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002acc:	4b1e      	ldr	r3, [pc, #120]	@ (8002b48 <I2C1_MspInit+0x84>)
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8002b48 <I2C1_MspInit+0x84>)
 8002ad2:	f043 0302 	orr.w	r3, r3, #2
 8002ad6:	61d3      	str	r3, [r2, #28]
 8002ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b48 <I2C1_MspInit+0x84>)
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8002ae4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002aea:	2312      	movs	r3, #18
 8002aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af2:	2303      	movs	r3, #3
 8002af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8002af6:	2304      	movs	r3, #4
 8002af8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002afa:	f107 0314 	add.w	r3, r7, #20
 8002afe:	4619      	mov	r1, r3
 8002b00:	4812      	ldr	r0, [pc, #72]	@ (8002b4c <I2C1_MspInit+0x88>)
 8002b02:	f003 fd9b 	bl	800663c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8002b06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b0c:	2312      	movs	r3, #18
 8002b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b14:	2303      	movs	r3, #3
 8002b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8002b18:	2304      	movs	r3, #4
 8002b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002b1c:	f107 0314 	add.w	r3, r7, #20
 8002b20:	4619      	mov	r1, r3
 8002b22:	480a      	ldr	r0, [pc, #40]	@ (8002b4c <I2C1_MspInit+0x88>)
 8002b24:	f003 fd8a 	bl	800663c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b28:	4b07      	ldr	r3, [pc, #28]	@ (8002b48 <I2C1_MspInit+0x84>)
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2c:	4a06      	ldr	r2, [pc, #24]	@ (8002b48 <I2C1_MspInit+0x84>)
 8002b2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b32:	6253      	str	r3, [r2, #36]	@ 0x24
 8002b34:	4b04      	ldr	r3, [pc, #16]	@ (8002b48 <I2C1_MspInit+0x84>)
 8002b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8002b40:	bf00      	nop
 8002b42:	3728      	adds	r7, #40	@ 0x28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	40020400 	.word	0x40020400

08002b50 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002b58:	4b09      	ldr	r3, [pc, #36]	@ (8002b80 <I2C1_MspDeInit+0x30>)
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5c:	4a08      	ldr	r2, [pc, #32]	@ (8002b80 <I2C1_MspDeInit+0x30>)
 8002b5e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b62:	6253      	str	r3, [r2, #36]	@ 0x24

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8002b64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b68:	4806      	ldr	r0, [pc, #24]	@ (8002b84 <I2C1_MspDeInit+0x34>)
 8002b6a:	f003 fef7 	bl	800695c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8002b6e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002b72:	4804      	ldr	r0, [pc, #16]	@ (8002b84 <I2C1_MspDeInit+0x34>)
 8002b74:	f003 fef2 	bl	800695c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8002b78:	bf00      	nop
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40020400 	.word	0x40020400

08002b88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  return 1;
 8002b8c:	2301      	movs	r3, #1
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr

08002b96 <_kill>:

int _kill(int pid, int sig)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ba0:	f008 f8c8 	bl	800ad34 <__errno>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2216      	movs	r2, #22
 8002ba8:	601a      	str	r2, [r3, #0]
  return -1;
 8002baa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <_exit>:

void _exit (int status)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b082      	sub	sp, #8
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bbe:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7ff ffe7 	bl	8002b96 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bc8:	bf00      	nop
 8002bca:	e7fd      	b.n	8002bc8 <_exit+0x12>

08002bcc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	e00a      	b.n	8002bf4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bde:	f3af 8000 	nop.w
 8002be2:	4601      	mov	r1, r0
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	1c5a      	adds	r2, r3, #1
 8002be8:	60ba      	str	r2, [r7, #8]
 8002bea:	b2ca      	uxtb	r2, r1
 8002bec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	dbf0      	blt.n	8002bde <_read+0x12>
  }

  return len;
 8002bfc:	687b      	ldr	r3, [r7, #4]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3718      	adds	r7, #24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b086      	sub	sp, #24
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	60f8      	str	r0, [r7, #12]
 8002c0e:	60b9      	str	r1, [r7, #8]
 8002c10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c12:	2300      	movs	r3, #0
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	e009      	b.n	8002c2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	60ba      	str	r2, [r7, #8]
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff fb19 	bl	8002258 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	dbf1      	blt.n	8002c18 <_write+0x12>
  }
  return len;
 8002c34:	687b      	ldr	r3, [r7, #4]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <_close>:

int _close(int file)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr

08002c54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c64:	605a      	str	r2, [r3, #4]
  return 0;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr

08002c72 <_isatty>:

int _isatty(int file)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c7a:	2301      	movs	r3, #1
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr

08002c86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b085      	sub	sp, #20
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	60f8      	str	r0, [r7, #12]
 8002c8e:	60b9      	str	r1, [r7, #8]
 8002c90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr
	...

08002ca0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ca8:	4a14      	ldr	r2, [pc, #80]	@ (8002cfc <_sbrk+0x5c>)
 8002caa:	4b15      	ldr	r3, [pc, #84]	@ (8002d00 <_sbrk+0x60>)
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cb4:	4b13      	ldr	r3, [pc, #76]	@ (8002d04 <_sbrk+0x64>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d102      	bne.n	8002cc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cbc:	4b11      	ldr	r3, [pc, #68]	@ (8002d04 <_sbrk+0x64>)
 8002cbe:	4a12      	ldr	r2, [pc, #72]	@ (8002d08 <_sbrk+0x68>)
 8002cc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cc2:	4b10      	ldr	r3, [pc, #64]	@ (8002d04 <_sbrk+0x64>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4413      	add	r3, r2
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d207      	bcs.n	8002ce0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cd0:	f008 f830 	bl	800ad34 <__errno>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	220c      	movs	r2, #12
 8002cd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cda:	f04f 33ff 	mov.w	r3, #4294967295
 8002cde:	e009      	b.n	8002cf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ce0:	4b08      	ldr	r3, [pc, #32]	@ (8002d04 <_sbrk+0x64>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ce6:	4b07      	ldr	r3, [pc, #28]	@ (8002d04 <_sbrk+0x64>)
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4413      	add	r3, r2
 8002cee:	4a05      	ldr	r2, [pc, #20]	@ (8002d04 <_sbrk+0x64>)
 8002cf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	20014000 	.word	0x20014000
 8002d00:	00000400 	.word	0x00000400
 8002d04:	20000470 	.word	0x20000470
 8002d08:	200006b8 	.word	0x200006b8

08002d0c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d18:	f7ff fff8 	bl	8002d0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d1c:	480b      	ldr	r0, [pc, #44]	@ (8002d4c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002d1e:	490c      	ldr	r1, [pc, #48]	@ (8002d50 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002d20:	4a0c      	ldr	r2, [pc, #48]	@ (8002d54 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d24:	e002      	b.n	8002d2c <LoopCopyDataInit>

08002d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d2a:	3304      	adds	r3, #4

08002d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d30:	d3f9      	bcc.n	8002d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d32:	4a09      	ldr	r2, [pc, #36]	@ (8002d58 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002d34:	4c09      	ldr	r4, [pc, #36]	@ (8002d5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d38:	e001      	b.n	8002d3e <LoopFillZerobss>

08002d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d3c:	3204      	adds	r2, #4

08002d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d40:	d3fb      	bcc.n	8002d3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d42:	f007 fffd 	bl	800ad40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d46:	f7fe ffe3 	bl	8001d10 <main>
  bx lr
 8002d4a:	4770      	bx	lr
  ldr r0, =_sdata
 8002d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d50:	200002b0 	.word	0x200002b0
  ldr r2, =_sidata
 8002d54:	0800e020 	.word	0x0800e020
  ldr r2, =_sbss
 8002d58:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 8002d5c:	200006b8 	.word	0x200006b8

08002d60 <COMP_ACQ_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d60:	e7fe      	b.n	8002d60 <COMP_ACQ_IRQHandler>
	...

08002d64 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d103      	bne.n	8002d7c <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8002d74:	f04f 33ff 	mov.w	r3, #4294967295
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	e034      	b.n	8002de6 <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	7b1a      	ldrb	r2, [r3, #12]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	695a      	ldr	r2, [r3, #20]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	699a      	ldr	r2, [r3, #24]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a0e      	ldr	r2, [pc, #56]	@ (8002df0 <HTS221_RegisterBusIO+0x8c>)
 8002db8:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8002df4 <HTS221_RegisterBusIO+0x90>)
 8002dbe:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	69da      	ldr	r2, [r3, #28]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d004      	beq.n	8002de0 <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4798      	blx	r3
 8002ddc:	60f8      	str	r0, [r7, #12]
 8002dde:	e002      	b.n	8002de6 <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 8002de0:	f04f 33ff 	mov.w	r3, #4294967295
 8002de4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002de6:	68fb      	ldr	r3, [r7, #12]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	0800342d 	.word	0x0800342d
 8002df4:	0800348f 	.word	0x0800348f

08002df8 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d108      	bne.n	8002e1c <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 fa9e 	bl	800334c <HTS221_Initialize>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d002      	beq.n	8002e1c <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8002e16:	f04f 33ff 	mov.w	r3, #4294967295
 8002e1a:	e004      	b.n	8002e26 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HTS221_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d111      	bne.n	8002e64 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f87e 	bl	8002f42 <HTS221_HUM_Disable>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8002e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e50:	e00d      	b.n	8002e6e <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f95f 	bl	8003116 <HTS221_TEMP_Disable>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8002e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e62:	e004      	b.n	8002e6e <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HTS221_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b082      	sub	sp, #8
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3320      	adds	r3, #32
 8002e84:	6839      	ldr	r1, [r7, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fc2a 	bl	80036e0 <hts221_device_id_get>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8002e92:	f04f 33ff 	mov.w	r3, #4294967295
 8002e96:	e000      	b.n	8002e9a <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 12.5f;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	4a09      	ldr	r2, [pc, #36]	@ (8002ef4 <HTS221_GetCapabilities+0x50>)
 8002ed0:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 12.5f;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	4a07      	ldr	r2, [pc, #28]	@ (8002ef4 <HTS221_GetCapabilities+0x50>)
 8002ed6:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	615a      	str	r2, [r3, #20]
  return HTS221_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr
 8002ef4:	41480000 	.word	0x41480000

08002ef8 <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	e015      	b.n	8002f3a <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10b      	bne.n	8002f30 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3320      	adds	r3, #32
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fbef 	bl	8003702 <hts221_power_on_set>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d002      	beq.n	8002f30 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8002f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f2e:	e004      	b.n	8002f3a <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return HTS221_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b082      	sub	sp, #8
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8002f54:	2300      	movs	r3, #0
 8002f56:	e015      	b.n	8002f84 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10b      	bne.n	8002f7a <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3320      	adds	r3, #32
 8002f66:	2100      	movs	r1, #0
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 fbca 	bl	8003702 <hts221_power_on_set>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d002      	beq.n	8002f7a <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8002f74:	f04f 33ff 	mov.w	r3, #4294967295
 8002f78:	e004      	b.n	8002f84 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return HTS221_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8002f96:	6839      	ldr	r1, [r7, #0]
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 f965 	bl	8003268 <HTS221_GetOutputDataRate>
 8002f9e:	4603      	mov	r3, r0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8002fb2:	6839      	ldr	r1, [r7, #0]
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f99b 	bl	80032f0 <HTS221_SetOutputDataRate>
 8002fba:	4603      	mov	r3, r0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b088      	sub	sp, #32
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	3320      	adds	r3, #32
 8002fd2:	f107 020c 	add.w	r2, r7, #12
 8002fd6:	4611      	mov	r1, r2
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 fc5e 	bl	800389a <hts221_hum_adc_point_0_get>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8002fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe8:	e069      	b.n	80030be <HTS221_HUM_GetHumidity+0xfa>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f103 0220 	add.w	r2, r3, #32
 8002ff0:	f107 030c 	add.w	r3, r7, #12
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	f000 fba8 	bl	800374e <hts221_hum_rh_point_0_get>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8003004:	f04f 33ff 	mov.w	r3, #4294967295
 8003008:	e059      	b.n	80030be <HTS221_HUM_GetHumidity+0xfa>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f103 0220 	add.w	r2, r3, #32
 8003010:	f107 030c 	add.w	r3, r7, #12
 8003014:	3308      	adds	r3, #8
 8003016:	4619      	mov	r1, r3
 8003018:	4610      	mov	r0, r2
 800301a:	f000 fc5f 	bl	80038dc <hts221_hum_adc_point_1_get>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d002      	beq.n	800302a <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8003024:	f04f 33ff 	mov.w	r3, #4294967295
 8003028:	e049      	b.n	80030be <HTS221_HUM_GetHumidity+0xfa>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f103 0220 	add.w	r2, r3, #32
 8003030:	f107 030c 	add.w	r3, r7, #12
 8003034:	330c      	adds	r3, #12
 8003036:	4619      	mov	r1, r3
 8003038:	4610      	mov	r0, r2
 800303a:	f000 fba8 	bl	800378e <hts221_hum_rh_point_1_get>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d002      	beq.n	800304a <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8003044:	f04f 33ff 	mov.w	r3, #4294967295
 8003048:	e039      	b.n	80030be <HTS221_HUM_GetHumidity+0xfa>
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
 800304a:	2300      	movs	r3, #0
 800304c:	83bb      	strh	r3, [r7, #28]
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3320      	adds	r3, #32
 8003052:	f107 021c 	add.w	r2, r7, #28
 8003056:	4611      	mov	r1, r2
 8003058:	4618      	mov	r0, r3
 800305a:	f000 fafd 	bl	8003658 <hts221_humidity_raw_get>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d002      	beq.n	800306a <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8003064:	f04f 33ff 	mov.w	r3, #4294967295
 8003068:	e029      	b.n	80030be <HTS221_HUM_GetHumidity+0xfa>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 800306a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800306e:	4618      	mov	r0, r3
 8003070:	f7fd fe2c 	bl	8000ccc <__aeabi_i2f>
 8003074:	4602      	mov	r2, r0
 8003076:	f107 030c 	add.w	r3, r7, #12
 800307a:	4611      	mov	r1, r2
 800307c:	4618      	mov	r0, r3
 800307e:	f000 f991 	bl	80033a4 <Linear_Interpolation>
 8003082:	4602      	mov	r2, r0
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	601a      	str	r2, [r3, #0]

  if (*Value < 0.0f)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f04f 0100 	mov.w	r1, #0
 8003090:	4618      	mov	r0, r3
 8003092:	f7fe f80d 	bl	80010b0 <__aeabi_fcmplt>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HTS221_HUM_GetHumidity+0xe0>
  {
    *Value = 0.0f;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4907      	ldr	r1, [pc, #28]	@ (80030c8 <HTS221_HUM_GetHumidity+0x104>)
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fe f81e 	bl	80010ec <__aeabi_fcmpgt>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <HTS221_HUM_GetHumidity+0xf8>
  {
    *Value = 100.0f;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	4a03      	ldr	r2, [pc, #12]	@ (80030c8 <HTS221_HUM_GetHumidity+0x104>)
 80030ba:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3720      	adds	r7, #32
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	42c80000 	.word	0x42c80000

080030cc <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d101      	bne.n	80030e2 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	e015      	b.n	800310e <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10b      	bne.n	8003104 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3320      	adds	r3, #32
 80030f0:	2101      	movs	r1, #1
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 fb05 	bl	8003702 <hts221_power_on_set>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 80030fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003102:	e004      	b.n	800310e <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return HTS221_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8003128:	2300      	movs	r3, #0
 800312a:	e015      	b.n	8003158 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10b      	bne.n	800314e <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3320      	adds	r3, #32
 800313a:	2100      	movs	r1, #0
 800313c:	4618      	mov	r0, r3
 800313e:	f000 fae0 	bl	8003702 <hts221_power_on_set>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8003148:	f04f 33ff 	mov.w	r3, #4294967295
 800314c:	e004      	b.n	8003158 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return HTS221_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 800316a:	6839      	ldr	r1, [r7, #0]
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f87b 	bl	8003268 <HTS221_GetOutputDataRate>
 8003172:	4603      	mov	r3, r0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8003186:	6839      	ldr	r1, [r7, #0]
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f8b1 	bl	80032f0 <HTS221_SetOutputDataRate>
 800318e:	4603      	mov	r3, r0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b088      	sub	sp, #32
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3320      	adds	r3, #32
 80031a6:	f107 020c 	add.w	r2, r7, #12
 80031aa:	4611      	mov	r1, r2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 fbb6 	bl	800391e <hts221_temp_adc_point_0_get>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d002      	beq.n	80031be <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 80031b8:	f04f 33ff 	mov.w	r3, #4294967295
 80031bc:	e04f      	b.n	800325e <HTS221_TEMP_GetTemperature+0xc6>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f103 0220 	add.w	r2, r3, #32
 80031c4:	f107 030c 	add.w	r3, r7, #12
 80031c8:	3304      	adds	r3, #4
 80031ca:	4619      	mov	r1, r3
 80031cc:	4610      	mov	r0, r2
 80031ce:	f000 fafe 	bl	80037ce <hts221_temp_deg_point_0_get>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 80031d8:	f04f 33ff 	mov.w	r3, #4294967295
 80031dc:	e03f      	b.n	800325e <HTS221_TEMP_GetTemperature+0xc6>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f103 0220 	add.w	r2, r3, #32
 80031e4:	f107 030c 	add.w	r3, r7, #12
 80031e8:	3308      	adds	r3, #8
 80031ea:	4619      	mov	r1, r3
 80031ec:	4610      	mov	r0, r2
 80031ee:	f000 fbb7 	bl	8003960 <hts221_temp_adc_point_1_get>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d002      	beq.n	80031fe <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 80031f8:	f04f 33ff 	mov.w	r3, #4294967295
 80031fc:	e02f      	b.n	800325e <HTS221_TEMP_GetTemperature+0xc6>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f103 0220 	add.w	r2, r3, #32
 8003204:	f107 030c 	add.w	r3, r7, #12
 8003208:	330c      	adds	r3, #12
 800320a:	4619      	mov	r1, r3
 800320c:	4610      	mov	r0, r2
 800320e:	f000 fb11 	bl	8003834 <hts221_temp_deg_point_1_get>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d002      	beq.n	800321e <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8003218:	f04f 33ff 	mov.w	r3, #4294967295
 800321c:	e01f      	b.n	800325e <HTS221_TEMP_GetTemperature+0xc6>
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
 800321e:	2300      	movs	r3, #0
 8003220:	83bb      	strh	r3, [r7, #28]
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3320      	adds	r3, #32
 8003226:	f107 021c 	add.w	r2, r7, #28
 800322a:	4611      	mov	r1, r2
 800322c:	4618      	mov	r0, r3
 800322e:	f000 fa35 	bl	800369c <hts221_temperature_raw_get>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8003238:	f04f 33ff 	mov.w	r3, #4294967295
 800323c:	e00f      	b.n	800325e <HTS221_TEMP_GetTemperature+0xc6>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 800323e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003242:	4618      	mov	r0, r3
 8003244:	f7fd fd42 	bl	8000ccc <__aeabi_i2f>
 8003248:	4602      	mov	r2, r0
 800324a:	f107 030c 	add.w	r3, r7, #12
 800324e:	4611      	mov	r1, r2
 8003250:	4618      	mov	r0, r3
 8003252:	f000 f8a7 	bl	80033a4 <Linear_Interpolation>
 8003256:	4602      	mov	r2, r0
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	601a      	str	r2, [r3, #0]

  return HTS221_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3720      	adds	r7, #32
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
	...

08003268 <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3320      	adds	r3, #32
 800327a:	f107 020b 	add.w	r2, r7, #11
 800327e:	4611      	mov	r1, r2
 8003280:	4618      	mov	r0, r3
 8003282:	f000 f98b 	bl	800359c <hts221_data_rate_get>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d002      	beq.n	8003292 <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 800328c:	f04f 33ff 	mov.w	r3, #4294967295
 8003290:	e025      	b.n	80032de <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 8003292:	7afb      	ldrb	r3, [r7, #11]
 8003294:	2b03      	cmp	r3, #3
 8003296:	d81d      	bhi.n	80032d4 <HTS221_GetOutputDataRate+0x6c>
 8003298:	a201      	add	r2, pc, #4	@ (adr r2, 80032a0 <HTS221_GetOutputDataRate+0x38>)
 800329a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329e:	bf00      	nop
 80032a0:	080032b1 	.word	0x080032b1
 80032a4:	080032bb 	.word	0x080032bb
 80032a8:	080032c5 	.word	0x080032c5
 80032ac:	080032cd 	.word	0x080032cd
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
      break;
 80032b8:	e010      	b.n	80032dc <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80032c0:	601a      	str	r2, [r3, #0]
      break;
 80032c2:	e00b      	b.n	80032dc <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	4a08      	ldr	r2, [pc, #32]	@ (80032e8 <HTS221_GetOutputDataRate+0x80>)
 80032c8:	601a      	str	r2, [r3, #0]
      break;
 80032ca:	e007      	b.n	80032dc <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	4a07      	ldr	r2, [pc, #28]	@ (80032ec <HTS221_GetOutputDataRate+0x84>)
 80032d0:	601a      	str	r2, [r3, #0]
      break;
 80032d2:	e003      	b.n	80032dc <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 80032d4:	f04f 33ff 	mov.w	r3, #4294967295
 80032d8:	60fb      	str	r3, [r7, #12]
      break;
 80032da:	bf00      	nop
  }

  return ret;
 80032dc:	68fb      	ldr	r3, [r7, #12]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40e00000 	.word	0x40e00000
 80032ec:	41480000 	.word	0x41480000

080032f0 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 80032fa:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80032fe:	6838      	ldr	r0, [r7, #0]
 8003300:	f7fd fee0 	bl	80010c4 <__aeabi_fcmple>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HTS221_SetOutputDataRate+0x1e>
 800330a:	2301      	movs	r3, #1
 800330c:	e009      	b.n	8003322 <HTS221_SetOutputDataRate+0x32>
 800330e:	490e      	ldr	r1, [pc, #56]	@ (8003348 <HTS221_SetOutputDataRate+0x58>)
 8003310:	6838      	ldr	r0, [r7, #0]
 8003312:	f7fd fed7 	bl	80010c4 <__aeabi_fcmple>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HTS221_SetOutputDataRate+0x30>
 800331c:	2302      	movs	r3, #2
 800331e:	e000      	b.n	8003322 <HTS221_SetOutputDataRate+0x32>
 8003320:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8003322:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3320      	adds	r3, #32
 8003328:	7bfa      	ldrb	r2, [r7, #15]
 800332a:	4611      	mov	r1, r2
 800332c:	4618      	mov	r0, r3
 800332e:	f000 f90f 	bl	8003550 <hts221_data_rate_set>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <HTS221_SetOutputDataRate+0x4e>
  {
    return HTS221_ERROR;
 8003338:	f04f 33ff 	mov.w	r3, #4294967295
 800333c:	e000      	b.n	8003340 <HTS221_SetOutputDataRate+0x50>
  }

  return HTS221_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40e00000 	.word	0x40e00000

0800334c <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3320      	adds	r3, #32
 8003358:	2100      	movs	r1, #0
 800335a:	4618      	mov	r0, r3
 800335c:	f000 f9d1 	bl	8003702 <hts221_power_on_set>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d002      	beq.n	800336c <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8003366:	f04f 33ff 	mov.w	r3, #4294967295
 800336a:	e017      	b.n	800339c <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3320      	adds	r3, #32
 8003370:	2101      	movs	r1, #1
 8003372:	4618      	mov	r0, r3
 8003374:	f000 f94a 	bl	800360c <hts221_block_data_update_set>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d002      	beq.n	8003384 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 800337e:	f04f 33ff 	mov.w	r3, #4294967295
 8003382:	e00b      	b.n	800339c <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8003384:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7ff ffb1 	bl	80032f0 <HTS221_SetOutputDataRate>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8003394:	f04f 33ff 	mov.w	r3, #4294967295
 8003398:	e000      	b.n	800339c <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 80033a4:	b5b0      	push	{r4, r5, r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	4619      	mov	r1, r3
 80033b8:	4610      	mov	r0, r2
 80033ba:	f7fd fbd1 	bl	8000b60 <__aeabi_fsub>
 80033be:	4603      	mov	r3, r0
 80033c0:	6839      	ldr	r1, [r7, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fd fcd6 	bl	8000d74 <__aeabi_fmul>
 80033c8:	4603      	mov	r3, r0
 80033ca:	461c      	mov	r4, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	4619      	mov	r1, r3
 80033d6:	4610      	mov	r0, r2
 80033d8:	f7fd fccc 	bl	8000d74 <__aeabi_fmul>
 80033dc:	4603      	mov	r3, r0
 80033de:	461d      	mov	r5, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	4619      	mov	r1, r3
 80033ea:	4610      	mov	r0, r2
 80033ec:	f7fd fcc2 	bl	8000d74 <__aeabi_fmul>
 80033f0:	4603      	mov	r3, r0
 80033f2:	4619      	mov	r1, r3
 80033f4:	4628      	mov	r0, r5
 80033f6:	f7fd fbb3 	bl	8000b60 <__aeabi_fsub>
 80033fa:	4603      	mov	r3, r0
 80033fc:	4619      	mov	r1, r3
 80033fe:	4620      	mov	r0, r4
 8003400:	f7fd fbb0 	bl	8000b64 <__addsf3>
 8003404:	4603      	mov	r3, r0
 8003406:	461c      	mov	r4, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4619      	mov	r1, r3
 8003412:	4610      	mov	r0, r2
 8003414:	f7fd fba4 	bl	8000b60 <__aeabi_fsub>
 8003418:	4603      	mov	r3, r0
 800341a:	4619      	mov	r1, r3
 800341c:	4620      	mov	r0, r4
 800341e:	f7fd fd5d 	bl	8000edc <__aeabi_fdiv>
 8003422:	4603      	mov	r3, r0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bdb0      	pop	{r4, r5, r7, pc}

0800342c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800342c:	b590      	push	{r4, r7, lr}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	607a      	str	r2, [r7, #4]
 8003436:	461a      	mov	r2, r3
 8003438:	460b      	mov	r3, r1
 800343a:	72fb      	strb	r3, [r7, #11]
 800343c:	4613      	mov	r3, r2
 800343e:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10e      	bne.n	800346a <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	695c      	ldr	r4, [r3, #20]
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	7b1b      	ldrb	r3, [r3, #12]
 8003454:	4618      	mov	r0, r3
 8003456:	7afb      	ldrb	r3, [r7, #11]
 8003458:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800345c:	b2db      	uxtb	r3, r3
 800345e:	4619      	mov	r1, r3
 8003460:	893b      	ldrh	r3, [r7, #8]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	47a0      	blx	r4
 8003466:	4603      	mov	r3, r0
 8003468:	e00d      	b.n	8003486 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	695c      	ldr	r4, [r3, #20]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	7b1b      	ldrb	r3, [r3, #12]
 8003472:	4618      	mov	r0, r3
 8003474:	7afb      	ldrb	r3, [r7, #11]
 8003476:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800347a:	b2db      	uxtb	r3, r3
 800347c:	4619      	mov	r1, r3
 800347e:	893b      	ldrh	r3, [r7, #8]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	47a0      	blx	r4
 8003484:	4603      	mov	r3, r0
  }
}
 8003486:	4618      	mov	r0, r3
 8003488:	371c      	adds	r7, #28
 800348a:	46bd      	mov	sp, r7
 800348c:	bd90      	pop	{r4, r7, pc}

0800348e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800348e:	b590      	push	{r4, r7, lr}
 8003490:	b087      	sub	sp, #28
 8003492:	af00      	add	r7, sp, #0
 8003494:	60f8      	str	r0, [r7, #12]
 8003496:	607a      	str	r2, [r7, #4]
 8003498:	461a      	mov	r2, r3
 800349a:	460b      	mov	r3, r1
 800349c:	72fb      	strb	r3, [r7, #11]
 800349e:	4613      	mov	r3, r2
 80034a0:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10e      	bne.n	80034cc <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	691c      	ldr	r4, [r3, #16]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	7b1b      	ldrb	r3, [r3, #12]
 80034b6:	4618      	mov	r0, r3
 80034b8:	7afb      	ldrb	r3, [r7, #11]
 80034ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	4619      	mov	r1, r3
 80034c2:	893b      	ldrh	r3, [r7, #8]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	47a0      	blx	r4
 80034c8:	4603      	mov	r3, r0
 80034ca:	e00d      	b.n	80034e8 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	691c      	ldr	r4, [r3, #16]
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	7b1b      	ldrb	r3, [r3, #12]
 80034d4:	4618      	mov	r0, r3
 80034d6:	7afb      	ldrb	r3, [r7, #11]
 80034d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	4619      	mov	r1, r3
 80034e0:	893b      	ldrh	r3, [r7, #8]
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	47a0      	blx	r4
 80034e6:	4603      	mov	r3, r0
  }
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	371c      	adds	r7, #28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd90      	pop	{r4, r7, pc}

080034f0 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 80034f0:	b590      	push	{r4, r7, lr}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	607a      	str	r2, [r7, #4]
 80034fa:	461a      	mov	r2, r3
 80034fc:	460b      	mov	r3, r1
 80034fe:	72fb      	strb	r3, [r7, #11]
 8003500:	4613      	mov	r3, r2
 8003502:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	685c      	ldr	r4, [r3, #4]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	68d8      	ldr	r0, [r3, #12]
 800350c:	893b      	ldrh	r3, [r7, #8]
 800350e:	7af9      	ldrb	r1, [r7, #11]
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	47a0      	blx	r4
 8003514:	6178      	str	r0, [r7, #20]

  return ret;
 8003516:	697b      	ldr	r3, [r7, #20]
}
 8003518:	4618      	mov	r0, r3
 800351a:	371c      	adds	r7, #28
 800351c:	46bd      	mov	sp, r7
 800351e:	bd90      	pop	{r4, r7, pc}

08003520 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8003520:	b590      	push	{r4, r7, lr}
 8003522:	b087      	sub	sp, #28
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	607a      	str	r2, [r7, #4]
 800352a:	461a      	mov	r2, r3
 800352c:	460b      	mov	r3, r1
 800352e:	72fb      	strb	r3, [r7, #11]
 8003530:	4613      	mov	r3, r2
 8003532:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681c      	ldr	r4, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	68d8      	ldr	r0, [r3, #12]
 800353c:	893b      	ldrh	r3, [r7, #8]
 800353e:	7af9      	ldrb	r1, [r7, #11]
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	47a0      	blx	r4
 8003544:	6178      	str	r0, [r7, #20]

  return ret;
 8003546:	697b      	ldr	r3, [r7, #20]
}
 8003548:	4618      	mov	r0, r3
 800354a:	371c      	adds	r7, #28
 800354c:	46bd      	mov	sp, r7
 800354e:	bd90      	pop	{r4, r7, pc}

08003550 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800355c:	f107 0208 	add.w	r2, r7, #8
 8003560:	2301      	movs	r3, #1
 8003562:	2120      	movs	r1, #32
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff ffc3 	bl	80034f0 <hts221_read_reg>
 800356a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10f      	bne.n	8003592 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8003572:	78fb      	ldrb	r3, [r7, #3]
 8003574:	f003 0303 	and.w	r3, r3, #3
 8003578:	b2da      	uxtb	r2, r3
 800357a:	7a3b      	ldrb	r3, [r7, #8]
 800357c:	f362 0301 	bfi	r3, r2, #0, #2
 8003580:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003582:	f107 0208 	add.w	r2, r7, #8
 8003586:	2301      	movs	r3, #1
 8003588:	2120      	movs	r1, #32
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff ffc8 	bl	8003520 <hts221_write_reg>
 8003590:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003592:	68fb      	ldr	r3, [r7, #12]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80035a6:	f107 0208 	add.w	r2, r7, #8
 80035aa:	2301      	movs	r3, #1
 80035ac:	2120      	movs	r1, #32
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7ff ff9e 	bl	80034f0 <hts221_read_reg>
 80035b4:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 80035b6:	7a3b      	ldrb	r3, [r7, #8]
 80035b8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b03      	cmp	r3, #3
 80035c0:	d81a      	bhi.n	80035f8 <hts221_data_rate_get+0x5c>
 80035c2:	a201      	add	r2, pc, #4	@ (adr r2, 80035c8 <hts221_data_rate_get+0x2c>)
 80035c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c8:	080035d9 	.word	0x080035d9
 80035cc:	080035e1 	.word	0x080035e1
 80035d0:	080035e9 	.word	0x080035e9
 80035d4:	080035f1 	.word	0x080035f1
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	2200      	movs	r2, #0
 80035dc:	701a      	strb	r2, [r3, #0]
      break;
 80035de:	e00f      	b.n	8003600 <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	2201      	movs	r2, #1
 80035e4:	701a      	strb	r2, [r3, #0]
      break;
 80035e6:	e00b      	b.n	8003600 <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	2202      	movs	r2, #2
 80035ec:	701a      	strb	r2, [r3, #0]
      break;
 80035ee:	e007      	b.n	8003600 <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	2203      	movs	r2, #3
 80035f4:	701a      	strb	r2, [r3, #0]
      break;
 80035f6:	e003      	b.n	8003600 <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	2204      	movs	r2, #4
 80035fc:	701a      	strb	r2, [r3, #0]
      break;
 80035fe:	bf00      	nop
  }

  return ret;
 8003600:	68fb      	ldr	r3, [r7, #12]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop

0800360c <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003618:	f107 0208 	add.w	r2, r7, #8
 800361c:	2301      	movs	r3, #1
 800361e:	2120      	movs	r1, #32
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7ff ff65 	bl	80034f0 <hts221_read_reg>
 8003626:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10f      	bne.n	800364e <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800362e:	78fb      	ldrb	r3, [r7, #3]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	b2da      	uxtb	r2, r3
 8003636:	7a3b      	ldrb	r3, [r7, #8]
 8003638:	f362 0382 	bfi	r3, r2, #2, #1
 800363c:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800363e:	f107 0208 	add.w	r2, r7, #8
 8003642:	2301      	movs	r3, #1
 8003644:	2120      	movs	r1, #32
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7ff ff6a 	bl	8003520 <hts221_write_reg>
 800364c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800364e:	68fb      	ldr	r3, [r7, #12]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8003662:	f107 0208 	add.w	r2, r7, #8
 8003666:	2302      	movs	r3, #2
 8003668:	2128      	movs	r1, #40	@ 0x28
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7ff ff40 	bl	80034f0 <hts221_read_reg>
 8003670:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8003672:	7a7b      	ldrb	r3, [r7, #9]
 8003674:	b21a      	sxth	r2, r3
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003680:	b29b      	uxth	r3, r3
 8003682:	021b      	lsls	r3, r3, #8
 8003684:	b29b      	uxth	r3, r3
 8003686:	7a3a      	ldrb	r2, [r7, #8]
 8003688:	4413      	add	r3, r2
 800368a:	b29b      	uxth	r3, r3
 800368c:	b21a      	sxth	r2, r3
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	801a      	strh	r2, [r3, #0]

  return ret;
 8003692:	68fb      	ldr	r3, [r7, #12]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 80036a6:	f107 0208 	add.w	r2, r7, #8
 80036aa:	2302      	movs	r3, #2
 80036ac:	212a      	movs	r1, #42	@ 0x2a
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7ff ff1e 	bl	80034f0 <hts221_read_reg>
 80036b4:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80036b6:	7a7b      	ldrb	r3, [r7, #9]
 80036b8:	b21a      	sxth	r2, r3
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	021b      	lsls	r3, r3, #8
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	7a3a      	ldrb	r2, [r7, #8]
 80036cc:	4413      	add	r3, r2
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	b21a      	sxth	r2, r3
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	801a      	strh	r2, [r3, #0]

  return ret;
 80036d6:	68fb      	ldr	r3, [r7, #12]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 80036ea:	2301      	movs	r3, #1
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	210f      	movs	r1, #15
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7ff fefd 	bl	80034f0 <hts221_read_reg>
 80036f6:	60f8      	str	r0, [r7, #12]

  return ret;
 80036f8:	68fb      	ldr	r3, [r7, #12]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b084      	sub	sp, #16
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	460b      	mov	r3, r1
 800370c:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800370e:	f107 0208 	add.w	r2, r7, #8
 8003712:	2301      	movs	r3, #1
 8003714:	2120      	movs	r1, #32
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff feea 	bl	80034f0 <hts221_read_reg>
 800371c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10f      	bne.n	8003744 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 8003724:	78fb      	ldrb	r3, [r7, #3]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	b2da      	uxtb	r2, r3
 800372c:	7a3b      	ldrb	r3, [r7, #8]
 800372e:	f362 13c7 	bfi	r3, r2, #7, #1
 8003732:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003734:	f107 0208 	add.w	r2, r7, #8
 8003738:	2301      	movs	r3, #1
 800373a:	2120      	movs	r1, #32
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7ff feef 	bl	8003520 <hts221_write_reg>
 8003742:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003744:	68fb      	ldr	r3, [r7, #12]
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b084      	sub	sp, #16
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
 8003756:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8003758:	f107 020b 	add.w	r2, r7, #11
 800375c:	2301      	movs	r3, #1
 800375e:	2130      	movs	r1, #48	@ 0x30
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff fec5 	bl	80034f0 <hts221_read_reg>
 8003766:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003768:	7afb      	ldrb	r3, [r7, #11]
 800376a:	4618      	mov	r0, r3
 800376c:	f7fd faae 	bl	8000ccc <__aeabi_i2f>
 8003770:	4603      	mov	r3, r0
 8003772:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003776:	4618      	mov	r0, r3
 8003778:	f7fd fbb0 	bl	8000edc <__aeabi_fdiv>
 800377c:	4603      	mov	r3, r0
 800377e:	461a      	mov	r2, r3
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	601a      	str	r2, [r3, #0]

  return ret;
 8003784:	68fb      	ldr	r3, [r7, #12]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b084      	sub	sp, #16
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
 8003796:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8003798:	f107 020b 	add.w	r2, r7, #11
 800379c:	2301      	movs	r3, #1
 800379e:	2131      	movs	r1, #49	@ 0x31
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff fea5 	bl	80034f0 <hts221_read_reg>
 80037a6:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80037a8:	7afb      	ldrb	r3, [r7, #11]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fd fa8e 	bl	8000ccc <__aeabi_i2f>
 80037b0:	4603      	mov	r3, r0
 80037b2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fd fb90 	bl	8000edc <__aeabi_fdiv>
 80037bc:	4603      	mov	r3, r0
 80037be:	461a      	mov	r2, r3
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	601a      	str	r2, [r3, #0]

  return ret;
 80037c4:	68fb      	ldr	r3, [r7, #12]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b086      	sub	sp, #24
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
 80037d6:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 80037d8:	f107 020f 	add.w	r2, r7, #15
 80037dc:	2301      	movs	r3, #1
 80037de:	2132      	movs	r1, #50	@ 0x32
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7ff fe85 	bl	80034f0 <hts221_read_reg>
 80037e6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d11d      	bne.n	800382a <hts221_temp_deg_point_0_get+0x5c>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 80037ee:	f107 0210 	add.w	r2, r7, #16
 80037f2:	2301      	movs	r3, #1
 80037f4:	2135      	movs	r1, #53	@ 0x35
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7ff fe7a 	bl	80034f0 <hts221_read_reg>
 80037fc:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 80037fe:	7c3b      	ldrb	r3, [r7, #16]
 8003800:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003804:	b2db      	uxtb	r3, r3
 8003806:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8003808:	7cfb      	ldrb	r3, [r7, #19]
 800380a:	021b      	lsls	r3, r3, #8
 800380c:	7bfa      	ldrb	r2, [r7, #15]
 800380e:	4413      	add	r3, r2
 8003810:	4618      	mov	r0, r3
 8003812:	f7fd fa5b 	bl	8000ccc <__aeabi_i2f>
 8003816:	4603      	mov	r3, r0
 8003818:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800381c:	4618      	mov	r0, r3
 800381e:	f7fd fb5d 	bl	8000edc <__aeabi_fdiv>
 8003822:	4603      	mov	r3, r0
 8003824:	461a      	mov	r2, r3
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	601a      	str	r2, [r3, #0]
  }

  return ret;
 800382a:	697b      	ldr	r3, [r7, #20]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 800383e:	f107 020f 	add.w	r2, r7, #15
 8003842:	2301      	movs	r3, #1
 8003844:	2133      	movs	r1, #51	@ 0x33
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7ff fe52 	bl	80034f0 <hts221_read_reg>
 800384c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d11d      	bne.n	8003890 <hts221_temp_deg_point_1_get+0x5c>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8003854:	f107 0210 	add.w	r2, r7, #16
 8003858:	2301      	movs	r3, #1
 800385a:	2135      	movs	r1, #53	@ 0x35
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7ff fe47 	bl	80034f0 <hts221_read_reg>
 8003862:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8003864:	7c3b      	ldrb	r3, [r7, #16]
 8003866:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800386a:	b2db      	uxtb	r3, r3
 800386c:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 800386e:	7cfb      	ldrb	r3, [r7, #19]
 8003870:	021b      	lsls	r3, r3, #8
 8003872:	7bfa      	ldrb	r2, [r7, #15]
 8003874:	4413      	add	r3, r2
 8003876:	4618      	mov	r0, r3
 8003878:	f7fd fa28 	bl	8000ccc <__aeabi_i2f>
 800387c:	4603      	mov	r3, r0
 800387e:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8003882:	4618      	mov	r0, r3
 8003884:	f7fd fb2a 	bl	8000edc <__aeabi_fdiv>
 8003888:	4603      	mov	r3, r0
 800388a:	461a      	mov	r2, r3
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8003890:	697b      	ldr	r3, [r7, #20]
}
 8003892:	4618      	mov	r0, r3
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b084      	sub	sp, #16
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 80038a4:	f107 0208 	add.w	r2, r7, #8
 80038a8:	2302      	movs	r3, #2
 80038aa:	2136      	movs	r1, #54	@ 0x36
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff fe1f 	bl	80034f0 <hts221_read_reg>
 80038b2:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80038b4:	7a7b      	ldrb	r3, [r7, #9]
 80038b6:	021b      	lsls	r3, r3, #8
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	7a3a      	ldrb	r2, [r7, #8]
 80038bc:	4413      	add	r3, r2
 80038be:	b29b      	uxth	r3, r3
 80038c0:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80038c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fd fa00 	bl	8000ccc <__aeabi_i2f>
 80038cc:	4602      	mov	r2, r0
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	601a      	str	r2, [r3, #0]

  return ret;
 80038d2:	68fb      	ldr	r3, [r7, #12]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 80038e6:	f107 0208 	add.w	r2, r7, #8
 80038ea:	2302      	movs	r3, #2
 80038ec:	213a      	movs	r1, #58	@ 0x3a
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7ff fdfe 	bl	80034f0 <hts221_read_reg>
 80038f4:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80038f6:	7a7b      	ldrb	r3, [r7, #9]
 80038f8:	021b      	lsls	r3, r3, #8
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	7a3a      	ldrb	r2, [r7, #8]
 80038fe:	4413      	add	r3, r2
 8003900:	b29b      	uxth	r3, r3
 8003902:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003904:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003908:	4618      	mov	r0, r3
 800390a:	f7fd f9df 	bl	8000ccc <__aeabi_i2f>
 800390e:	4602      	mov	r2, r0
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	601a      	str	r2, [r3, #0]

  return ret;
 8003914:	68fb      	ldr	r3, [r7, #12]
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
 8003926:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8003928:	f107 0208 	add.w	r2, r7, #8
 800392c:	2302      	movs	r3, #2
 800392e:	213c      	movs	r1, #60	@ 0x3c
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7ff fddd 	bl	80034f0 <hts221_read_reg>
 8003936:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003938:	7a7b      	ldrb	r3, [r7, #9]
 800393a:	021b      	lsls	r3, r3, #8
 800393c:	b29b      	uxth	r3, r3
 800393e:	7a3a      	ldrb	r2, [r7, #8]
 8003940:	4413      	add	r3, r2
 8003942:	b29b      	uxth	r3, r3
 8003944:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003946:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800394a:	4618      	mov	r0, r3
 800394c:	f7fd f9be 	bl	8000ccc <__aeabi_i2f>
 8003950:	4602      	mov	r2, r0
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	601a      	str	r2, [r3, #0]

  return ret;
 8003956:	68fb      	ldr	r3, [r7, #12]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 800396a:	f107 0208 	add.w	r2, r7, #8
 800396e:	2302      	movs	r3, #2
 8003970:	213e      	movs	r1, #62	@ 0x3e
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7ff fdbc 	bl	80034f0 <hts221_read_reg>
 8003978:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800397a:	7a7b      	ldrb	r3, [r7, #9]
 800397c:	021b      	lsls	r3, r3, #8
 800397e:	b29b      	uxth	r3, r3
 8003980:	7a3a      	ldrb	r2, [r7, #8]
 8003982:	4413      	add	r3, r2
 8003984:	b29b      	uxth	r3, r3
 8003986:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003988:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800398c:	4618      	mov	r0, r3
 800398e:	f7fd f99d 	bl	8000ccc <__aeabi_i2f>
 8003992:	4602      	mov	r2, r0
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	601a      	str	r2, [r3, #0]

  return ret;
 8003998:	68fb      	ldr	r3, [r7, #12]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <LPS22HH_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d103      	bne.n	80039c0 <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 80039b8:	f04f 33ff 	mov.w	r3, #4294967295
 80039bc:	60fb      	str	r3, [r7, #12]
 80039be:	e051      	b.n	8003a64 <LPS22HH_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	7b1a      	ldrb	r2, [r3, #12]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	695a      	ldr	r2, [r3, #20]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	699a      	ldr	r2, [r3, #24]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a1d      	ldr	r2, [pc, #116]	@ (8003a70 <LPS22HH_RegisterBusIO+0xcc>)
 80039fc:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a1c      	ldr	r2, [pc, #112]	@ (8003a74 <LPS22HH_RegisterBusIO+0xd0>)
 8003a02:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	69da      	ldr	r2, [r3, #28]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d103      	bne.n	8003a22 <LPS22HH_RegisterBusIO+0x7e>
    {
      ret = LPS22HH_ERROR;
 8003a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	e020      	b.n	8003a64 <LPS22HH_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4798      	blx	r3
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <LPS22HH_RegisterBusIO+0x92>
    {
      ret = LPS22HH_ERROR;
 8003a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	e016      	b.n	8003a64 <LPS22HH_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d112      	bne.n	8003a64 <LPS22HH_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10d      	bne.n	8003a64 <LPS22HH_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 8003a4c:	7afb      	ldrb	r3, [r7, #11]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	2110      	movs	r1, #16
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f9db 	bl	8003e0e <LPS22HH_Write_Reg>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <LPS22HH_RegisterBusIO+0xc0>
          {
            ret = LPS22HH_ERROR;
 8003a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a62:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003a64:	68fb      	ldr	r3, [r7, #12]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	0800411b 	.word	0x0800411b
 8003a74:	08004151 	.word	0x08004151

08003a78 <LPS22HH_Init>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d108      	bne.n	8003a9c <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 faf8 	bl	8004080 <LPS22HH_Initialize>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 8003a96:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9a:	e004      	b.n	8003aa6 <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22HH_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <LPS22HH_DeInit>:
  * @brief  Deinitialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b082      	sub	sp, #8
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d111      	bne.n	8003ae4 <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f87d 	bl	8003bc0 <LPS22HH_PRESS_Disable>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d002      	beq.n	8003ad2 <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 8003acc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad0:	e00d      	b.n	8003aee <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f919 	bl	8003d0a <LPS22HH_TEMP_Disable>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 8003ade:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae2:	e004      	b.n	8003aee <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22HH_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <LPS22HH_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b082      	sub	sp, #8
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
 8003afe:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3320      	adds	r3, #32
 8003b04:	6839      	ldr	r1, [r7, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fcfd 	bl	8004506 <lps22hh_device_id_get>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 8003b12:	f04f 33ff 	mov.w	r3, #4294967295
 8003b16:	e000      	b.n	8003b1a <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <LPS22HH_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HH sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2200      	movs	r2, #0
 8003b32:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	2201      	movs	r2, #1
 8003b38:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2200      	movs	r2, #0
 8003b44:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	4a07      	ldr	r2, [pc, #28]	@ (8003b74 <LPS22HH_GetCapabilities+0x50>)
 8003b58:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 200.0f;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	4a05      	ldr	r2, [pc, #20]	@ (8003b74 <LPS22HH_GetCapabilities+0x50>)
 8003b5e:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	f04f 0200 	mov.w	r2, #0
 8003b66:	615a      	str	r2, [r3, #20]
  return LPS22HH_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr
 8003b74:	43480000 	.word	0x43480000

08003b78 <LPS22HH_PRESS_Enable>:
  * @brief  Enable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d101      	bne.n	8003b8e <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	e014      	b.n	8003bb8 <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f103 0220 	add.w	r2, r3, #32
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	f000 fb71 	bl	8004284 <lps22hh_data_rate_set>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8003ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bac:	e004      	b.n	8003bb8 <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22HH_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <LPS22HH_PRESS_Disable>:
  * @brief  Disable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	e024      	b.n	8003c20 <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d11a      	bne.n	8003c16 <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f103 0220 	add.w	r2, r3, #32
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	3333      	adds	r3, #51	@ 0x33
 8003bea:	4619      	mov	r1, r3
 8003bec:	4610      	mov	r0, r2
 8003bee:	f000 fb97 	bl	8004320 <lps22hh_data_rate_get>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8003bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bfc:	e010      	b.n	8003c20 <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3320      	adds	r3, #32
 8003c02:	2100      	movs	r1, #0
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 fb3d 	bl	8004284 <lps22hh_data_rate_set>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8003c10:	f04f 33ff 	mov.w	r3, #4294967295
 8003c14:	e004      	b.n	8003c20 <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22HH_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <LPS22HH_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8003c32:	6839      	ldr	r1, [r7, #0]
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 f905 	bl	8003e44 <LPS22HH_GetOutputDataRate>
 8003c3a:	4603      	mov	r3, r0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <LPS22HH_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d105      	bne.n	8003c64 <LPS22HH_PRESS_SetOutputDataRate+0x20>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003c58:	6839      	ldr	r1, [r7, #0]
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f956 	bl	8003f0c <LPS22HH_SetOutputDataRate_When_Enabled>
 8003c60:	4603      	mov	r3, r0
 8003c62:	e004      	b.n	8003c6e <LPS22HH_PRESS_SetOutputDataRate+0x2a>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003c64:	6839      	ldr	r1, [r7, #0]
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f9ba 	bl	8003fe0 <LPS22HH_SetOutputDataRate_When_Disabled>
 8003c6c:	4603      	mov	r3, r0
  }
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <LPS22HH_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b084      	sub	sp, #16
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
 8003c7e:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8003c80:	f107 030c 	add.w	r3, r7, #12
 8003c84:	2204      	movs	r2, #4
 8003c86:	2100      	movs	r1, #0
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f007 f801 	bl	800ac90 <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	3320      	adds	r3, #32
 8003c92:	f107 020c 	add.w	r2, r7, #12
 8003c96:	4611      	mov	r1, r2
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 fbe9 	bl	8004470 <lps22hh_pressure_raw_get>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 8003ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca8:	e007      	b.n	8003cba <LPS22HH_PRESS_GetPressure+0x44>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 fa9a 	bl	80041e6 <lps22hh_from_lsb_to_hpa>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	601a      	str	r2, [r3, #0]

  return LPS22HH_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <LPS22HH_TEMP_Enable>:
  * @brief  Enable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b082      	sub	sp, #8
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d101      	bne.n	8003cd8 <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	e014      	b.n	8003d02 <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f103 0220 	add.w	r2, r3, #32
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	f000 facc 	bl	8004284 <lps22hh_data_rate_set>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8003cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf6:	e004      	b.n	8003d02 <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22HH_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <LPS22HH_TEMP_Disable>:
  * @brief  Disable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b082      	sub	sp, #8
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	e024      	b.n	8003d6a <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d11a      	bne.n	8003d60 <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f103 0220 	add.w	r2, r3, #32
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3333      	adds	r3, #51	@ 0x33
 8003d34:	4619      	mov	r1, r3
 8003d36:	4610      	mov	r0, r2
 8003d38:	f000 faf2 	bl	8004320 <lps22hh_data_rate_get>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8003d42:	f04f 33ff 	mov.w	r3, #4294967295
 8003d46:	e010      	b.n	8003d6a <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3320      	adds	r3, #32
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 fa98 	bl	8004284 <lps22hh_data_rate_set>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8003d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d5e:	e004      	b.n	8003d6a <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22HH_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <LPS22HH_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b082      	sub	sp, #8
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8003d7c:	6839      	ldr	r1, [r7, #0]
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f860 	bl	8003e44 <LPS22HH_GetOutputDataRate>
 8003d84:	4603      	mov	r3, r0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <LPS22HH_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b082      	sub	sp, #8
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d105      	bne.n	8003dae <LPS22HH_TEMP_SetOutputDataRate+0x20>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003da2:	6839      	ldr	r1, [r7, #0]
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 f8b1 	bl	8003f0c <LPS22HH_SetOutputDataRate_When_Enabled>
 8003daa:	4603      	mov	r3, r0
 8003dac:	e004      	b.n	8003db8 <LPS22HH_TEMP_SetOutputDataRate+0x2a>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003dae:	6839      	ldr	r1, [r7, #0]
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f915 	bl	8003fe0 <LPS22HH_SetOutputDataRate_When_Disabled>
 8003db6:	4603      	mov	r3, r0
  }
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <LPS22HH_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8003dca:	f107 030c 	add.w	r3, r7, #12
 8003dce:	2202      	movs	r2, #2
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f006 ff5c 	bl	800ac90 <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3320      	adds	r3, #32
 8003ddc:	f107 020c 	add.w	r2, r7, #12
 8003de0:	4611      	mov	r1, r2
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 fb6d 	bl	80044c2 <lps22hh_temperature_raw_get>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 8003dee:	f04f 33ff 	mov.w	r3, #4294967295
 8003df2:	e008      	b.n	8003e06 <LPS22HH_TEMP_GetTemperature+0x46>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 8003df4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 fa07 	bl	800420c <lps22hh_from_lsb_to_celsius>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	601a      	str	r2, [r3, #0]

  return LPS22HH_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <LPS22HH_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b082      	sub	sp, #8
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
 8003e16:	460b      	mov	r3, r1
 8003e18:	70fb      	strb	r3, [r7, #3]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f103 0020 	add.w	r0, r3, #32
 8003e24:	1cba      	adds	r2, r7, #2
 8003e26:	78f9      	ldrb	r1, [r7, #3]
 8003e28:	2301      	movs	r3, #1
 8003e2a:	f000 f9c4 	bl	80041b6 <lps22hh_write_reg>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 8003e34:	f04f 33ff 	mov.w	r3, #4294967295
 8003e38:	e000      	b.n	8003e3c <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <LPS22HH_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3320      	adds	r3, #32
 8003e56:	f107 020b 	add.w	r2, r7, #11
 8003e5a:	4611      	mov	r1, r2
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 fa5f 	bl	8004320 <lps22hh_data_rate_get>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 8003e68:	f04f 33ff 	mov.w	r3, #4294967295
 8003e6c:	e03d      	b.n	8003eea <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 8003e6e:	7afb      	ldrb	r3, [r7, #11]
 8003e70:	2b07      	cmp	r3, #7
 8003e72:	d835      	bhi.n	8003ee0 <LPS22HH_GetOutputDataRate+0x9c>
 8003e74:	a201      	add	r2, pc, #4	@ (adr r2, 8003e7c <LPS22HH_GetOutputDataRate+0x38>)
 8003e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7a:	bf00      	nop
 8003e7c:	08003e9d 	.word	0x08003e9d
 8003e80:	08003ea7 	.word	0x08003ea7
 8003e84:	08003eb1 	.word	0x08003eb1
 8003e88:	08003eb9 	.word	0x08003eb9
 8003e8c:	08003ec1 	.word	0x08003ec1
 8003e90:	08003ec9 	.word	0x08003ec9
 8003e94:	08003ed1 	.word	0x08003ed1
 8003e98:	08003ed9 	.word	0x08003ed9
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	f04f 0200 	mov.w	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]
      break;
 8003ea4:	e020      	b.n	8003ee8 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003eac:	601a      	str	r2, [r3, #0]
      break;
 8003eae:	e01b      	b.n	8003ee8 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	4a10      	ldr	r2, [pc, #64]	@ (8003ef4 <LPS22HH_GetOutputDataRate+0xb0>)
 8003eb4:	601a      	str	r2, [r3, #0]
      break;
 8003eb6:	e017      	b.n	8003ee8 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	4a0f      	ldr	r2, [pc, #60]	@ (8003ef8 <LPS22HH_GetOutputDataRate+0xb4>)
 8003ebc:	601a      	str	r2, [r3, #0]
      break;
 8003ebe:	e013      	b.n	8003ee8 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	4a0e      	ldr	r2, [pc, #56]	@ (8003efc <LPS22HH_GetOutputDataRate+0xb8>)
 8003ec4:	601a      	str	r2, [r3, #0]
      break;
 8003ec6:	e00f      	b.n	8003ee8 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	4a0d      	ldr	r2, [pc, #52]	@ (8003f00 <LPS22HH_GetOutputDataRate+0xbc>)
 8003ecc:	601a      	str	r2, [r3, #0]
      break;
 8003ece:	e00b      	b.n	8003ee8 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	4a0c      	ldr	r2, [pc, #48]	@ (8003f04 <LPS22HH_GetOutputDataRate+0xc0>)
 8003ed4:	601a      	str	r2, [r3, #0]
      break;
 8003ed6:	e007      	b.n	8003ee8 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	4a0b      	ldr	r2, [pc, #44]	@ (8003f08 <LPS22HH_GetOutputDataRate+0xc4>)
 8003edc:	601a      	str	r2, [r3, #0]
      break;
 8003ede:	e003      	b.n	8003ee8 <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 8003ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee4:	60fb      	str	r3, [r7, #12]
      break;
 8003ee6:	bf00      	nop
  }

  return ret;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	41200000 	.word	0x41200000
 8003ef8:	41c80000 	.word	0x41c80000
 8003efc:	42480000 	.word	0x42480000
 8003f00:	42960000 	.word	0x42960000
 8003f04:	42c80000 	.word	0x42c80000
 8003f08:	43480000 	.word	0x43480000

08003f0c <LPS22HH_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8003f16:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003f1a:	6838      	ldr	r0, [r7, #0]
 8003f1c:	f7fd f8d2 	bl	80010c4 <__aeabi_fcmple>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <LPS22HH_SetOutputDataRate_When_Enabled+0x1e>
 8003f26:	2301      	movs	r3, #1
 8003f28:	e02d      	b.n	8003f86 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8003f2a:	4928      	ldr	r1, [pc, #160]	@ (8003fcc <LPS22HH_SetOutputDataRate_When_Enabled+0xc0>)
 8003f2c:	6838      	ldr	r0, [r7, #0]
 8003f2e:	f7fd f8c9 	bl	80010c4 <__aeabi_fcmple>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <LPS22HH_SetOutputDataRate_When_Enabled+0x30>
 8003f38:	2302      	movs	r3, #2
 8003f3a:	e024      	b.n	8003f86 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8003f3c:	4924      	ldr	r1, [pc, #144]	@ (8003fd0 <LPS22HH_SetOutputDataRate_When_Enabled+0xc4>)
 8003f3e:	6838      	ldr	r0, [r7, #0]
 8003f40:	f7fd f8c0 	bl	80010c4 <__aeabi_fcmple>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <LPS22HH_SetOutputDataRate_When_Enabled+0x42>
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e01b      	b.n	8003f86 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8003f4e:	4921      	ldr	r1, [pc, #132]	@ (8003fd4 <LPS22HH_SetOutputDataRate_When_Enabled+0xc8>)
 8003f50:	6838      	ldr	r0, [r7, #0]
 8003f52:	f7fd f8b7 	bl	80010c4 <__aeabi_fcmple>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <LPS22HH_SetOutputDataRate_When_Enabled+0x54>
 8003f5c:	2304      	movs	r3, #4
 8003f5e:	e012      	b.n	8003f86 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8003f60:	491d      	ldr	r1, [pc, #116]	@ (8003fd8 <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>)
 8003f62:	6838      	ldr	r0, [r7, #0]
 8003f64:	f7fd f8ae 	bl	80010c4 <__aeabi_fcmple>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <LPS22HH_SetOutputDataRate_When_Enabled+0x66>
 8003f6e:	2305      	movs	r3, #5
 8003f70:	e009      	b.n	8003f86 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8003f72:	491a      	ldr	r1, [pc, #104]	@ (8003fdc <LPS22HH_SetOutputDataRate_When_Enabled+0xd0>)
 8003f74:	6838      	ldr	r0, [r7, #0]
 8003f76:	f7fd f8a5 	bl	80010c4 <__aeabi_fcmple>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <LPS22HH_SetOutputDataRate_When_Enabled+0x78>
 8003f80:	2306      	movs	r3, #6
 8003f82:	e000      	b.n	8003f86 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8003f84:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8003f86:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  50.0f) ? LPS22HH_50_Hz
            : (Odr <=  75.0f) ? LPS22HH_75_Hz
            : (Odr <= 100.0f) ? LPS22HH_100_Hz
            :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3320      	adds	r3, #32
 8003f8c:	7bfa      	ldrb	r2, [r7, #15]
 8003f8e:	4611      	mov	r1, r2
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 f977 	bl	8004284 <lps22hh_data_rate_set>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <LPS22HH_SetOutputDataRate_When_Enabled+0x96>
  {
    return LPS22HH_ERROR;
 8003f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa0:	e00f      	b.n	8003fc2 <LPS22HH_SetOutputDataRate_When_Enabled+0xb6>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f103 0220 	add.w	r2, r3, #32
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3333      	adds	r3, #51	@ 0x33
 8003fac:	4619      	mov	r1, r3
 8003fae:	4610      	mov	r0, r2
 8003fb0:	f000 f9b6 	bl	8004320 <lps22hh_data_rate_get>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d002      	beq.n	8003fc0 <LPS22HH_SetOutputDataRate_When_Enabled+0xb4>
  {
    return LPS22HH_ERROR;
 8003fba:	f04f 33ff 	mov.w	r3, #4294967295
 8003fbe:	e000      	b.n	8003fc2 <LPS22HH_SetOutputDataRate_When_Enabled+0xb6>
  }

  return LPS22HH_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	41200000 	.word	0x41200000
 8003fd0:	41c80000 	.word	0x41c80000
 8003fd4:	42480000 	.word	0x42480000
 8003fd8:	42960000 	.word	0x42960000
 8003fdc:	42c80000 	.word	0x42c80000

08003fe0 <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8003fea:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003fee:	6838      	ldr	r0, [r7, #0]
 8003ff0:	f7fd f868 	bl	80010c4 <__aeabi_fcmple>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <LPS22HH_SetOutputDataRate_When_Disabled+0x1e>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e02d      	b.n	800405a <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8003ffe:	491b      	ldr	r1, [pc, #108]	@ (800406c <LPS22HH_SetOutputDataRate_When_Disabled+0x8c>)
 8004000:	6838      	ldr	r0, [r7, #0]
 8004002:	f7fd f85f 	bl	80010c4 <__aeabi_fcmple>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <LPS22HH_SetOutputDataRate_When_Disabled+0x30>
 800400c:	2302      	movs	r3, #2
 800400e:	e024      	b.n	800405a <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8004010:	4917      	ldr	r1, [pc, #92]	@ (8004070 <LPS22HH_SetOutputDataRate_When_Disabled+0x90>)
 8004012:	6838      	ldr	r0, [r7, #0]
 8004014:	f7fd f856 	bl	80010c4 <__aeabi_fcmple>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <LPS22HH_SetOutputDataRate_When_Disabled+0x42>
 800401e:	2303      	movs	r3, #3
 8004020:	e01b      	b.n	800405a <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8004022:	4914      	ldr	r1, [pc, #80]	@ (8004074 <LPS22HH_SetOutputDataRate_When_Disabled+0x94>)
 8004024:	6838      	ldr	r0, [r7, #0]
 8004026:	f7fd f84d 	bl	80010c4 <__aeabi_fcmple>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <LPS22HH_SetOutputDataRate_When_Disabled+0x54>
 8004030:	2304      	movs	r3, #4
 8004032:	e012      	b.n	800405a <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8004034:	4910      	ldr	r1, [pc, #64]	@ (8004078 <LPS22HH_SetOutputDataRate_When_Disabled+0x98>)
 8004036:	6838      	ldr	r0, [r7, #0]
 8004038:	f7fd f844 	bl	80010c4 <__aeabi_fcmple>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <LPS22HH_SetOutputDataRate_When_Disabled+0x66>
 8004042:	2305      	movs	r3, #5
 8004044:	e009      	b.n	800405a <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8004046:	490d      	ldr	r1, [pc, #52]	@ (800407c <LPS22HH_SetOutputDataRate_When_Disabled+0x9c>)
 8004048:	6838      	ldr	r0, [r7, #0]
 800404a:	f7fd f83b 	bl	80010c4 <__aeabi_fcmple>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <LPS22HH_SetOutputDataRate_When_Disabled+0x78>
 8004054:	2306      	movs	r3, #6
 8004056:	e000      	b.n	800405a <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8004058:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                   : (Odr <=  50.0f) ? LPS22HH_50_Hz
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	41200000 	.word	0x41200000
 8004070:	41c80000 	.word	0x41c80000
 8004074:	42480000 	.word	0x42480000
 8004078:	42960000 	.word	0x42960000
 800407c:	42c80000 	.word	0x42c80000

08004080 <LPS22HH_Initialize>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LPS22HH_I3C_BUS)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	2b03      	cmp	r3, #3
 800408e:	d00b      	beq.n	80040a8 <LPS22HH_Initialize+0x28>
  {
    /* Disable MIPI I3C(SM) interface */
    if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3320      	adds	r3, #32
 8004094:	2111      	movs	r1, #17
 8004096:	4618      	mov	r0, r3
 8004098:	f000 fa92 	bl	80045c0 <lps22hh_i3c_interface_set>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d002      	beq.n	80040a8 <LPS22HH_Initialize+0x28>
    {
      return LPS22HH_ERROR;
 80040a2:	f04f 33ff 	mov.w	r3, #4294967295
 80040a6:	e034      	b.n	8004112 <LPS22HH_Initialize+0x92>
    }
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3320      	adds	r3, #32
 80040ac:	2110      	movs	r1, #16
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 f8e8 	bl	8004284 <lps22hh_data_rate_set>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <LPS22HH_Initialize+0x40>
  {
    return LPS22HH_ERROR;
 80040ba:	f04f 33ff 	mov.w	r3, #4294967295
 80040be:	e028      	b.n	8004112 <LPS22HH_Initialize+0x92>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3320      	adds	r3, #32
 80040c4:	2100      	movs	r1, #0
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 fa54 	bl	8004574 <lps22hh_lp_bandwidth_set>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d002      	beq.n	80040d8 <LPS22HH_Initialize+0x58>
  {
    return LPS22HH_ERROR;
 80040d2:	f04f 33ff 	mov.w	r3, #4294967295
 80040d6:	e01c      	b.n	8004112 <LPS22HH_Initialize+0x92>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3320      	adds	r3, #32
 80040dc:	2101      	movs	r1, #1
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 f8aa 	bl	8004238 <lps22hh_block_data_update_set>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d002      	beq.n	80040f0 <LPS22HH_Initialize+0x70>
  {
    return LPS22HH_ERROR;
 80040ea:	f04f 33ff 	mov.w	r3, #4294967295
 80040ee:	e010      	b.n	8004112 <LPS22HH_Initialize+0x92>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	3320      	adds	r3, #32
 80040f4:	2101      	movs	r1, #1
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 fa16 	bl	8004528 <lps22hh_auto_increment_set>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d002      	beq.n	8004108 <LPS22HH_Initialize+0x88>
  {
    return LPS22HH_ERROR;
 8004102:	f04f 33ff 	mov.w	r3, #4294967295
 8004106:	e004      	b.n	8004112 <LPS22HH_Initialize+0x92>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2203      	movs	r2, #3
 800410c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  return LPS22HH_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800411a:	b590      	push	{r4, r7, lr}
 800411c:	b087      	sub	sp, #28
 800411e:	af00      	add	r7, sp, #0
 8004120:	60f8      	str	r0, [r7, #12]
 8004122:	607a      	str	r2, [r7, #4]
 8004124:	461a      	mov	r2, r3
 8004126:	460b      	mov	r3, r1
 8004128:	72fb      	strb	r3, [r7, #11]
 800412a:	4613      	mov	r3, r2
 800412c:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	695c      	ldr	r4, [r3, #20]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	7b1b      	ldrb	r3, [r3, #12]
 800413a:	4618      	mov	r0, r3
 800413c:	7afb      	ldrb	r3, [r7, #11]
 800413e:	b299      	uxth	r1, r3
 8004140:	893b      	ldrh	r3, [r7, #8]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	47a0      	blx	r4
 8004146:	4603      	mov	r3, r0
}
 8004148:	4618      	mov	r0, r3
 800414a:	371c      	adds	r7, #28
 800414c:	46bd      	mov	sp, r7
 800414e:	bd90      	pop	{r4, r7, pc}

08004150 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004150:	b590      	push	{r4, r7, lr}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	607a      	str	r2, [r7, #4]
 800415a:	461a      	mov	r2, r3
 800415c:	460b      	mov	r3, r1
 800415e:	72fb      	strb	r3, [r7, #11]
 8004160:	4613      	mov	r3, r2
 8004162:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	691c      	ldr	r4, [r3, #16]
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	7b1b      	ldrb	r3, [r3, #12]
 8004170:	4618      	mov	r0, r3
 8004172:	7afb      	ldrb	r3, [r7, #11]
 8004174:	b299      	uxth	r1, r3
 8004176:	893b      	ldrh	r3, [r7, #8]
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	47a0      	blx	r4
 800417c:	4603      	mov	r3, r0
}
 800417e:	4618      	mov	r0, r3
 8004180:	371c      	adds	r7, #28
 8004182:	46bd      	mov	sp, r7
 8004184:	bd90      	pop	{r4, r7, pc}

08004186 <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004186:	b590      	push	{r4, r7, lr}
 8004188:	b087      	sub	sp, #28
 800418a:	af00      	add	r7, sp, #0
 800418c:	60f8      	str	r0, [r7, #12]
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	461a      	mov	r2, r3
 8004192:	460b      	mov	r3, r1
 8004194:	72fb      	strb	r3, [r7, #11]
 8004196:	4613      	mov	r3, r2
 8004198:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	685c      	ldr	r4, [r3, #4]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	68d8      	ldr	r0, [r3, #12]
 80041a2:	893b      	ldrh	r3, [r7, #8]
 80041a4:	7af9      	ldrb	r1, [r7, #11]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	47a0      	blx	r4
 80041aa:	6178      	str	r0, [r7, #20]

  return ret;
 80041ac:	697b      	ldr	r3, [r7, #20]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	371c      	adds	r7, #28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd90      	pop	{r4, r7, pc}

080041b6 <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80041b6:	b590      	push	{r4, r7, lr}
 80041b8:	b087      	sub	sp, #28
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	607a      	str	r2, [r7, #4]
 80041c0:	461a      	mov	r2, r3
 80041c2:	460b      	mov	r3, r1
 80041c4:	72fb      	strb	r3, [r7, #11]
 80041c6:	4613      	mov	r3, r2
 80041c8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681c      	ldr	r4, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	68d8      	ldr	r0, [r3, #12]
 80041d2:	893b      	ldrh	r3, [r7, #8]
 80041d4:	7af9      	ldrb	r1, [r7, #11]
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	47a0      	blx	r4
 80041da:	6178      	str	r0, [r7, #20]

  return ret;
 80041dc:	697b      	ldr	r3, [r7, #20]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	371c      	adds	r7, #28
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd90      	pop	{r4, r7, pc}

080041e6 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b082      	sub	sp, #8
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7fc fd68 	bl	8000cc4 <__aeabi_ui2f>
 80041f4:	4603      	mov	r3, r0
 80041f6:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7fc fe6e 	bl	8000edc <__aeabi_fdiv>
 8004200:	4603      	mov	r3, r0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
	...

0800420c <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	4603      	mov	r3, r0
 8004214:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8004216:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800421a:	4618      	mov	r0, r3
 800421c:	f7fc fd56 	bl	8000ccc <__aeabi_i2f>
 8004220:	4603      	mov	r3, r0
 8004222:	4904      	ldr	r1, [pc, #16]	@ (8004234 <lps22hh_from_lsb_to_celsius+0x28>)
 8004224:	4618      	mov	r0, r3
 8004226:	f7fc fe59 	bl	8000edc <__aeabi_fdiv>
 800422a:	4603      	mov	r3, r0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	42c80000 	.word	0x42c80000

08004238 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8004244:	f107 0208 	add.w	r2, r7, #8
 8004248:	2301      	movs	r3, #1
 800424a:	2110      	movs	r1, #16
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7ff ff9a 	bl	8004186 <lps22hh_read_reg>
 8004252:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10f      	bne.n	800427a <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800425a:	78fb      	ldrb	r3, [r7, #3]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	b2da      	uxtb	r2, r3
 8004262:	7a3b      	ldrb	r3, [r7, #8]
 8004264:	f362 0341 	bfi	r3, r2, #1, #1
 8004268:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800426a:	f107 0208 	add.w	r2, r7, #8
 800426e:	2301      	movs	r3, #1
 8004270:	2110      	movs	r1, #16
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7ff ff9f 	bl	80041b6 <lps22hh_write_reg>
 8004278:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800427a:	68fb      	ldr	r3, [r7, #12]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	460b      	mov	r3, r1
 800428e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004290:	f107 0210 	add.w	r2, r7, #16
 8004294:	2301      	movs	r3, #1
 8004296:	2110      	movs	r1, #16
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7ff ff74 	bl	8004186 <lps22hh_read_reg>
 800429e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d107      	bne.n	80042b6 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80042a6:	f107 020c 	add.w	r2, r7, #12
 80042aa:	2301      	movs	r3, #1
 80042ac:	2111      	movs	r1, #17
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7ff ff69 	bl	8004186 <lps22hh_read_reg>
 80042b4:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10f      	bne.n	80042dc <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80042bc:	78fb      	ldrb	r3, [r7, #3]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	7c3b      	ldrb	r3, [r7, #16]
 80042c6:	f362 1306 	bfi	r3, r2, #4, #3
 80042ca:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80042cc:	f107 0210 	add.w	r2, r7, #16
 80042d0:	2301      	movs	r3, #1
 80042d2:	2110      	movs	r1, #16
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7ff ff6e 	bl	80041b6 <lps22hh_write_reg>
 80042da:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d119      	bne.n	8004316 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 80042e2:	78fb      	ldrb	r3, [r7, #3]
 80042e4:	091b      	lsrs	r3, r3, #4
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	7b3b      	ldrb	r3, [r7, #12]
 80042ee:	f362 0341 	bfi	r3, r2, #1, #1
 80042f2:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 80042f4:	78fb      	ldrb	r3, [r7, #3]
 80042f6:	08db      	lsrs	r3, r3, #3
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	7b3b      	ldrb	r3, [r7, #12]
 8004300:	f362 0300 	bfi	r3, r2, #0, #1
 8004304:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004306:	f107 020c 	add.w	r2, r7, #12
 800430a:	2301      	movs	r3, #1
 800430c:	2111      	movs	r1, #17
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7ff ff51 	bl	80041b6 <lps22hh_write_reg>
 8004314:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004316:	697b      	ldr	r3, [r7, #20]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3718      	adds	r7, #24
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800432a:	f107 0210 	add.w	r2, r7, #16
 800432e:	2301      	movs	r3, #1
 8004330:	2110      	movs	r1, #16
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7ff ff27 	bl	8004186 <lps22hh_read_reg>
 8004338:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d107      	bne.n	8004350 <lps22hh_data_rate_get+0x30>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004340:	f107 020c 	add.w	r2, r7, #12
 8004344:	2301      	movs	r3, #1
 8004346:	2111      	movs	r1, #17
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7ff ff1c 	bl	8004186 <lps22hh_read_reg>
 800434e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	2b00      	cmp	r3, #0
 8004354:	f040 8086 	bne.w	8004464 <lps22hh_data_rate_get+0x144>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004358:	f107 020c 	add.w	r2, r7, #12
 800435c:	2301      	movs	r3, #1
 800435e:	2111      	movs	r1, #17
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7ff ff10 	bl	8004186 <lps22hh_read_reg>
 8004366:	6178      	str	r0, [r7, #20]

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8004368:	7b3b      	ldrb	r3, [r7, #12]
 800436a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800436e:	b2db      	uxtb	r3, r3
 8004370:	011a      	lsls	r2, r3, #4
 8004372:	7b3b      	ldrb	r3, [r7, #12]
 8004374:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004378:	b2db      	uxtb	r3, r3
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	4413      	add	r3, r2
             ctrl_reg1.odr))
 800437e:	7c3a      	ldrb	r2, [r7, #16]
 8004380:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8004384:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8004386:	4413      	add	r3, r2
 8004388:	2b15      	cmp	r3, #21
 800438a:	d867      	bhi.n	800445c <lps22hh_data_rate_get+0x13c>
 800438c:	a201      	add	r2, pc, #4	@ (adr r2, 8004394 <lps22hh_data_rate_get+0x74>)
 800438e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004392:	bf00      	nop
 8004394:	080043ed 	.word	0x080043ed
 8004398:	080043fd 	.word	0x080043fd
 800439c:	08004405 	.word	0x08004405
 80043a0:	0800440d 	.word	0x0800440d
 80043a4:	08004415 	.word	0x08004415
 80043a8:	0800441d 	.word	0x0800441d
 80043ac:	0800444d 	.word	0x0800444d
 80043b0:	08004455 	.word	0x08004455
 80043b4:	080043f5 	.word	0x080043f5
 80043b8:	0800445d 	.word	0x0800445d
 80043bc:	0800445d 	.word	0x0800445d
 80043c0:	0800445d 	.word	0x0800445d
 80043c4:	0800445d 	.word	0x0800445d
 80043c8:	0800445d 	.word	0x0800445d
 80043cc:	0800445d 	.word	0x0800445d
 80043d0:	0800445d 	.word	0x0800445d
 80043d4:	0800445d 	.word	0x0800445d
 80043d8:	08004425 	.word	0x08004425
 80043dc:	0800442d 	.word	0x0800442d
 80043e0:	08004435 	.word	0x08004435
 80043e4:	0800443d 	.word	0x0800443d
 80043e8:	08004445 	.word	0x08004445
    {
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	2200      	movs	r2, #0
 80043f0:	701a      	strb	r2, [r3, #0]
        break;
 80043f2:	e037      	b.n	8004464 <lps22hh_data_rate_get+0x144>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	2208      	movs	r2, #8
 80043f8:	701a      	strb	r2, [r3, #0]
        break;
 80043fa:	e033      	b.n	8004464 <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	2201      	movs	r2, #1
 8004400:	701a      	strb	r2, [r3, #0]
        break;
 8004402:	e02f      	b.n	8004464 <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	2202      	movs	r2, #2
 8004408:	701a      	strb	r2, [r3, #0]
        break;
 800440a:	e02b      	b.n	8004464 <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2203      	movs	r2, #3
 8004410:	701a      	strb	r2, [r3, #0]
        break;
 8004412:	e027      	b.n	8004464 <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	2204      	movs	r2, #4
 8004418:	701a      	strb	r2, [r3, #0]
        break;
 800441a:	e023      	b.n	8004464 <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	2205      	movs	r2, #5
 8004420:	701a      	strb	r2, [r3, #0]
        break;
 8004422:	e01f      	b.n	8004464 <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	2211      	movs	r2, #17
 8004428:	701a      	strb	r2, [r3, #0]
        break;
 800442a:	e01b      	b.n	8004464 <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	2212      	movs	r2, #18
 8004430:	701a      	strb	r2, [r3, #0]
        break;
 8004432:	e017      	b.n	8004464 <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	2213      	movs	r2, #19
 8004438:	701a      	strb	r2, [r3, #0]
        break;
 800443a:	e013      	b.n	8004464 <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	2214      	movs	r2, #20
 8004440:	701a      	strb	r2, [r3, #0]
        break;
 8004442:	e00f      	b.n	8004464 <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	2215      	movs	r2, #21
 8004448:	701a      	strb	r2, [r3, #0]
        break;
 800444a:	e00b      	b.n	8004464 <lps22hh_data_rate_get+0x144>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	2206      	movs	r2, #6
 8004450:	701a      	strb	r2, [r3, #0]
        break;
 8004452:	e007      	b.n	8004464 <lps22hh_data_rate_get+0x144>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	2207      	movs	r2, #7
 8004458:	701a      	strb	r2, [r3, #0]
        break;
 800445a:	e003      	b.n	8004464 <lps22hh_data_rate_get+0x144>

      default:
        *val = LPS22HH_POWER_DOWN;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	2200      	movs	r2, #0
 8004460:	701a      	strb	r2, [r3, #0]
        break;
 8004462:	bf00      	nop
    }
  }

  return ret;
 8004464:	697b      	ldr	r3, [r7, #20]
}
 8004466:	4618      	mov	r0, r3
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop

08004470 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 800447a:	f107 0208 	add.w	r2, r7, #8
 800447e:	2303      	movs	r3, #3
 8004480:	2128      	movs	r1, #40	@ 0x28
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7ff fe7f 	bl	8004186 <lps22hh_read_reg>
 8004488:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 800448a:	7abb      	ldrb	r3, [r7, #10]
 800448c:	461a      	mov	r2, r3
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	021b      	lsls	r3, r3, #8
 8004498:	7a7a      	ldrb	r2, [r7, #9]
 800449a:	441a      	add	r2, r3
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	021b      	lsls	r3, r3, #8
 80044a6:	7a3a      	ldrb	r2, [r7, #8]
 80044a8:	441a      	add	r2, r3
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	021a      	lsls	r2, r3, #8
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	601a      	str	r2, [r3, #0]

  return ret;
 80044b8:	68fb      	ldr	r3, [r7, #12]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b084      	sub	sp, #16
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 80044cc:	f107 0208 	add.w	r2, r7, #8
 80044d0:	2302      	movs	r3, #2
 80044d2:	212b      	movs	r1, #43	@ 0x2b
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f7ff fe56 	bl	8004186 <lps22hh_read_reg>
 80044da:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 80044dc:	7a7b      	ldrb	r3, [r7, #9]
 80044de:	b21a      	sxth	r2, r3
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	021b      	lsls	r3, r3, #8
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	7a3a      	ldrb	r2, [r7, #8]
 80044f2:	4413      	add	r3, r2
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	b21a      	sxth	r2, r3
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	801a      	strh	r2, [r3, #0]

  return ret;
 80044fc:	68fb      	ldr	r3, [r7, #12]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b084      	sub	sp, #16
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
 800450e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8004510:	2301      	movs	r3, #1
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	210f      	movs	r1, #15
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7ff fe35 	bl	8004186 <lps22hh_read_reg>
 800451c:	60f8      	str	r0, [r7, #12]

  return ret;
 800451e:	68fb      	ldr	r3, [r7, #12]
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	460b      	mov	r3, r1
 8004532:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8004534:	f107 0208 	add.w	r2, r7, #8
 8004538:	2301      	movs	r3, #1
 800453a:	2111      	movs	r1, #17
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7ff fe22 	bl	8004186 <lps22hh_read_reg>
 8004542:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10f      	bne.n	800456a <lps22hh_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 800454a:	78fb      	ldrb	r3, [r7, #3]
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	b2da      	uxtb	r2, r3
 8004552:	7a3b      	ldrb	r3, [r7, #8]
 8004554:	f362 1304 	bfi	r3, r2, #4, #1
 8004558:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800455a:	f107 0208 	add.w	r2, r7, #8
 800455e:	2301      	movs	r3, #1
 8004560:	2111      	movs	r1, #17
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7ff fe27 	bl	80041b6 <lps22hh_write_reg>
 8004568:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800456a:	68fb      	ldr	r3, [r7, #12]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	460b      	mov	r3, r1
 800457e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8004580:	f107 0208 	add.w	r2, r7, #8
 8004584:	2301      	movs	r3, #1
 8004586:	2110      	movs	r1, #16
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7ff fdfc 	bl	8004186 <lps22hh_read_reg>
 800458e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10f      	bne.n	80045b6 <lps22hh_lp_bandwidth_set+0x42>
  {
    reg.lpfp_cfg = (uint8_t)val;
 8004596:	78fb      	ldrb	r3, [r7, #3]
 8004598:	f003 0303 	and.w	r3, r3, #3
 800459c:	b2da      	uxtb	r2, r3
 800459e:	7a3b      	ldrb	r3, [r7, #8]
 80045a0:	f362 0383 	bfi	r3, r2, #2, #2
 80045a4:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80045a6:	f107 0208 	add.w	r2, r7, #8
 80045aa:	2301      	movs	r3, #1
 80045ac:	2110      	movs	r1, #16
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7ff fe01 	bl	80041b6 <lps22hh_write_reg>
 80045b4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80045b6:	68fb      	ldr	r3, [r7, #12]
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	460b      	mov	r3, r1
 80045ca:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 80045cc:	f107 0208 	add.w	r2, r7, #8
 80045d0:	2301      	movs	r3, #1
 80045d2:	210e      	movs	r1, #14
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f7ff fdd6 	bl	8004186 <lps22hh_read_reg>
 80045da:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d118      	bne.n	8004614 <lps22hh_i3c_interface_set+0x54>
  {
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 80045e2:	78fb      	ldrb	r3, [r7, #3]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	7a3b      	ldrb	r3, [r7, #8]
 80045ec:	f362 0341 	bfi	r3, r2, #1, #1
 80045f0:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 80045f2:	78fb      	ldrb	r3, [r7, #3]
 80045f4:	091b      	lsrs	r3, r3, #4
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	7a3b      	ldrb	r3, [r7, #8]
 80045fe:	f362 13c7 	bfi	r3, r2, #7, #1
 8004602:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8004604:	f107 0208 	add.w	r2, r7, #8
 8004608:	2301      	movs	r3, #1
 800460a:	210e      	movs	r1, #14
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7ff fdd2 	bl	80041b6 <lps22hh_write_reg>
 8004612:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004614:	68fb      	ldr	r3, [r7, #12]
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
	...

08004620 <STTS751_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_RegisterBusIO(STTS751_Object_t *pObj, STTS751_IO_t *pIO)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d103      	bne.n	8004638 <STTS751_RegisterBusIO+0x18>
  {
    ret = STTS751_ERROR;
 8004630:	f04f 33ff 	mov.w	r3, #4294967295
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	e034      	b.n	80046a2 <STTS751_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	7b1a      	ldrb	r2, [r3, #12]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	695a      	ldr	r2, [r3, #20]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	699a      	ldr	r2, [r3, #24]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a0e      	ldr	r2, [pc, #56]	@ (80046ac <STTS751_RegisterBusIO+0x8c>)
 8004674:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a0d      	ldr	r2, [pc, #52]	@ (80046b0 <STTS751_RegisterBusIO+0x90>)
 800467a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	69da      	ldr	r2, [r3, #28]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d004      	beq.n	800469c <STTS751_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4798      	blx	r3
 8004698:	60f8      	str	r0, [r7, #12]
 800469a:	e002      	b.n	80046a2 <STTS751_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS751_ERROR;
 800469c:	f04f 33ff 	mov.w	r3, #4294967295
 80046a0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80046a2:	68fb      	ldr	r3, [r7, #12]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	08004b19 	.word	0x08004b19
 80046b0:	08004b87 	.word	0x08004b87

080046b4 <STTS751_Init>:
  * @brief  Initialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_Init(STTS751_Object_t *pObj)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d127      	bne.n	8004716 <STTS751_Init+0x62>
  {
    /* Disable EVENT pin of SMBus. */
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	3320      	adds	r3, #32
 80046ca:	2101      	movs	r1, #1
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 fc39 	bl	8004f44 <stts751_pin_event_route_set>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <STTS751_Init+0x2a>
    {
      return STTS751_ERROR;
 80046d8:	f04f 33ff 	mov.w	r3, #4294967295
 80046dc:	e020      	b.n	8004720 <STTS751_Init+0x6c>
    }

    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80046e4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	3320      	adds	r3, #32
 80046ea:	2103      	movs	r1, #3
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 fb9d 	bl	8004e2c <stts751_resolution_set>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <STTS751_Init+0x4a>
    {
      return STTS751_ERROR;
 80046f8:	f04f 33ff 	mov.w	r3, #4294967295
 80046fc:	e010      	b.n	8004720 <STTS751_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	3320      	adds	r3, #32
 8004702:	2180      	movs	r1, #128	@ 0x80
 8004704:	4618      	mov	r0, r3
 8004706:	f000 faba 	bl	8004c7e <stts751_temp_data_rate_set>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d002      	beq.n	8004716 <STTS751_Init+0x62>
    {
      return STTS751_ERROR;
 8004710:	f04f 33ff 	mov.w	r3, #4294967295
 8004714:	e004      	b.n	8004720 <STTS751_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS751_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <STTS751_DeInit>:
  * @brief  Deinitialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_DeInit(STTS751_Object_t *pObj)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004736:	2b01      	cmp	r3, #1
 8004738:	d108      	bne.n	800474c <STTS751_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f874 	bl	8004828 <STTS751_TEMP_Disable>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <STTS751_DeInit+0x24>
    {
      return STTS751_ERROR;
 8004746:	f04f 33ff 	mov.w	r3, #4294967295
 800474a:	e004      	b.n	8004756 <STTS751_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS751_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <STTS751_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_ReadID(STTS751_Object_t *pObj, uint8_t *Id)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b084      	sub	sp, #16
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	6039      	str	r1, [r7, #0]
  stts751_id_t buf;

  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3320      	adds	r3, #32
 800476c:	f107 020c 	add.w	r2, r7, #12
 8004770:	4611      	mov	r1, r2
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fc0c 	bl	8004f90 <stts751_device_id_get>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <STTS751_ReadID+0x26>
  {
    return STTS751_ERROR;
 800477e:	f04f 33ff 	mov.w	r3, #4294967295
 8004782:	e003      	b.n	800478c <STTS751_ReadID+0x2e>
  }

  *Id = buf.manufacturer_id;
 8004784:	7b7a      	ldrb	r2, [r7, #13]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	701a      	strb	r2, [r3, #0]

  return STTS751_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <STTS751_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS751 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2200      	movs	r2, #0
 80047a2:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	2200      	movs	r2, #0
 80047a8:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2201      	movs	r2, #1
 80047ae:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2200      	movs	r2, #0
 80047b4:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2200      	movs	r2, #0
 80047ba:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	f04f 0200 	mov.w	r2, #0
 80047c2:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 32.0f;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	f04f 4284 	mov.w	r2, #1107296256	@ 0x42000000
 80047ca:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	f04f 0200 	mov.w	r2, #0
 80047da:	615a      	str	r2, [r3, #20]
  return STTS751_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr

080047e8 <STTS751_TEMP_Enable>:
  * @brief  Enable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Enable(STTS751_Object_t *pObj)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <STTS751_TEMP_Enable+0x16>
  {
    return STTS751_OK;
 80047fa:	2300      	movs	r3, #0
 80047fc:	e010      	b.n	8004820 <STTS751_TEMP_Enable+0x38>
  }

  /* Power on the component and set the odr. */
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004802:	4619      	mov	r1, r3
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f8b5 	bl	8004974 <STTS751_TEMP_SetOutputDataRate>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <STTS751_TEMP_Enable+0x2e>
  {
    return STTS751_ERROR;
 8004810:	f04f 33ff 	mov.w	r3, #4294967295
 8004814:	e004      	b.n	8004820 <STTS751_TEMP_Enable+0x38>
  }

  pObj->temp_is_enabled = 1;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS751_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <STTS751_TEMP_Disable>:
  * @brief  Disable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Disable(STTS751_Object_t *pObj)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <STTS751_TEMP_Disable+0x16>
  {
    return STTS751_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	e01c      	b.n	8004878 <STTS751_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	3334      	adds	r3, #52	@ 0x34
 8004842:	4619      	mov	r1, r3
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 f81b 	bl	8004880 <STTS751_TEMP_GetOutputDataRate>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <STTS751_TEMP_Disable+0x2e>
  {
    return STTS751_ERROR;
 8004850:	f04f 33ff 	mov.w	r3, #4294967295
 8004854:	e010      	b.n	8004878 <STTS751_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	3320      	adds	r3, #32
 800485a:	2180      	movs	r1, #128	@ 0x80
 800485c:	4618      	mov	r0, r3
 800485e:	f000 fa0e 	bl	8004c7e <stts751_temp_data_rate_set>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d002      	beq.n	800486e <STTS751_TEMP_Disable+0x46>
  {
    return STTS751_ERROR;
 8004868:	f04f 33ff 	mov.w	r3, #4294967295
 800486c:	e004      	b.n	8004878 <STTS751_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS751_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <STTS751_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetOutputDataRate(STTS751_Object_t *pObj, float *Odr)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS751_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	60fb      	str	r3, [r7, #12]
  stts751_odr_t odr_low_level;

  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	3320      	adds	r3, #32
 8004892:	f107 020b 	add.w	r2, r7, #11
 8004896:	4611      	mov	r1, r2
 8004898:	4618      	mov	r0, r3
 800489a:	f000 fa47 	bl	8004d2c <stts751_temp_data_rate_get>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d002      	beq.n	80048aa <STTS751_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS751_ERROR;
 80048a4:	f04f 33ff 	mov.w	r3, #4294967295
 80048a8:	e060      	b.n	800496c <STTS751_TEMP_GetOutputDataRate+0xec>
  }

  switch (odr_low_level)
 80048aa:	7afb      	ldrb	r3, [r7, #11]
 80048ac:	2b90      	cmp	r3, #144	@ 0x90
 80048ae:	d021      	beq.n	80048f4 <STTS751_TEMP_GetOutputDataRate+0x74>
 80048b0:	2b90      	cmp	r3, #144	@ 0x90
 80048b2:	dc56      	bgt.n	8004962 <STTS751_TEMP_GetOutputDataRate+0xe2>
 80048b4:	2b09      	cmp	r3, #9
 80048b6:	dc1b      	bgt.n	80048f0 <STTS751_TEMP_GetOutputDataRate+0x70>
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	db52      	blt.n	8004962 <STTS751_TEMP_GetOutputDataRate+0xe2>
 80048bc:	2b09      	cmp	r3, #9
 80048be:	d850      	bhi.n	8004962 <STTS751_TEMP_GetOutputDataRate+0xe2>
 80048c0:	a201      	add	r2, pc, #4	@ (adr r2, 80048c8 <STTS751_TEMP_GetOutputDataRate+0x48>)
 80048c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c6:	bf00      	nop
 80048c8:	080048ff 	.word	0x080048ff
 80048cc:	08004909 	.word	0x08004909
 80048d0:	08004913 	.word	0x08004913
 80048d4:	0800491d 	.word	0x0800491d
 80048d8:	08004927 	.word	0x08004927
 80048dc:	08004931 	.word	0x08004931
 80048e0:	0800493b 	.word	0x0800493b
 80048e4:	08004945 	.word	0x08004945
 80048e8:	0800494f 	.word	0x0800494f
 80048ec:	08004959 	.word	0x08004959
 80048f0:	2b80      	cmp	r3, #128	@ 0x80
 80048f2:	d136      	bne.n	8004962 <STTS751_TEMP_GetOutputDataRate+0xe2>
  {
    case STTS751_TEMP_ODR_OFF:
    case STTS751_TEMP_ODR_ONE_SHOT:
      *Odr = 0.0f;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	f04f 0200 	mov.w	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]
      break;
 80048fc:	e035      	b.n	800496a <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_62mHz5:
      *Odr = 0.0625f;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	f04f 5276 	mov.w	r2, #1031798784	@ 0x3d800000
 8004904:	601a      	str	r2, [r3, #0]
      break;
 8004906:	e030      	b.n	800496a <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_125mHz:
      *Odr = 0.125f;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	f04f 5278 	mov.w	r2, #1040187392	@ 0x3e000000
 800490e:	601a      	str	r2, [r3, #0]
      break;
 8004910:	e02b      	b.n	800496a <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_250mHz:
      *Odr = 0.250f;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 8004918:	601a      	str	r2, [r3, #0]
      break;
 800491a:	e026      	b.n	800496a <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_500mHz:
      *Odr = 0.500f;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8004922:	601a      	str	r2, [r3, #0]
      break;
 8004924:	e021      	b.n	800496a <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_1Hz:
      *Odr = 1.0f;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800492c:	601a      	str	r2, [r3, #0]
      break;
 800492e:	e01c      	b.n	800496a <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_2Hz:
      *Odr = 2.0f;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004936:	601a      	str	r2, [r3, #0]
      break;
 8004938:	e017      	b.n	800496a <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_4Hz:
      *Odr = 4.0f;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8004940:	601a      	str	r2, [r3, #0]
      break;
 8004942:	e012      	b.n	800496a <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_8Hz:
      *Odr = 8.0f;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 800494a:	601a      	str	r2, [r3, #0]
      break;
 800494c:	e00d      	b.n	800496a <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_16Hz:
      *Odr = 16.0f;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	f04f 4283 	mov.w	r2, #1098907648	@ 0x41800000
 8004954:	601a      	str	r2, [r3, #0]
      break;
 8004956:	e008      	b.n	800496a <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_32Hz:
      *Odr = 32.0f;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	f04f 4284 	mov.w	r2, #1107296256	@ 0x42000000
 800495e:	601a      	str	r2, [r3, #0]
      break;
 8004960:	e003      	b.n	800496a <STTS751_TEMP_GetOutputDataRate+0xea>

    default:
      ret = STTS751_ERROR;
 8004962:	f04f 33ff 	mov.w	r3, #4294967295
 8004966:	60fb      	str	r3, [r7, #12]
      break;
 8004968:	bf00      	nop
  }

  return ret;
 800496a:	68fb      	ldr	r3, [r7, #12]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <STTS751_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_SetOutputDataRate(STTS751_Object_t *pObj, float Odr)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  stts751_odr_t new_odr;
  stts751_tres_t res;

  /* Get the current resolution */
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	3320      	adds	r3, #32
 8004982:	f107 020e 	add.w	r2, r7, #14
 8004986:	4611      	mov	r1, r2
 8004988:	4618      	mov	r0, r3
 800498a:	f000 fa75 	bl	8004e78 <stts751_resolution_get>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <STTS751_TEMP_SetOutputDataRate+0x26>
  {
    return STTS751_ERROR;
 8004994:	f04f 33ff 	mov.w	r3, #4294967295
 8004998:	e09a      	b.n	8004ad0 <STTS751_TEMP_SetOutputDataRate+0x15c>
  }

  /* If the requested odr is 16Hz we cannot use the 12 bits resolution */
  if (Odr == 16.0f && res == STTS751_12bit)
 800499a:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 800499e:	6838      	ldr	r0, [r7, #0]
 80049a0:	f7fc fb7c 	bl	800109c <__aeabi_fcmpeq>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00e      	beq.n	80049c8 <STTS751_TEMP_SetOutputDataRate+0x54>
 80049aa:	7bbb      	ldrb	r3, [r7, #14]
 80049ac:	2b03      	cmp	r3, #3
 80049ae:	d10b      	bne.n	80049c8 <STTS751_TEMP_SetOutputDataRate+0x54>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	3320      	adds	r3, #32
 80049b4:	2101      	movs	r1, #1
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 fa38 	bl	8004e2c <stts751_resolution_set>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <STTS751_TEMP_SetOutputDataRate+0x54>
    {
      return STTS751_ERROR;
 80049c2:	f04f 33ff 	mov.w	r3, #4294967295
 80049c6:	e083      	b.n	8004ad0 <STTS751_TEMP_SetOutputDataRate+0x15c>
    }
  }

  /* If the requested odr is 32Hz we cannot use the 12 bits and 11 bits resolutions */
  if (Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 80049c8:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 80049cc:	6838      	ldr	r0, [r7, #0]
 80049ce:	f7fc fb65 	bl	800109c <__aeabi_fcmpeq>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d011      	beq.n	80049fc <STTS751_TEMP_SetOutputDataRate+0x88>
 80049d8:	7bbb      	ldrb	r3, [r7, #14]
 80049da:	2b03      	cmp	r3, #3
 80049dc:	d002      	beq.n	80049e4 <STTS751_TEMP_SetOutputDataRate+0x70>
 80049de:	7bbb      	ldrb	r3, [r7, #14]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d10b      	bne.n	80049fc <STTS751_TEMP_SetOutputDataRate+0x88>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	3320      	adds	r3, #32
 80049e8:	2100      	movs	r1, #0
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 fa1e 	bl	8004e2c <stts751_resolution_set>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d002      	beq.n	80049fc <STTS751_TEMP_SetOutputDataRate+0x88>
    {
      return STTS751_ERROR;
 80049f6:	f04f 33ff 	mov.w	r3, #4294967295
 80049fa:	e069      	b.n	8004ad0 <STTS751_TEMP_SetOutputDataRate+0x15c>
    }
  }

  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 80049fc:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 8004a00:	6838      	ldr	r0, [r7, #0]
 8004a02:	f7fc fb5f 	bl	80010c4 <__aeabi_fcmple>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <STTS751_TEMP_SetOutputDataRate+0x9c>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	e050      	b.n	8004ab2 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8004a10:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8004a14:	6838      	ldr	r0, [r7, #0]
 8004a16:	f7fc fb55 	bl	80010c4 <__aeabi_fcmple>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <STTS751_TEMP_SetOutputDataRate+0xb0>
 8004a20:	2301      	movs	r3, #1
 8004a22:	e046      	b.n	8004ab2 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8004a24:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8004a28:	6838      	ldr	r0, [r7, #0]
 8004a2a:	f7fc fb4b 	bl	80010c4 <__aeabi_fcmple>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <STTS751_TEMP_SetOutputDataRate+0xc4>
 8004a34:	2302      	movs	r3, #2
 8004a36:	e03c      	b.n	8004ab2 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8004a38:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004a3c:	6838      	ldr	r0, [r7, #0]
 8004a3e:	f7fc fb41 	bl	80010c4 <__aeabi_fcmple>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <STTS751_TEMP_SetOutputDataRate+0xd8>
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e032      	b.n	8004ab2 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8004a4c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004a50:	6838      	ldr	r0, [r7, #0]
 8004a52:	f7fc fb37 	bl	80010c4 <__aeabi_fcmple>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <STTS751_TEMP_SetOutputDataRate+0xec>
 8004a5c:	2304      	movs	r3, #4
 8004a5e:	e028      	b.n	8004ab2 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8004a60:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004a64:	6838      	ldr	r0, [r7, #0]
 8004a66:	f7fc fb2d 	bl	80010c4 <__aeabi_fcmple>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <STTS751_TEMP_SetOutputDataRate+0x100>
 8004a70:	2305      	movs	r3, #5
 8004a72:	e01e      	b.n	8004ab2 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8004a74:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8004a78:	6838      	ldr	r0, [r7, #0]
 8004a7a:	f7fc fb23 	bl	80010c4 <__aeabi_fcmple>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <STTS751_TEMP_SetOutputDataRate+0x114>
 8004a84:	2306      	movs	r3, #6
 8004a86:	e014      	b.n	8004ab2 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8004a88:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8004a8c:	6838      	ldr	r0, [r7, #0]
 8004a8e:	f7fc fb19 	bl	80010c4 <__aeabi_fcmple>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <STTS751_TEMP_SetOutputDataRate+0x128>
 8004a98:	2307      	movs	r3, #7
 8004a9a:	e00a      	b.n	8004ab2 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8004a9c:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8004aa0:	6838      	ldr	r0, [r7, #0]
 8004aa2:	f7fc fb0f 	bl	80010c4 <__aeabi_fcmple>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <STTS751_TEMP_SetOutputDataRate+0x13c>
 8004aac:	2308      	movs	r3, #8
 8004aae:	e000      	b.n	8004ab2 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8004ab0:	2309      	movs	r3, #9
  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
 8004ab2:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 4.0f) ? STTS751_TEMP_ODR_4Hz
            : (Odr <= 8.0f) ? STTS751_TEMP_ODR_8Hz
            : (Odr <= 16.0f) ? STTS751_TEMP_ODR_16Hz
            :                    STTS751_TEMP_ODR_32Hz;

  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3320      	adds	r3, #32
 8004ab8:	7bfa      	ldrb	r2, [r7, #15]
 8004aba:	4611      	mov	r1, r2
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 f8de 	bl	8004c7e <stts751_temp_data_rate_set>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d002      	beq.n	8004ace <STTS751_TEMP_SetOutputDataRate+0x15a>
  {
    return STTS751_ERROR;
 8004ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8004acc:	e000      	b.n	8004ad0 <STTS751_TEMP_SetOutputDataRate+0x15c>
  }

  return STTS751_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <STTS751_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetTemperature(STTS751_Object_t *pObj, float *Value)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	3320      	adds	r3, #32
 8004ae6:	f107 020e 	add.w	r2, r7, #14
 8004aea:	4611      	mov	r1, r2
 8004aec:	4618      	mov	r0, r3
 8004aee:	f000 f9fb 	bl	8004ee8 <stts751_temperature_raw_get>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d002      	beq.n	8004afe <STTS751_TEMP_GetTemperature+0x26>
  {
    return STTS751_ERROR;
 8004af8:	f04f 33ff 	mov.w	r3, #4294967295
 8004afc:	e008      	b.n	8004b10 <STTS751_TEMP_GetTemperature+0x38>
  }

  *Value = stts751_from_lsb_to_celsius(raw_value);
 8004afe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 f8a6 	bl	8004c54 <stts751_from_lsb_to_celsius>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	601a      	str	r2, [r3, #0]

  return STTS751_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004b18:	b590      	push	{r4, r7, lr}
 8004b1a:	b089      	sub	sp, #36	@ 0x24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	607a      	str	r2, [r7, #4]
 8004b22:	461a      	mov	r2, r3
 8004b24:	460b      	mov	r3, r1
 8004b26:	72fb      	strb	r3, [r7, #11]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d11f      	bne.n	8004b7c <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	83fb      	strh	r3, [r7, #30]
 8004b40:	e018      	b.n	8004b74 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	695c      	ldr	r4, [r3, #20]
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	7b1b      	ldrb	r3, [r3, #12]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	7afb      	ldrb	r3, [r7, #11]
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	8bfb      	ldrh	r3, [r7, #30]
 8004b52:	4413      	add	r3, r2
 8004b54:	b299      	uxth	r1, r3
 8004b56:	8bfb      	ldrh	r3, [r7, #30]
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	441a      	add	r2, r3
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	47a0      	blx	r4
 8004b60:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d002      	beq.n	8004b6e <ReadRegWrap+0x56>
      {
        return STTS751_ERROR;
 8004b68:	f04f 33ff 	mov.w	r3, #4294967295
 8004b6c:	e007      	b.n	8004b7e <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8004b6e:	8bfb      	ldrh	r3, [r7, #30]
 8004b70:	3301      	adds	r3, #1
 8004b72:	83fb      	strh	r3, [r7, #30]
 8004b74:	8bfa      	ldrh	r2, [r7, #30]
 8004b76:	893b      	ldrh	r3, [r7, #8]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d3e2      	bcc.n	8004b42 <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 8004b7c:	69bb      	ldr	r3, [r7, #24]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3724      	adds	r7, #36	@ 0x24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd90      	pop	{r4, r7, pc}

08004b86 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004b86:	b590      	push	{r4, r7, lr}
 8004b88:	b089      	sub	sp, #36	@ 0x24
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	60f8      	str	r0, [r7, #12]
 8004b8e:	607a      	str	r2, [r7, #4]
 8004b90:	461a      	mov	r2, r3
 8004b92:	460b      	mov	r3, r1
 8004b94:	72fb      	strb	r3, [r7, #11]
 8004b96:	4613      	mov	r3, r2
 8004b98:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d11f      	bne.n	8004bea <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8004baa:	2300      	movs	r3, #0
 8004bac:	83fb      	strh	r3, [r7, #30]
 8004bae:	e018      	b.n	8004be2 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	691c      	ldr	r4, [r3, #16]
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	7b1b      	ldrb	r3, [r3, #12]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	7afb      	ldrb	r3, [r7, #11]
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	8bfb      	ldrh	r3, [r7, #30]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	b299      	uxth	r1, r3
 8004bc4:	8bfb      	ldrh	r3, [r7, #30]
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	441a      	add	r2, r3
 8004bca:	2301      	movs	r3, #1
 8004bcc:	47a0      	blx	r4
 8004bce:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d002      	beq.n	8004bdc <WriteRegWrap+0x56>
      {
        return STTS751_ERROR;
 8004bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8004bda:	e007      	b.n	8004bec <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8004bdc:	8bfb      	ldrh	r3, [r7, #30]
 8004bde:	3301      	adds	r3, #1
 8004be0:	83fb      	strh	r3, [r7, #30]
 8004be2:	8bfa      	ldrh	r2, [r7, #30]
 8004be4:	893b      	ldrh	r3, [r7, #8]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d3e2      	bcc.n	8004bb0 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 8004bea:	69bb      	ldr	r3, [r7, #24]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3724      	adds	r7, #36	@ 0x24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd90      	pop	{r4, r7, pc}

08004bf4 <stts751_read_reg>:
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004bf4:	b590      	push	{r4, r7, lr}
 8004bf6:	b087      	sub	sp, #28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	607a      	str	r2, [r7, #4]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	460b      	mov	r3, r1
 8004c02:	72fb      	strb	r3, [r7, #11]
 8004c04:	4613      	mov	r3, r2
 8004c06:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	685c      	ldr	r4, [r3, #4]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	68d8      	ldr	r0, [r3, #12]
 8004c10:	893b      	ldrh	r3, [r7, #8]
 8004c12:	7af9      	ldrb	r1, [r7, #11]
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	47a0      	blx	r4
 8004c18:	6178      	str	r0, [r7, #20]

  return ret;
 8004c1a:	697b      	ldr	r3, [r7, #20]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	371c      	adds	r7, #28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd90      	pop	{r4, r7, pc}

08004c24 <stts751_write_reg>:
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004c24:	b590      	push	{r4, r7, lr}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	607a      	str	r2, [r7, #4]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	460b      	mov	r3, r1
 8004c32:	72fb      	strb	r3, [r7, #11]
 8004c34:	4613      	mov	r3, r2
 8004c36:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681c      	ldr	r4, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	68d8      	ldr	r0, [r3, #12]
 8004c40:	893b      	ldrh	r3, [r7, #8]
 8004c42:	7af9      	ldrb	r1, [r7, #11]
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	47a0      	blx	r4
 8004c48:	6178      	str	r0, [r7, #20]

  return ret;
 8004c4a:	697b      	ldr	r3, [r7, #20]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	371c      	adds	r7, #28
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd90      	pop	{r4, r7, pc}

08004c54 <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts751_from_lsb_to_celsius(int16_t lsb)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) / 256.0f;
 8004c5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fc f832 	bl	8000ccc <__aeabi_i2f>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fc f934 	bl	8000edc <__aeabi_fdiv>
 8004c74:	4603      	mov	r3, r0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b086      	sub	sp, #24
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	460b      	mov	r3, r1
 8004c88:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 8004c8a:	23aa      	movs	r3, #170	@ 0xaa
 8004c8c:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8004c8e:	f107 020c 	add.w	r2, r7, #12
 8004c92:	2301      	movs	r3, #1
 8004c94:	2104      	movs	r1, #4
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7ff ffac 	bl	8004bf4 <stts751_read_reg>
 8004c9c:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10f      	bne.n	8004cc4 <stts751_temp_data_rate_set+0x46>
  {
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 8004ca4:	78fb      	ldrb	r3, [r7, #3]
 8004ca6:	f003 030f 	and.w	r3, r3, #15
 8004caa:	b2da      	uxtb	r2, r3
 8004cac:	7b3b      	ldrb	r3, [r7, #12]
 8004cae:	f362 0303 	bfi	r3, r2, #0, #4
 8004cb2:	733b      	strb	r3, [r7, #12]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 8004cb4:	f107 020c 	add.w	r2, r7, #12
 8004cb8:	2301      	movs	r3, #1
 8004cba:	2104      	movs	r1, #4
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7ff ffb1 	bl	8004c24 <stts751_write_reg>
 8004cc2:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&conversion_rate, 1);
  }

  if (ret == 0)
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d107      	bne.n	8004cda <stts751_temp_data_rate_set+0x5c>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8004cca:	f107 0210 	add.w	r2, r7, #16
 8004cce:	2301      	movs	r3, #1
 8004cd0:	2103      	movs	r1, #3
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7ff ff8e 	bl	8004bf4 <stts751_read_reg>
 8004cd8:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  if (ret == 0)
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d111      	bne.n	8004d04 <stts751_temp_data_rate_set+0x86>
  {
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 8004ce0:	78fb      	ldrb	r3, [r7, #3]
 8004ce2:	09db      	lsrs	r3, r3, #7
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	b2da      	uxtb	r2, r3
 8004cec:	7c3b      	ldrb	r3, [r7, #16]
 8004cee:	f362 1386 	bfi	r3, r2, #6, #1
 8004cf2:	743b      	strb	r3, [r7, #16]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 8004cf4:	f107 0210 	add.w	r2, r7, #16
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	2103      	movs	r1, #3
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f7ff ff91 	bl	8004c24 <stts751_write_reg>
 8004d02:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&configuration, 1);
  }

  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT))
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10a      	bne.n	8004d20 <stts751_temp_data_rate_set+0xa2>
 8004d0a:	78fb      	ldrb	r3, [r7, #3]
 8004d0c:	2b90      	cmp	r3, #144	@ 0x90
 8004d0e:	d107      	bne.n	8004d20 <stts751_temp_data_rate_set+0xa2>
  {
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 8004d10:	f107 020b 	add.w	r2, r7, #11
 8004d14:	2301      	movs	r3, #1
 8004d16:	210f      	movs	r1, #15
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7ff ff83 	bl	8004c24 <stts751_write_reg>
 8004d1e:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004d20:	697b      	ldr	r3, [r7, #20]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3718      	adds	r7, #24
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8004d36:	f107 0210 	add.w	r2, r7, #16
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	2104      	movs	r1, #4
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7ff ff58 	bl	8004bf4 <stts751_read_reg>
 8004d44:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d107      	bne.n	8004d5c <stts751_temp_data_rate_get+0x30>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8004d4c:	f107 020c 	add.w	r2, r7, #12
 8004d50:	2301      	movs	r3, #1
 8004d52:	2103      	movs	r1, #3
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7ff ff4d 	bl	8004bf4 <stts751_read_reg>
 8004d5a:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  switch ((configuration.stop << 7) + conversion_rate.conv)
 8004d5c:	7b3b      	ldrb	r3, [r7, #12]
 8004d5e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	01db      	lsls	r3, r3, #7
 8004d66:	7c3a      	ldrb	r2, [r7, #16]
 8004d68:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8004d6c:	b2d2      	uxtb	r2, r2
 8004d6e:	4413      	add	r3, r2
 8004d70:	2b90      	cmp	r3, #144	@ 0x90
 8004d72:	d025      	beq.n	8004dc0 <stts751_temp_data_rate_get+0x94>
 8004d74:	2b90      	cmp	r3, #144	@ 0x90
 8004d76:	dc4f      	bgt.n	8004e18 <stts751_temp_data_rate_get+0xec>
 8004d78:	2b09      	cmp	r3, #9
 8004d7a:	dc1b      	bgt.n	8004db4 <stts751_temp_data_rate_get+0x88>
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	db4b      	blt.n	8004e18 <stts751_temp_data_rate_get+0xec>
 8004d80:	2b09      	cmp	r3, #9
 8004d82:	d849      	bhi.n	8004e18 <stts751_temp_data_rate_get+0xec>
 8004d84:	a201      	add	r2, pc, #4	@ (adr r2, 8004d8c <stts751_temp_data_rate_get+0x60>)
 8004d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8a:	bf00      	nop
 8004d8c:	08004dc9 	.word	0x08004dc9
 8004d90:	08004dd1 	.word	0x08004dd1
 8004d94:	08004dd9 	.word	0x08004dd9
 8004d98:	08004de1 	.word	0x08004de1
 8004d9c:	08004de9 	.word	0x08004de9
 8004da0:	08004df1 	.word	0x08004df1
 8004da4:	08004df9 	.word	0x08004df9
 8004da8:	08004e01 	.word	0x08004e01
 8004dac:	08004e09 	.word	0x08004e09
 8004db0:	08004e11 	.word	0x08004e11
 8004db4:	2b80      	cmp	r3, #128	@ 0x80
 8004db6:	d12f      	bne.n	8004e18 <stts751_temp_data_rate_get+0xec>
  {
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	2280      	movs	r2, #128	@ 0x80
 8004dbc:	701a      	strb	r2, [r3, #0]
      break;
 8004dbe:	e02f      	b.n	8004e20 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	2290      	movs	r2, #144	@ 0x90
 8004dc4:	701a      	strb	r2, [r3, #0]
      break;
 8004dc6:	e02b      	b.n	8004e20 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_62mHz5:
      *val = STTS751_TEMP_ODR_62mHz5;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	701a      	strb	r2, [r3, #0]
      break;
 8004dce:	e027      	b.n	8004e20 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	701a      	strb	r2, [r3, #0]
      break;
 8004dd6:	e023      	b.n	8004e20 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	701a      	strb	r2, [r3, #0]
      break;
 8004dde:	e01f      	b.n	8004e20 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2203      	movs	r2, #3
 8004de4:	701a      	strb	r2, [r3, #0]
      break;
 8004de6:	e01b      	b.n	8004e20 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	2204      	movs	r2, #4
 8004dec:	701a      	strb	r2, [r3, #0]
      break;
 8004dee:	e017      	b.n	8004e20 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	2205      	movs	r2, #5
 8004df4:	701a      	strb	r2, [r3, #0]
      break;
 8004df6:	e013      	b.n	8004e20 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	2206      	movs	r2, #6
 8004dfc:	701a      	strb	r2, [r3, #0]
      break;
 8004dfe:	e00f      	b.n	8004e20 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	2207      	movs	r2, #7
 8004e04:	701a      	strb	r2, [r3, #0]
      break;
 8004e06:	e00b      	b.n	8004e20 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	2208      	movs	r2, #8
 8004e0c:	701a      	strb	r2, [r3, #0]
      break;
 8004e0e:	e007      	b.n	8004e20 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	2209      	movs	r2, #9
 8004e14:	701a      	strb	r2, [r3, #0]
      break;
 8004e16:	e003      	b.n	8004e20 <stts751_temp_data_rate_get+0xf4>

    default:
      *val = STTS751_TEMP_ODR_OFF;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	2280      	movs	r2, #128	@ 0x80
 8004e1c:	701a      	strb	r2, [r3, #0]
      break;
 8004e1e:	bf00      	nop
  }

  return ret;
 8004e20:	697b      	ldr	r3, [r7, #20]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3718      	adds	r7, #24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop

08004e2c <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	460b      	mov	r3, r1
 8004e36:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8004e38:	f107 0208 	add.w	r2, r7, #8
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	2103      	movs	r1, #3
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f7ff fed7 	bl	8004bf4 <stts751_read_reg>
 8004e46:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10f      	bne.n	8004e6e <stts751_resolution_set+0x42>
  {
    reg.tres = (uint8_t) val;
 8004e4e:	78fb      	ldrb	r3, [r7, #3]
 8004e50:	f003 0303 	and.w	r3, r3, #3
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	7a3b      	ldrb	r3, [r7, #8]
 8004e58:	f362 0383 	bfi	r3, r2, #2, #2
 8004e5c:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8004e5e:	f107 0208 	add.w	r2, r7, #8
 8004e62:	2301      	movs	r3, #1
 8004e64:	2103      	movs	r1, #3
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7ff fedc 	bl	8004c24 <stts751_write_reg>
 8004e6c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8004e82:	f107 0208 	add.w	r2, r7, #8
 8004e86:	2301      	movs	r3, #1
 8004e88:	2103      	movs	r1, #3
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7ff feb2 	bl	8004bf4 <stts751_read_reg>
 8004e90:	60f8      	str	r0, [r7, #12]

  switch (reg.tres)
 8004e92:	7a3b      	ldrb	r3, [r7, #8]
 8004e94:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b03      	cmp	r3, #3
 8004e9c:	d81a      	bhi.n	8004ed4 <stts751_resolution_get+0x5c>
 8004e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8004ea4 <stts751_resolution_get+0x2c>)
 8004ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea4:	08004ebd 	.word	0x08004ebd
 8004ea8:	08004ec5 	.word	0x08004ec5
 8004eac:	08004eb5 	.word	0x08004eb5
 8004eb0:	08004ecd 	.word	0x08004ecd
  {
    case STTS751_9bit:
      *val = STTS751_9bit;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	701a      	strb	r2, [r3, #0]
      break;
 8004eba:	e00f      	b.n	8004edc <stts751_resolution_get+0x64>

    case STTS751_10bit:
      *val = STTS751_10bit;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	701a      	strb	r2, [r3, #0]
      break;
 8004ec2:	e00b      	b.n	8004edc <stts751_resolution_get+0x64>

    case STTS751_11bit:
      *val = STTS751_11bit;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	701a      	strb	r2, [r3, #0]
      break;
 8004eca:	e007      	b.n	8004edc <stts751_resolution_get+0x64>

    case STTS751_12bit:
      *val = STTS751_12bit;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	2203      	movs	r2, #3
 8004ed0:	701a      	strb	r2, [r3, #0]
      break;
 8004ed2:	e003      	b.n	8004edc <stts751_resolution_get+0x64>

    default:
      *val = STTS751_9bit;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	701a      	strb	r2, [r3, #0]
      break;
 8004eda:	bf00      	nop
  }

  return ret;
 8004edc:	68fb      	ldr	r3, [r7, #12]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop

08004ee8 <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 8004ef2:	f107 0308 	add.w	r3, r7, #8
 8004ef6:	1c5a      	adds	r2, r3, #1
 8004ef8:	2301      	movs	r3, #1
 8004efa:	2100      	movs	r1, #0
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f7ff fe79 	bl	8004bf4 <stts751_read_reg>
 8004f02:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff[1], 1);

  if (ret == 0)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d117      	bne.n	8004f3a <stts751_temperature_raw_get+0x52>
  {
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 8004f0a:	f107 0208 	add.w	r2, r7, #8
 8004f0e:	2301      	movs	r3, #1
 8004f10:	2102      	movs	r1, #2
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff fe6e 	bl	8004bf4 <stts751_read_reg>
 8004f18:	60f8      	str	r0, [r7, #12]
                           &buff[0], 1);
    *val = (int16_t)buff[1];
 8004f1a:	7a7b      	ldrb	r3, [r7, #9]
 8004f1c:	b21a      	sxth	r2, r3
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256) + (int16_t)buff[0];
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	021b      	lsls	r3, r3, #8
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	7a3a      	ldrb	r2, [r7, #8]
 8004f30:	4413      	add	r3, r2
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	b21a      	sxth	r2, r3
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8004f50:	f107 0208 	add.w	r2, r7, #8
 8004f54:	2301      	movs	r3, #1
 8004f56:	2103      	movs	r1, #3
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7ff fe4b 	bl	8004bf4 <stts751_read_reg>
 8004f5e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10f      	bne.n	8004f86 <stts751_pin_event_route_set+0x42>
  {
    reg.mask1 = val;
 8004f66:	78fb      	ldrb	r3, [r7, #3]
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	b2da      	uxtb	r2, r3
 8004f6e:	7a3b      	ldrb	r3, [r7, #8]
 8004f70:	f362 13c7 	bfi	r3, r2, #7, #1
 8004f74:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8004f76:	f107 0208 	add.w	r2, r7, #8
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	2103      	movs	r1, #3
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7ff fe50 	bl	8004c24 <stts751_write_reg>
 8004f84:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004f86:	68fb      	ldr	r3, [r7, #12]
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	21fd      	movs	r1, #253	@ 0xfd
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7ff fe27 	bl	8004bf4 <stts751_read_reg>
 8004fa6:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d107      	bne.n	8004fbe <stts751_device_id_get+0x2e>
  {
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	21fe      	movs	r1, #254	@ 0xfe
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7ff fe1c 	bl	8004bf4 <stts751_read_reg>
 8004fbc:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->manufacturer_id, 1);
  }

  if (ret == 0)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d107      	bne.n	8004fd4 <stts751_device_id_get+0x44>
  {
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	1c9a      	adds	r2, r3, #2
 8004fc8:	2301      	movs	r3, #1
 8004fca:	21ff      	movs	r1, #255	@ 0xff
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7ff fe11 	bl	8004bf4 <stts751_read_reg>
 8004fd2:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <IKS01A3_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  *         - ENV_TEMPERATURE for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b08c      	sub	sp, #48	@ 0x30
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004fea:	2300      	movs	r3, #0
 8004fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t function = ENV_TEMPERATURE;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t i;
  uint32_t component_functions = 0;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	623b      	str	r3, [r7, #32]
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d07c      	beq.n	80050f6 <IKS01A3_ENV_SENSOR_Init+0x116>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	f200 80b2 	bhi.w	8005168 <IKS01A3_ENV_SENSOR_Init+0x188>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <IKS01A3_ENV_SENSOR_Init+0x32>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d039      	beq.n	8005084 <IKS01A3_ENV_SENSOR_Init+0xa4>
 8005010:	e0aa      	b.n	8005168 <IKS01A3_ENV_SENSOR_Init+0x188>
  {
#if (USE_IKS01A3_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A3_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8005012:	6838      	ldr	r0, [r7, #0]
 8005014:	f000 f934 	bl	8005280 <HTS221_0_Probe>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d002      	beq.n	8005024 <IKS01A3_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800501e:	f04f 33ff 	mov.w	r3, #4294967295
 8005022:	e0df      	b.n	80051e4 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005024:	4a71      	ldr	r2, [pc, #452]	@ (80051ec <IKS01A3_ENV_SENSOR_Init+0x20c>)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	4970      	ldr	r1, [pc, #448]	@ (80051f0 <IKS01A3_ENV_SENSOR_Init+0x210>)
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005036:	f107 0108 	add.w	r1, r7, #8
 800503a:	4610      	mov	r0, r2
 800503c:	4798      	blx	r3
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <IKS01A3_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005044:	f06f 0306 	mvn.w	r3, #6
 8005048:	e0cc      	b.n	80051e4 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800504a:	7a3b      	ldrb	r3, [r7, #8]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d103      	bne.n	8005058 <IKS01A3_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	f043 0301 	orr.w	r3, r3, #1
 8005056:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 8005058:	7abb      	ldrb	r3, [r7, #10]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d103      	bne.n	8005066 <IKS01A3_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	f043 0304 	orr.w	r3, r3, #4
 8005064:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 8005066:	7a7b      	ldrb	r3, [r7, #9]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d103      	bne.n	8005074 <IKS01A3_ENV_SENSOR_Init+0x94>
      {
        component_functions |= ENV_PRESSURE;
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	f043 0302 	orr.w	r3, r3, #2
 8005072:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 8005074:	7afb      	ldrb	r3, [r7, #11]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d17a      	bne.n	8005170 <IKS01A3_ENV_SENSOR_Init+0x190>
      {
        component_functions |= ENV_GAS;
 800507a:	6a3b      	ldr	r3, [r7, #32]
 800507c:	f043 0308 	orr.w	r3, r3, #8
 8005080:	623b      	str	r3, [r7, #32]
      }
      break;
 8005082:	e075      	b.n	8005170 <IKS01A3_ENV_SENSOR_Init+0x190>
      break;
#endif

#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
    case IKS01A3_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 8005084:	6838      	ldr	r0, [r7, #0]
 8005086:	f000 f9c5 	bl	8005414 <LPS22HH_0_Probe>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <IKS01A3_ENV_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 8005090:	f04f 33ff 	mov.w	r3, #4294967295
 8005094:	e0a6      	b.n	80051e4 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005096:	4a55      	ldr	r2, [pc, #340]	@ (80051ec <IKS01A3_ENV_SENSOR_Init+0x20c>)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	4953      	ldr	r1, [pc, #332]	@ (80051f0 <IKS01A3_ENV_SENSOR_Init+0x210>)
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80050a8:	f107 0108 	add.w	r1, r7, #8
 80050ac:	4610      	mov	r0, r2
 80050ae:	4798      	blx	r3
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d002      	beq.n	80050bc <IKS01A3_ENV_SENSOR_Init+0xdc>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80050b6:	f06f 0306 	mvn.w	r3, #6
 80050ba:	e093      	b.n	80051e4 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 80050bc:	7a3b      	ldrb	r3, [r7, #8]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d103      	bne.n	80050ca <IKS01A3_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_TEMPERATURE;
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	f043 0301 	orr.w	r3, r3, #1
 80050c8:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 80050ca:	7abb      	ldrb	r3, [r7, #10]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d103      	bne.n	80050d8 <IKS01A3_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_HUMIDITY;
 80050d0:	6a3b      	ldr	r3, [r7, #32]
 80050d2:	f043 0304 	orr.w	r3, r3, #4
 80050d6:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 80050d8:	7a7b      	ldrb	r3, [r7, #9]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d103      	bne.n	80050e6 <IKS01A3_ENV_SENSOR_Init+0x106>
      {
        component_functions |= ENV_PRESSURE;
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	f043 0302 	orr.w	r3, r3, #2
 80050e4:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 80050e6:	7afb      	ldrb	r3, [r7, #11]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d143      	bne.n	8005174 <IKS01A3_ENV_SENSOR_Init+0x194>
      {
        component_functions |= ENV_GAS;
 80050ec:	6a3b      	ldr	r3, [r7, #32]
 80050ee:	f043 0308 	orr.w	r3, r3, #8
 80050f2:	623b      	str	r3, [r7, #32]
      }
      break;
 80050f4:	e03e      	b.n	8005174 <IKS01A3_ENV_SENSOR_Init+0x194>
#endif

#if (USE_IKS01A3_ENV_SENSOR_STTS751_0 == 1)
    case IKS01A3_STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 80050f6:	6838      	ldr	r0, [r7, #0]
 80050f8:	f000 fa58 	bl	80055ac <STTS751_0_Probe>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d002      	beq.n	8005108 <IKS01A3_ENV_SENSOR_Init+0x128>
      {
        return BSP_ERROR_NO_INIT;
 8005102:	f04f 33ff 	mov.w	r3, #4294967295
 8005106:	e06d      	b.n	80051e4 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005108:	4a38      	ldr	r2, [pc, #224]	@ (80051ec <IKS01A3_ENV_SENSOR_Init+0x20c>)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	4937      	ldr	r1, [pc, #220]	@ (80051f0 <IKS01A3_ENV_SENSOR_Init+0x210>)
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800511a:	f107 0108 	add.w	r1, r7, #8
 800511e:	4610      	mov	r0, r2
 8005120:	4798      	blx	r3
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d002      	beq.n	800512e <IKS01A3_ENV_SENSOR_Init+0x14e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005128:	f06f 0306 	mvn.w	r3, #6
 800512c:	e05a      	b.n	80051e4 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800512e:	7a3b      	ldrb	r3, [r7, #8]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d103      	bne.n	800513c <IKS01A3_ENV_SENSOR_Init+0x15c>
      {
        component_functions |= ENV_TEMPERATURE;
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	f043 0301 	orr.w	r3, r3, #1
 800513a:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800513c:	7abb      	ldrb	r3, [r7, #10]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d103      	bne.n	800514a <IKS01A3_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_HUMIDITY;
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	f043 0304 	orr.w	r3, r3, #4
 8005148:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800514a:	7a7b      	ldrb	r3, [r7, #9]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d103      	bne.n	8005158 <IKS01A3_ENV_SENSOR_Init+0x178>
      {
        component_functions |= ENV_PRESSURE;
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	f043 0302 	orr.w	r3, r3, #2
 8005156:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 8005158:	7afb      	ldrb	r3, [r7, #11]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d10c      	bne.n	8005178 <IKS01A3_ENV_SENSOR_Init+0x198>
      {
        component_functions |= ENV_GAS;
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	f043 0308 	orr.w	r3, r3, #8
 8005164:	623b      	str	r3, [r7, #32]
      }
      break;
 8005166:	e007      	b.n	8005178 <IKS01A3_ENV_SENSOR_Init+0x198>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005168:	f06f 0301 	mvn.w	r3, #1
 800516c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800516e:	e004      	b.n	800517a <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 8005170:	bf00      	nop
 8005172:	e002      	b.n	800517a <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 8005174:	bf00      	nop
 8005176:	e000      	b.n	800517a <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 8005178:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800517a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <IKS01A3_ENV_SENSOR_Init+0x1a4>
  {
    return ret;
 8005180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005182:	e02f      	b.n	80051e4 <IKS01A3_ENV_SENSOR_Init+0x204>
  }

  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8005184:	2300      	movs	r3, #0
 8005186:	627b      	str	r3, [r7, #36]	@ 0x24
 8005188:	e028      	b.n	80051dc <IKS01A3_ENV_SENSOR_Init+0x1fc>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800518e:	4013      	ands	r3, r2
 8005190:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005192:	429a      	cmp	r2, r3
 8005194:	d11c      	bne.n	80051d0 <IKS01A3_ENV_SENSOR_Init+0x1f0>
 8005196:	6a3a      	ldr	r2, [r7, #32]
 8005198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800519a:	4013      	ands	r3, r2
 800519c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800519e:	429a      	cmp	r2, r3
 80051a0:	d116      	bne.n	80051d0 <IKS01A3_ENV_SENSOR_Init+0x1f0>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80051a2:	4a14      	ldr	r2, [pc, #80]	@ (80051f4 <IKS01A3_ENV_SENSOR_Init+0x214>)
 80051a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051aa:	4913      	ldr	r1, [pc, #76]	@ (80051f8 <IKS01A3_ENV_SENSOR_Init+0x218>)
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	0092      	lsls	r2, r2, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	490d      	ldr	r1, [pc, #52]	@ (80051f0 <IKS01A3_ENV_SENSOR_Init+0x210>)
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80051c0:	4610      	mov	r0, r2
 80051c2:	4798      	blx	r3
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d002      	beq.n	80051d0 <IKS01A3_ENV_SENSOR_Init+0x1f0>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80051ca:	f06f 0304 	mvn.w	r3, #4
 80051ce:	e009      	b.n	80051e4 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
    }

    function = function << 1;
 80051d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 80051d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d8:	3301      	adds	r3, #1
 80051da:	627b      	str	r3, [r7, #36]	@ 0x24
 80051dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051de:	2b03      	cmp	r3, #3
 80051e0:	d9d3      	bls.n	800518a <IKS01A3_ENV_SENSOR_Init+0x1aa>
  }

  return ret;
 80051e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3730      	adds	r7, #48	@ 0x30
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	200004b0 	.word	0x200004b0
 80051f0:	20000474 	.word	0x20000474
 80051f4:	200000a8 	.word	0x200000a8
 80051f8:	20000480 	.word	0x20000480

080051fc <IKS01A3_ENV_SENSOR_GetValue>:
  * @param  Function Environmental sensor function
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2b02      	cmp	r3, #2
 800520c:	d903      	bls.n	8005216 <IKS01A3_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800520e:	f06f 0301 	mvn.w	r3, #1
 8005212:	617b      	str	r3, [r7, #20]
 8005214:	e027      	b.n	8005266 <IKS01A3_ENV_SENSOR_GetValue+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8005216:	4a16      	ldr	r2, [pc, #88]	@ (8005270 <IKS01A3_ENV_SENSOR_GetValue+0x74>)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	4013      	ands	r3, r2
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	429a      	cmp	r2, r3
 8005226:	d11b      	bne.n	8005260 <IKS01A3_ENV_SENSOR_GetValue+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8005228:	4a12      	ldr	r2, [pc, #72]	@ (8005274 <IKS01A3_ENV_SENSOR_GetValue+0x78>)
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005230:	4911      	ldr	r1, [pc, #68]	@ (8005278 <IKS01A3_ENV_SENSOR_GetValue+0x7c>)
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	0092      	lsls	r2, r2, #2
 8005236:	4413      	add	r3, r2
 8005238:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	490f      	ldr	r1, [pc, #60]	@ (800527c <IKS01A3_ENV_SENSOR_GetValue+0x80>)
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005246:	6879      	ldr	r1, [r7, #4]
 8005248:	4610      	mov	r0, r2
 800524a:	4798      	blx	r3
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d003      	beq.n	800525a <IKS01A3_ENV_SENSOR_GetValue+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005252:	f06f 0304 	mvn.w	r3, #4
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	e005      	b.n	8005266 <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800525a:	2300      	movs	r3, #0
 800525c:	617b      	str	r3, [r7, #20]
 800525e:	e002      	b.n	8005266 <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005260:	f06f 0301 	mvn.w	r3, #1
 8005264:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005266:	697b      	ldr	r3, [r7, #20]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3718      	adds	r7, #24
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	200004bc 	.word	0x200004bc
 8005274:	200000a8 	.word	0x200000a8
 8005278:	20000480 	.word	0x20000480
 800527c:	20000474 	.word	0x20000474

08005280 <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b092      	sub	sp, #72	@ 0x48
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 8005288:	2300      	movs	r3, #0
 800528a:	647b      	str	r3, [r7, #68]	@ 0x44
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 800528c:	2300      	movs	r3, #0
 800528e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8005290:	23bf      	movs	r3, #191	@ 0xbf
 8005292:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 8005296:	4b51      	ldr	r3, [pc, #324]	@ (80053dc <HTS221_0_Probe+0x15c>)
 8005298:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800529a:	4b51      	ldr	r3, [pc, #324]	@ (80053e0 <HTS221_0_Probe+0x160>)
 800529c:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800529e:	4b51      	ldr	r3, [pc, #324]	@ (80053e4 <HTS221_0_Probe+0x164>)
 80052a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80052a2:	4b51      	ldr	r3, [pc, #324]	@ (80053e8 <HTS221_0_Probe+0x168>)
 80052a4:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 80052a6:	4b51      	ldr	r3, [pc, #324]	@ (80053ec <HTS221_0_Probe+0x16c>)
 80052a8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 80052aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80052ae:	4619      	mov	r1, r3
 80052b0:	484f      	ldr	r0, [pc, #316]	@ (80053f0 <HTS221_0_Probe+0x170>)
 80052b2:	f7fd fd57 	bl	8002d64 <HTS221_RegisterBusIO>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d003      	beq.n	80052c4 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80052bc:	f06f 0306 	mvn.w	r3, #6
 80052c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80052c2:	e085      	b.n	80053d0 <HTS221_0_Probe+0x150>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 80052c4:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 80052c8:	4619      	mov	r1, r3
 80052ca:	4849      	ldr	r0, [pc, #292]	@ (80053f0 <HTS221_0_Probe+0x170>)
 80052cc:	f7fd fdd3 	bl	8002e76 <HTS221_ReadID>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80052d6:	f06f 0306 	mvn.w	r3, #6
 80052da:	647b      	str	r3, [r7, #68]	@ 0x44
 80052dc:	e078      	b.n	80053d0 <HTS221_0_Probe+0x150>
  }
  else if (id != HTS221_ID)
 80052de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80052e2:	2bbc      	cmp	r3, #188	@ 0xbc
 80052e4:	d003      	beq.n	80052ee <HTS221_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80052e6:	f06f 0306 	mvn.w	r3, #6
 80052ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80052ec:	e070      	b.n	80053d0 <HTS221_0_Probe+0x150>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 80052ee:	f107 0308 	add.w	r3, r7, #8
 80052f2:	4619      	mov	r1, r3
 80052f4:	483e      	ldr	r0, [pc, #248]	@ (80053f0 <HTS221_0_Probe+0x170>)
 80052f6:	f7fd fdd5 	bl	8002ea4 <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 80052fa:	7a3b      	ldrb	r3, [r7, #8]
 80052fc:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 80052fe:	7a7b      	ldrb	r3, [r7, #9]
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 8005304:	7abb      	ldrb	r3, [r7, #10]
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 800530a:	7afb      	ldrb	r3, [r7, #11]
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 8005310:	4a38      	ldr	r2, [pc, #224]	@ (80053f4 <HTS221_0_Probe+0x174>)
 8005312:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 8005314:	4b38      	ldr	r3, [pc, #224]	@ (80053f8 <HTS221_0_Probe+0x178>)
 8005316:	4a36      	ldr	r2, [pc, #216]	@ (80053f0 <HTS221_0_Probe+0x170>)
 8005318:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 800531a:	4b38      	ldr	r3, [pc, #224]	@ (80053fc <HTS221_0_Probe+0x17c>)
 800531c:	4a38      	ldr	r2, [pc, #224]	@ (8005400 <HTS221_0_Probe+0x180>)
 800531e:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8005320:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005322:	2b00      	cmp	r3, #0
 8005324:	d11d      	bne.n	8005362 <HTS221_0_Probe+0xe2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	2b00      	cmp	r3, #0
 800532e:	d018      	beq.n	8005362 <HTS221_0_Probe+0xe2>
 8005330:	7a3b      	ldrb	r3, [r7, #8]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d115      	bne.n	8005362 <HTS221_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8005336:	4b33      	ldr	r3, [pc, #204]	@ (8005404 <HTS221_0_Probe+0x184>)
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	4a33      	ldr	r2, [pc, #204]	@ (8005408 <HTS221_0_Probe+0x188>)
 800533c:	4933      	ldr	r1, [pc, #204]	@ (800540c <HTS221_0_Probe+0x18c>)
 800533e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8005342:	4b2e      	ldr	r3, [pc, #184]	@ (80053fc <HTS221_0_Probe+0x17c>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a2b      	ldr	r2, [pc, #172]	@ (80053f8 <HTS221_0_Probe+0x178>)
 800534a:	6812      	ldr	r2, [r2, #0]
 800534c:	4610      	mov	r0, r2
 800534e:	4798      	blx	r3
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <HTS221_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005356:	f06f 0304 	mvn.w	r3, #4
 800535a:	647b      	str	r3, [r7, #68]	@ 0x44
 800535c:	e001      	b.n	8005362 <HTS221_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800535e:	2300      	movs	r3, #0
 8005360:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8005362:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005364:	2b00      	cmp	r3, #0
 8005366:	d11d      	bne.n	80053a4 <HTS221_0_Probe+0x124>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f003 0304 	and.w	r3, r3, #4
 800536e:	2b00      	cmp	r3, #0
 8005370:	d018      	beq.n	80053a4 <HTS221_0_Probe+0x124>
 8005372:	7abb      	ldrb	r3, [r7, #10]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d115      	bne.n	80053a4 <HTS221_0_Probe+0x124>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8005378:	4b22      	ldr	r3, [pc, #136]	@ (8005404 <HTS221_0_Probe+0x184>)
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	4a22      	ldr	r2, [pc, #136]	@ (8005408 <HTS221_0_Probe+0x188>)
 800537e:	4924      	ldr	r1, [pc, #144]	@ (8005410 <HTS221_0_Probe+0x190>)
 8005380:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8005384:	4b1d      	ldr	r3, [pc, #116]	@ (80053fc <HTS221_0_Probe+0x17c>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a1b      	ldr	r2, [pc, #108]	@ (80053f8 <HTS221_0_Probe+0x178>)
 800538c:	6812      	ldr	r2, [r2, #0]
 800538e:	4610      	mov	r0, r2
 8005390:	4798      	blx	r3
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d003      	beq.n	80053a0 <HTS221_0_Probe+0x120>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005398:	f06f 0304 	mvn.w	r3, #4
 800539c:	647b      	str	r3, [r7, #68]	@ 0x44
 800539e:	e001      	b.n	80053a4 <HTS221_0_Probe+0x124>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80053a0:	2300      	movs	r3, #0
 80053a2:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 80053a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d107      	bne.n	80053ba <HTS221_0_Probe+0x13a>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d002      	beq.n	80053ba <HTS221_0_Probe+0x13a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80053b4:	f06f 0304 	mvn.w	r3, #4
 80053b8:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 80053ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d107      	bne.n	80053d0 <HTS221_0_Probe+0x150>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f003 0308 	and.w	r3, r3, #8
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d002      	beq.n	80053d0 <HTS221_0_Probe+0x150>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80053ca:	f06f 0304 	mvn.w	r3, #4
 80053ce:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 80053d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3748      	adds	r7, #72	@ 0x48
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	080028d1 	.word	0x080028d1
 80053e0:	08002935 	.word	0x08002935
 80053e4:	080029e9 	.word	0x080029e9
 80053e8:	08002985 	.word	0x08002985
 80053ec:	08002a4d 	.word	0x08002a4d
 80053f0:	200004c8 	.word	0x200004c8
 80053f4:	200004bc 	.word	0x200004bc
 80053f8:	20000474 	.word	0x20000474
 80053fc:	200004b0 	.word	0x200004b0
 8005400:	20000014 	.word	0x20000014
 8005404:	200000a8 	.word	0x200000a8
 8005408:	20000480 	.word	0x20000480
 800540c:	20000038 	.word	0x20000038
 8005410:	20000024 	.word	0x20000024

08005414 <LPS22HH_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b092      	sub	sp, #72	@ 0x48
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800541c:	2300      	movs	r3, #0
 800541e:	647b      	str	r3, [r7, #68]	@ 0x44
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 8005420:	2300      	movs	r3, #0
 8005422:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 8005424:	23bb      	movs	r3, #187	@ 0xbb
 8005426:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 800542a:	4b52      	ldr	r3, [pc, #328]	@ (8005574 <LPS22HH_0_Probe+0x160>)
 800542c:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800542e:	4b52      	ldr	r3, [pc, #328]	@ (8005578 <LPS22HH_0_Probe+0x164>)
 8005430:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8005432:	4b52      	ldr	r3, [pc, #328]	@ (800557c <LPS22HH_0_Probe+0x168>)
 8005434:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8005436:	4b52      	ldr	r3, [pc, #328]	@ (8005580 <LPS22HH_0_Probe+0x16c>)
 8005438:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 800543a:	4b52      	ldr	r3, [pc, #328]	@ (8005584 <LPS22HH_0_Probe+0x170>)
 800543c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 800543e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005442:	4619      	mov	r1, r3
 8005444:	4850      	ldr	r0, [pc, #320]	@ (8005588 <LPS22HH_0_Probe+0x174>)
 8005446:	f7fe faad 	bl	80039a4 <LPS22HH_RegisterBusIO>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005450:	f06f 0306 	mvn.w	r3, #6
 8005454:	647b      	str	r3, [r7, #68]	@ 0x44
 8005456:	e087      	b.n	8005568 <LPS22HH_0_Probe+0x154>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 8005458:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800545c:	4619      	mov	r1, r3
 800545e:	484a      	ldr	r0, [pc, #296]	@ (8005588 <LPS22HH_0_Probe+0x174>)
 8005460:	f7fe fb49 	bl	8003af6 <LPS22HH_ReadID>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800546a:	f06f 0306 	mvn.w	r3, #6
 800546e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005470:	e07a      	b.n	8005568 <LPS22HH_0_Probe+0x154>
  }
  else if (id != LPS22HH_ID)
 8005472:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005476:	2bb3      	cmp	r3, #179	@ 0xb3
 8005478:	d003      	beq.n	8005482 <LPS22HH_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800547a:	f06f 0306 	mvn.w	r3, #6
 800547e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005480:	e072      	b.n	8005568 <LPS22HH_0_Probe+0x154>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 8005482:	f107 0308 	add.w	r3, r7, #8
 8005486:	4619      	mov	r1, r3
 8005488:	483f      	ldr	r0, [pc, #252]	@ (8005588 <LPS22HH_0_Probe+0x174>)
 800548a:	f7fe fb4b 	bl	8003b24 <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 800548e:	7a3b      	ldrb	r3, [r7, #8]
 8005490:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 8005492:	7a7b      	ldrb	r3, [r7, #9]
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 8005498:	7abb      	ldrb	r3, [r7, #10]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 800549e:	7afb      	ldrb	r3, [r7, #11]
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 80054a4:	4a39      	ldr	r2, [pc, #228]	@ (800558c <LPS22HH_0_Probe+0x178>)
 80054a6:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 80054a8:	4b39      	ldr	r3, [pc, #228]	@ (8005590 <LPS22HH_0_Probe+0x17c>)
 80054aa:	4a37      	ldr	r2, [pc, #220]	@ (8005588 <LPS22HH_0_Probe+0x174>)
 80054ac:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 80054ae:	4b39      	ldr	r3, [pc, #228]	@ (8005594 <LPS22HH_0_Probe+0x180>)
 80054b0:	4a39      	ldr	r2, [pc, #228]	@ (8005598 <LPS22HH_0_Probe+0x184>)
 80054b2:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80054b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d11e      	bne.n	80054f8 <LPS22HH_0_Probe+0xe4>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d019      	beq.n	80054f8 <LPS22HH_0_Probe+0xe4>
 80054c4:	7a3b      	ldrb	r3, [r7, #8]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d116      	bne.n	80054f8 <LPS22HH_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 80054ca:	4b34      	ldr	r3, [pc, #208]	@ (800559c <LPS22HH_0_Probe+0x188>)
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	4a34      	ldr	r2, [pc, #208]	@ (80055a0 <LPS22HH_0_Probe+0x18c>)
 80054d0:	3304      	adds	r3, #4
 80054d2:	4934      	ldr	r1, [pc, #208]	@ (80055a4 <LPS22HH_0_Probe+0x190>)
 80054d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 80054d8:	4b2e      	ldr	r3, [pc, #184]	@ (8005594 <LPS22HH_0_Probe+0x180>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a2c      	ldr	r2, [pc, #176]	@ (8005590 <LPS22HH_0_Probe+0x17c>)
 80054e0:	6852      	ldr	r2, [r2, #4]
 80054e2:	4610      	mov	r0, r2
 80054e4:	4798      	blx	r3
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <LPS22HH_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80054ec:	f06f 0304 	mvn.w	r3, #4
 80054f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80054f2:	e001      	b.n	80054f8 <LPS22HH_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80054f4:	2300      	movs	r3, #0
 80054f6:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 80054f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d11e      	bne.n	800553c <LPS22HH_0_Probe+0x128>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d019      	beq.n	800553c <LPS22HH_0_Probe+0x128>
 8005508:	7a7b      	ldrb	r3, [r7, #9]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d116      	bne.n	800553c <LPS22HH_0_Probe+0x128>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 800550e:	4b23      	ldr	r3, [pc, #140]	@ (800559c <LPS22HH_0_Probe+0x188>)
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	4a23      	ldr	r2, [pc, #140]	@ (80055a0 <LPS22HH_0_Probe+0x18c>)
 8005514:	3304      	adds	r3, #4
 8005516:	4924      	ldr	r1, [pc, #144]	@ (80055a8 <LPS22HH_0_Probe+0x194>)
 8005518:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 800551c:	4b1d      	ldr	r3, [pc, #116]	@ (8005594 <LPS22HH_0_Probe+0x180>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a1b      	ldr	r2, [pc, #108]	@ (8005590 <LPS22HH_0_Probe+0x17c>)
 8005524:	6852      	ldr	r2, [r2, #4]
 8005526:	4610      	mov	r0, r2
 8005528:	4798      	blx	r3
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d003      	beq.n	8005538 <LPS22HH_0_Probe+0x124>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005530:	f06f 0304 	mvn.w	r3, #4
 8005534:	647b      	str	r3, [r7, #68]	@ 0x44
 8005536:	e001      	b.n	800553c <LPS22HH_0_Probe+0x128>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005538:	2300      	movs	r3, #0
 800553a:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800553c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800553e:	2b00      	cmp	r3, #0
 8005540:	d107      	bne.n	8005552 <LPS22HH_0_Probe+0x13e>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f003 0304 	and.w	r3, r3, #4
 8005548:	2b00      	cmp	r3, #0
 800554a:	d002      	beq.n	8005552 <LPS22HH_0_Probe+0x13e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800554c:	f06f 0304 	mvn.w	r3, #4
 8005550:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 8005552:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005554:	2b00      	cmp	r3, #0
 8005556:	d107      	bne.n	8005568 <LPS22HH_0_Probe+0x154>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f003 0308 	and.w	r3, r3, #8
 800555e:	2b00      	cmp	r3, #0
 8005560:	d002      	beq.n	8005568 <LPS22HH_0_Probe+0x154>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005562:	f06f 0304 	mvn.w	r3, #4
 8005566:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }
  return ret;
 8005568:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800556a:	4618      	mov	r0, r3
 800556c:	3748      	adds	r7, #72	@ 0x48
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	080028d1 	.word	0x080028d1
 8005578:	08002935 	.word	0x08002935
 800557c:	080029e9 	.word	0x080029e9
 8005580:	08002985 	.word	0x08002985
 8005584:	08002a4d 	.word	0x08002a4d
 8005588:	200004fc 	.word	0x200004fc
 800558c:	200004bc 	.word	0x200004bc
 8005590:	20000474 	.word	0x20000474
 8005594:	200004b0 	.word	0x200004b0
 8005598:	2000004c 	.word	0x2000004c
 800559c:	200000a8 	.word	0x200000a8
 80055a0:	20000480 	.word	0x20000480
 80055a4:	20000070 	.word	0x20000070
 80055a8:	2000005c 	.word	0x2000005c

080055ac <STTS751_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b092      	sub	sp, #72	@ 0x48
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 80055b4:	2300      	movs	r3, #0
 80055b6:	647b      	str	r3, [r7, #68]	@ 0x44
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 80055b8:	2300      	movs	r3, #0
 80055ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 80055bc:	2395      	movs	r3, #149	@ 0x95
 80055be:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 80055c2:	4b46      	ldr	r3, [pc, #280]	@ (80056dc <STTS751_0_Probe+0x130>)
 80055c4:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80055c6:	4b46      	ldr	r3, [pc, #280]	@ (80056e0 <STTS751_0_Probe+0x134>)
 80055c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80055ca:	4b46      	ldr	r3, [pc, #280]	@ (80056e4 <STTS751_0_Probe+0x138>)
 80055cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80055ce:	4b46      	ldr	r3, [pc, #280]	@ (80056e8 <STTS751_0_Probe+0x13c>)
 80055d0:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 80055d2:	4b46      	ldr	r3, [pc, #280]	@ (80056ec <STTS751_0_Probe+0x140>)
 80055d4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 80055d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055da:	4619      	mov	r1, r3
 80055dc:	4844      	ldr	r0, [pc, #272]	@ (80056f0 <STTS751_0_Probe+0x144>)
 80055de:	f7ff f81f 	bl	8004620 <STTS751_RegisterBusIO>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d003      	beq.n	80055f0 <STTS751_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80055e8:	f06f 0306 	mvn.w	r3, #6
 80055ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80055ee:	e070      	b.n	80056d2 <STTS751_0_Probe+0x126>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 80055f0:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 80055f4:	4619      	mov	r1, r3
 80055f6:	483e      	ldr	r0, [pc, #248]	@ (80056f0 <STTS751_0_Probe+0x144>)
 80055f8:	f7ff f8b1 	bl	800475e <STTS751_ReadID>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <STTS751_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005602:	f06f 0306 	mvn.w	r3, #6
 8005606:	647b      	str	r3, [r7, #68]	@ 0x44
 8005608:	e063      	b.n	80056d2 <STTS751_0_Probe+0x126>
  }
  else if (id != STTS751_ID_MAN)
 800560a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800560e:	2b53      	cmp	r3, #83	@ 0x53
 8005610:	d003      	beq.n	800561a <STTS751_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005612:	f06f 0306 	mvn.w	r3, #6
 8005616:	647b      	str	r3, [r7, #68]	@ 0x44
 8005618:	e05b      	b.n	80056d2 <STTS751_0_Probe+0x126>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 800561a:	f107 0308 	add.w	r3, r7, #8
 800561e:	4619      	mov	r1, r3
 8005620:	4833      	ldr	r0, [pc, #204]	@ (80056f0 <STTS751_0_Probe+0x144>)
 8005622:	f7ff f8b7 	bl	8004794 <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 8005626:	7a3b      	ldrb	r3, [r7, #8]
 8005628:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 800562a:	7a7b      	ldrb	r3, [r7, #9]
 800562c:	005b      	lsls	r3, r3, #1
 800562e:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 8005630:	7abb      	ldrb	r3, [r7, #10]
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 8005636:	7afb      	ldrb	r3, [r7, #11]
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 800563c:	4a2d      	ldr	r2, [pc, #180]	@ (80056f4 <STTS751_0_Probe+0x148>)
 800563e:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 8005640:	4b2d      	ldr	r3, [pc, #180]	@ (80056f8 <STTS751_0_Probe+0x14c>)
 8005642:	4a2b      	ldr	r2, [pc, #172]	@ (80056f0 <STTS751_0_Probe+0x144>)
 8005644:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 8005646:	4b2d      	ldr	r3, [pc, #180]	@ (80056fc <STTS751_0_Probe+0x150>)
 8005648:	4a2d      	ldr	r2, [pc, #180]	@ (8005700 <STTS751_0_Probe+0x154>)
 800564a:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800564c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800564e:	2b00      	cmp	r3, #0
 8005650:	d11e      	bne.n	8005690 <STTS751_0_Probe+0xe4>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b00      	cmp	r3, #0
 800565a:	d019      	beq.n	8005690 <STTS751_0_Probe+0xe4>
 800565c:	7a3b      	ldrb	r3, [r7, #8]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d116      	bne.n	8005690 <STTS751_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 8005662:	4b28      	ldr	r3, [pc, #160]	@ (8005704 <STTS751_0_Probe+0x158>)
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	4a28      	ldr	r2, [pc, #160]	@ (8005708 <STTS751_0_Probe+0x15c>)
 8005668:	3308      	adds	r3, #8
 800566a:	4928      	ldr	r1, [pc, #160]	@ (800570c <STTS751_0_Probe+0x160>)
 800566c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 8005670:	4b22      	ldr	r3, [pc, #136]	@ (80056fc <STTS751_0_Probe+0x150>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a20      	ldr	r2, [pc, #128]	@ (80056f8 <STTS751_0_Probe+0x14c>)
 8005678:	6892      	ldr	r2, [r2, #8]
 800567a:	4610      	mov	r0, r2
 800567c:	4798      	blx	r3
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d003      	beq.n	800568c <STTS751_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005684:	f06f 0304 	mvn.w	r3, #4
 8005688:	647b      	str	r3, [r7, #68]	@ 0x44
 800568a:	e001      	b.n	8005690 <STTS751_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800568c:	2300      	movs	r3, #0
 800568e:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8005690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005692:	2b00      	cmp	r3, #0
 8005694:	d107      	bne.n	80056a6 <STTS751_0_Probe+0xfa>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	d002      	beq.n	80056a6 <STTS751_0_Probe+0xfa>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80056a0:	f06f 0304 	mvn.w	r3, #4
 80056a4:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 80056a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d107      	bne.n	80056bc <STTS751_0_Probe+0x110>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d002      	beq.n	80056bc <STTS751_0_Probe+0x110>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80056b6:	f06f 0304 	mvn.w	r3, #4
 80056ba:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 80056bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d107      	bne.n	80056d2 <STTS751_0_Probe+0x126>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f003 0308 	and.w	r3, r3, #8
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d002      	beq.n	80056d2 <STTS751_0_Probe+0x126>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80056cc:	f06f 0304 	mvn.w	r3, #4
 80056d0:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }
  return ret;
 80056d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3748      	adds	r7, #72	@ 0x48
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	080028d1 	.word	0x080028d1
 80056e0:	08002935 	.word	0x08002935
 80056e4:	080029e9 	.word	0x080029e9
 80056e8:	08002985 	.word	0x08002985
 80056ec:	08002a4d 	.word	0x08002a4d
 80056f0:	20000530 	.word	0x20000530
 80056f4:	200004bc 	.word	0x200004bc
 80056f8:	20000474 	.word	0x20000474
 80056fc:	200004b0 	.word	0x200004b0
 8005700:	20000084 	.word	0x20000084
 8005704:	200000a8 	.word	0x200000a8
 8005708:	20000480 	.word	0x20000480
 800570c:	20000094 	.word	0x20000094

08005710 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800571a:	2003      	movs	r0, #3
 800571c:	f000 ff4c 	bl	80065b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005720:	2000      	movs	r0, #0
 8005722:	f000 f80d 	bl	8005740 <HAL_InitTick>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d002      	beq.n	8005732 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	71fb      	strb	r3, [r7, #7]
 8005730:	e001      	b.n	8005736 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005732:	f7fc fe83 	bl	800243c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005736:	79fb      	ldrb	r3, [r7, #7]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005748:	2300      	movs	r3, #0
 800574a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800574c:	4b16      	ldr	r3, [pc, #88]	@ (80057a8 <HAL_InitTick+0x68>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d022      	beq.n	800579a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005754:	4b15      	ldr	r3, [pc, #84]	@ (80057ac <HAL_InitTick+0x6c>)
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	4b13      	ldr	r3, [pc, #76]	@ (80057a8 <HAL_InitTick+0x68>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005760:	fbb1 f3f3 	udiv	r3, r1, r3
 8005764:	fbb2 f3f3 	udiv	r3, r2, r3
 8005768:	4618      	mov	r0, r3
 800576a:	f000 ff5a 	bl	8006622 <HAL_SYSTICK_Config>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10f      	bne.n	8005794 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b0f      	cmp	r3, #15
 8005778:	d809      	bhi.n	800578e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800577a:	2200      	movs	r2, #0
 800577c:	6879      	ldr	r1, [r7, #4]
 800577e:	f04f 30ff 	mov.w	r0, #4294967295
 8005782:	f000 ff24 	bl	80065ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005786:	4a0a      	ldr	r2, [pc, #40]	@ (80057b0 <HAL_InitTick+0x70>)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6013      	str	r3, [r2, #0]
 800578c:	e007      	b.n	800579e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	73fb      	strb	r3, [r7, #15]
 8005792:	e004      	b.n	800579e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	73fb      	strb	r3, [r7, #15]
 8005798:	e001      	b.n	800579e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800579e:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	200000d0 	.word	0x200000d0
 80057ac:	20000010 	.word	0x20000010
 80057b0:	200000cc 	.word	0x200000cc

080057b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057b4:	b480      	push	{r7}
 80057b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80057b8:	4b05      	ldr	r3, [pc, #20]	@ (80057d0 <HAL_IncTick+0x1c>)
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	4b05      	ldr	r3, [pc, #20]	@ (80057d4 <HAL_IncTick+0x20>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4413      	add	r3, r2
 80057c2:	4a03      	ldr	r2, [pc, #12]	@ (80057d0 <HAL_IncTick+0x1c>)
 80057c4:	6013      	str	r3, [r2, #0]
}
 80057c6:	bf00      	nop
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bc80      	pop	{r7}
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	20000568 	.word	0x20000568
 80057d4:	200000d0 	.word	0x200000d0

080057d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80057d8:	b480      	push	{r7}
 80057da:	af00      	add	r7, sp, #0
  return uwTick;
 80057dc:	4b02      	ldr	r3, [pc, #8]	@ (80057e8 <HAL_GetTick+0x10>)
 80057de:	681b      	ldr	r3, [r3, #0]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bc80      	pop	{r7}
 80057e6:	4770      	bx	lr
 80057e8:	20000568 	.word	0x20000568

080057ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80057f4:	f7ff fff0 	bl	80057d8 <HAL_GetTick>
 80057f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005804:	d004      	beq.n	8005810 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005806:	4b09      	ldr	r3, [pc, #36]	@ (800582c <HAL_Delay+0x40>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	4413      	add	r3, r2
 800580e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005810:	bf00      	nop
 8005812:	f7ff ffe1 	bl	80057d8 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	429a      	cmp	r2, r3
 8005820:	d8f7      	bhi.n	8005812 <HAL_Delay+0x26>
  {
  }
}
 8005822:	bf00      	nop
 8005824:	bf00      	nop
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	200000d0 	.word	0x200000d0

08005830 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b08e      	sub	sp, #56	@ 0x38
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005838:	2300      	movs	r3, #0
 800583a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t tmp_cr1 = 0;
 800583e:	2300      	movs	r3, #0
 8005840:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tmp_cr2 = 0;
 8005842:	2300      	movs	r3, #0
 8005844:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e127      	b.n	8005aa0 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800585a:	2b00      	cmp	r3, #0
 800585c:	d115      	bne.n	800588a <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800586c:	4b8e      	ldr	r3, [pc, #568]	@ (8005aa8 <HAL_ADC_Init+0x278>)
 800586e:	6a1b      	ldr	r3, [r3, #32]
 8005870:	4a8d      	ldr	r2, [pc, #564]	@ (8005aa8 <HAL_ADC_Init+0x278>)
 8005872:	f043 0301 	orr.w	r3, r3, #1
 8005876:	6213      	str	r3, [r2, #32]
 8005878:	4b8b      	ldr	r3, [pc, #556]	@ (8005aa8 <HAL_ADC_Init+0x278>)
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	60bb      	str	r3, [r7, #8]
 8005882:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7fc fe09 	bl	800249c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800588e:	f003 0310 	and.w	r3, r3, #16
 8005892:	2b00      	cmp	r3, #0
 8005894:	f040 80ff 	bne.w	8005a96 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800589c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80058a0:	f023 0302 	bic.w	r3, r3, #2
 80058a4:	f043 0202 	orr.w	r2, r3, #2
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80058ac:	4b7f      	ldr	r3, [pc, #508]	@ (8005aac <HAL_ADC_Init+0x27c>)
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	497c      	ldr	r1, [pc, #496]	@ (8005aac <HAL_ADC_Init+0x27c>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80058c6:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058ce:	4619      	mov	r1, r3
 80058d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80058d4:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	fa93 f3a3 	rbit	r3, r3
 80058dc:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	fab3 f383 	clz	r3, r3
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80058ea:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80058f0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80058f8:	4619      	mov	r1, r3
 80058fa:	2302      	movs	r3, #2
 80058fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005900:	fa93 f3a3 	rbit	r3, r3
 8005904:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8005906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005908:	fab3 f383 	clz	r3, r3
 800590c:	b2db      	uxtb	r3, r3
 800590e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8005912:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8005914:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005916:	4313      	orrs	r3, r2
 8005918:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800591e:	2b10      	cmp	r3, #16
 8005920:	d007      	beq.n	8005932 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800592a:	4313      	orrs	r3, r2
 800592c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800592e:	4313      	orrs	r3, r2
 8005930:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800593c:	2b40      	cmp	r3, #64	@ 0x40
 800593e:	d04f      	beq.n	80059e0 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005946:	4313      	orrs	r3, r2
 8005948:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8005952:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	6912      	ldr	r2, [r2, #16]
 8005958:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800595c:	d003      	beq.n	8005966 <HAL_ADC_Init+0x136>
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	6912      	ldr	r2, [r2, #16]
 8005962:	2a01      	cmp	r2, #1
 8005964:	d102      	bne.n	800596c <HAL_ADC_Init+0x13c>
 8005966:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800596a:	e000      	b.n	800596e <HAL_ADC_Init+0x13e>
 800596c:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800596e:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8005970:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005972:	4313      	orrs	r3, r2
 8005974:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800597c:	2b01      	cmp	r3, #1
 800597e:	d125      	bne.n	80059cc <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005986:	2b00      	cmp	r3, #0
 8005988:	d114      	bne.n	80059b4 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800598e:	3b01      	subs	r3, #1
 8005990:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8005994:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005996:	69ba      	ldr	r2, [r7, #24]
 8005998:	fa92 f2a2 	rbit	r2, r2
 800599c:	617a      	str	r2, [r7, #20]
  return result;
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	fab2 f282 	clz	r2, r2
 80059a4:	b2d2      	uxtb	r2, r2
 80059a6:	4093      	lsls	r3, r2
 80059a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80059ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059ae:	4313      	orrs	r3, r2
 80059b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80059b2:	e00b      	b.n	80059cc <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059b8:	f043 0220 	orr.w	r2, r3, #32
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059c4:	f043 0201 	orr.w	r2, r3, #1
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	651a      	str	r2, [r3, #80]	@ 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	4b37      	ldr	r3, [pc, #220]	@ (8005ab0 <HAL_ADC_Init+0x280>)
 80059d4:	4013      	ands	r3, r2
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	6812      	ldr	r2, [r2, #0]
 80059da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80059dc:	430b      	orrs	r3, r1
 80059de:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689a      	ldr	r2, [r3, #8]
 80059e6:	4b33      	ldr	r3, [pc, #204]	@ (8005ab4 <HAL_ADC_Init+0x284>)
 80059e8:	4013      	ands	r3, r2
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	6812      	ldr	r2, [r2, #0]
 80059ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059f0:	430b      	orrs	r3, r1
 80059f2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059fc:	d003      	beq.n	8005a06 <HAL_ADC_Init+0x1d6>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d119      	bne.n	8005a3a <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a0c:	f023 71f8 	bic.w	r1, r3, #32505856	@ 0x1f00000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a14:	3b01      	subs	r3, #1
 8005a16:	f04f 72f8 	mov.w	r2, #32505856	@ 0x1f00000
 8005a1a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	fa92 f2a2 	rbit	r2, r2
 8005a22:	60fa      	str	r2, [r7, #12]
  return result;
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	fab2 f282 	clz	r2, r2
 8005a2a:	b2d2      	uxtb	r2, r2
 8005a2c:	fa03 f202 	lsl.w	r2, r3, r2
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a38:	e007      	b.n	8005a4a <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 8005a48:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	689a      	ldr	r2, [r3, #8]
 8005a50:	4b19      	ldr	r3, [pc, #100]	@ (8005ab8 <HAL_ADC_Init+0x288>)
 8005a52:	4013      	ands	r3, r2
 8005a54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d10b      	bne.n	8005a72 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a64:	f023 0303 	bic.w	r3, r3, #3
 8005a68:	f043 0201 	orr.w	r2, r3, #1
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005a70:	e014      	b.n	8005a9c <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a76:	f023 0312 	bic.w	r3, r3, #18
 8005a7a:	f043 0210 	orr.w	r2, r3, #16
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	64da      	str	r2, [r3, #76]	@ 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a86:	f043 0201 	orr.w	r2, r3, #1
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	651a      	str	r2, [r3, #80]	@ 0x50
      
      tmp_hal_status = HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8005a94:	e002      	b.n	8005a9c <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005a9c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3738      	adds	r7, #56	@ 0x38
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	40023800 	.word	0x40023800
 8005aac:	40012700 	.word	0x40012700
 8005ab0:	fcfc16ff 	.word	0xfcfc16ff
 8005ab4:	c0fff189 	.word	0xc0fff189
 8005ab8:	bf80fffe 	.word	0xbf80fffe

08005abc <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ad4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ad8:	d113      	bne.n	8005b02 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005ae4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ae8:	d10b      	bne.n	8005b02 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aee:	f043 0220 	orr.w	r2, r3, #32
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e068      	b.n	8005bd4 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8005b02:	f7ff fe69 	bl	80057d8 <HAL_GetTick>
 8005b06:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005b08:	e021      	b.n	8005b4e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b10:	d01d      	beq.n	8005b4e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d007      	beq.n	8005b28 <HAL_ADC_PollForConversion+0x6c>
 8005b18:	f7ff fe5e 	bl	80057d8 <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d212      	bcs.n	8005b4e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10b      	bne.n	8005b4e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b3a:	f043 0204 	orr.w	r2, r3, #4
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e042      	b.n	8005bd4 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d0d6      	beq.n	8005b0a <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d104      	bne.n	8005b6e <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f06f 0212 	mvn.w	r2, #18
 8005b6c:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b72:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d124      	bne.n	8005bd2 <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d11f      	bne.n	8005bd2 <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b98:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d006      	beq.n	8005bae <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d111      	bne.n	8005bd2 <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bb2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d105      	bne.n	8005bd2 <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bca:	f043 0201 	orr.w	r2, r3, #1
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005be4:	2300      	movs	r3, #0
 8005be6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d101      	bne.n	8005bf6 <HAL_ADC_Start_IT+0x1a>
 8005bf2:	2302      	movs	r3, #2
 8005bf4:	e058      	b.n	8005ca8 <HAL_ADC_Start_IT+0xcc>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 fb68 	bl	80062d4 <ADC_Enable>
 8005c04:	4603      	mov	r3, r0
 8005c06:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d14b      	bne.n	8005ca6 <HAL_ADC_Start_IT+0xca>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c12:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005c16:	f023 0301 	bic.w	r3, r3, #1
 8005c1a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d007      	beq.n	8005c40 <HAL_ADC_Start_IT+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c34:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005c38:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c4c:	d106      	bne.n	8005c5c <HAL_ADC_Start_IT+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c52:	f023 0206 	bic.w	r2, r3, #6
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	651a      	str	r2, [r3, #80]	@ 0x50
 8005c5a:	e002      	b.n	8005c62 <HAL_ADC_Start_IT+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005c72:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	6812      	ldr	r2, [r2, #0]
 8005c7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005c82:	f043 0320 	orr.w	r3, r3, #32
 8005c86:	6053      	str	r3, [r2, #4]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d107      	bne.n	8005ca6 <HAL_ADC_Start_IT+0xca>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689a      	ldr	r2, [r3, #8]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005ca4:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d101      	bne.n	8005cca <HAL_ADC_Stop_IT+0x1a>
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	e022      	b.n	8005d10 <HAL_ADC_Stop_IT+0x60>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fb5a 	bl	800638c <ADC_ConversionStop_Disable>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d111      	bne.n	8005d06 <HAL_ADC_Stop_IT+0x56>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f022 0220 	bic.w	r2, r2, #32
 8005cf0:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cf6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005cfa:	f023 0301 	bic.w	r3, r3, #1
 8005cfe:	f043 0201 	orr.w	r2, r3, #1
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8005d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bc80      	pop	{r7}
 8005d2e:	4770      	bx	lr

08005d30 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	f003 0320 	and.w	r3, r3, #32
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d04c      	beq.n	8005dec <HAL_ADC_IRQHandler+0xbc>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f003 0302 	and.w	r3, r3, #2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d047      	beq.n	8005dec <HAL_ADC_IRQHandler+0xbc>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d60:	f003 0310 	and.w	r3, r3, #16
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d105      	bne.n	8005d74 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d6c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d12c      	bne.n	8005ddc <HAL_ADC_IRQHandler+0xac>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d127      	bne.n	8005ddc <HAL_ADC_IRQHandler+0xac>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d92:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d006      	beq.n	8005da8 <HAL_ADC_IRQHandler+0x78>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d119      	bne.n	8005ddc <HAL_ADC_IRQHandler+0xac>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 0220 	bic.w	r2, r2, #32
 8005db6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	64da      	str	r2, [r3, #76]	@ 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d105      	bne.n	8005ddc <HAL_ADC_IRQHandler+0xac>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dd4:	f043 0201 	orr.w	r2, r3, #1
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	64da      	str	r2, [r3, #76]	@ 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 f89e 	bl	8005f1e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f06f 0212 	mvn.w	r2, #18
 8005dea:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d05a      	beq.n	8005eac <HAL_ADC_IRQHandler+0x17c>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f003 0304 	and.w	r3, r3, #4
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d055      	beq.n	8005eac <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e04:	f003 0310 	and.w	r3, r3, #16
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d105      	bne.n	8005e18 <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e10:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d13a      	bne.n	8005e9c <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e2c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d006      	beq.n	8005e42 <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d12c      	bne.n	8005e9c <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d125      	bne.n	8005e9c <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d11e      	bne.n	8005e9c <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d119      	bne.n	8005e9c <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e76:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	64da      	str	r2, [r3, #76]	@ 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d105      	bne.n	8005e9c <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e94:	f043 0201 	orr.w	r2, r3, #1
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	64da      	str	r2, [r3, #76]	@ 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fab6 	bl	800640e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f06f 020c 	mvn.w	r2, #12
 8005eaa:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d012      	beq.n	8005edc <HAL_ADC_IRQHandler+0x1ac>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00d      	beq.n	8005edc <HAL_ADC_IRQHandler+0x1ac>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ec4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	64da      	str	r2, [r3, #76]	@ 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7fc fce3 	bl	8002898 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f06f 0201 	mvn.w	r2, #1
 8005eda:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if((tmp_cr1 & ADC_IT_OVR) == ADC_IT_OVR)
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d017      	beq.n	8005f16 <HAL_ADC_IRQHandler+0x1e6>
  {
    if((tmp_sr & ADC_FLAG_OVR) == ADC_FLAG_OVR)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f003 0320 	and.w	r3, r3, #32
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d012      	beq.n	8005f16 <HAL_ADC_IRQHandler+0x1e6>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ef4:	f043 0202 	orr.w	r2, r3, #2
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f06f 0220 	mvn.w	r2, #32
 8005f04:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f812 	bl	8005f30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f06f 0220 	mvn.w	r2, #32
 8005f14:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8005f16:	bf00      	nop
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b083      	sub	sp, #12
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005f26:	bf00      	nop
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bc80      	pop	{r7}
 8005f2e:	4770      	bx	lr

08005f30 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bc80      	pop	{r7}
 8005f40:	4770      	bx	lr
	...

08005f44 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8005f52:	2300      	movs	r3, #0
 8005f54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d101      	bne.n	8005f64 <HAL_ADC_ConfigChannel+0x20>
 8005f60:	2302      	movs	r3, #2
 8005f62:	e14f      	b.n	8006204 <HAL_ADC_ConfigChannel+0x2c0>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	2b06      	cmp	r3, #6
 8005f72:	d81c      	bhi.n	8005fae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4413      	add	r3, r2
 8005f84:	3b05      	subs	r3, #5
 8005f86:	221f      	movs	r2, #31
 8005f88:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8c:	43db      	mvns	r3, r3
 8005f8e:	4019      	ands	r1, r3
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	6818      	ldr	r0, [r3, #0]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4413      	add	r3, r2
 8005f9e:	3b05      	subs	r3, #5
 8005fa0:	fa00 f203 	lsl.w	r2, r0, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	641a      	str	r2, [r3, #64]	@ 0x40
 8005fac:	e07e      	b.n	80060ac <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	2b0c      	cmp	r3, #12
 8005fb4:	d81c      	bhi.n	8005ff0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	685a      	ldr	r2, [r3, #4]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4413      	add	r3, r2
 8005fc6:	3b23      	subs	r3, #35	@ 0x23
 8005fc8:	221f      	movs	r2, #31
 8005fca:	fa02 f303 	lsl.w	r3, r2, r3
 8005fce:	43db      	mvns	r3, r3
 8005fd0:	4019      	ands	r1, r3
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	6818      	ldr	r0, [r3, #0]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	3b23      	subs	r3, #35	@ 0x23
 8005fe2:	fa00 f203 	lsl.w	r2, r0, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005fee:	e05d      	b.n	80060ac <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	2b12      	cmp	r3, #18
 8005ff6:	d81c      	bhi.n	8006032 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	4613      	mov	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4413      	add	r3, r2
 8006008:	3b41      	subs	r3, #65	@ 0x41
 800600a:	221f      	movs	r2, #31
 800600c:	fa02 f303 	lsl.w	r3, r2, r3
 8006010:	43db      	mvns	r3, r3
 8006012:	4019      	ands	r1, r3
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	6818      	ldr	r0, [r3, #0]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	4613      	mov	r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	3b41      	subs	r3, #65	@ 0x41
 8006024:	fa00 f203 	lsl.w	r2, r0, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	430a      	orrs	r2, r1
 800602e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006030:	e03c      	b.n	80060ac <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	2b18      	cmp	r3, #24
 8006038:	d81c      	bhi.n	8006074 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	685a      	ldr	r2, [r3, #4]
 8006044:	4613      	mov	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	3b5f      	subs	r3, #95	@ 0x5f
 800604c:	221f      	movs	r2, #31
 800604e:	fa02 f303 	lsl.w	r3, r2, r3
 8006052:	43db      	mvns	r3, r3
 8006054:	4019      	ands	r1, r3
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	6818      	ldr	r0, [r3, #0]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	4613      	mov	r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	3b5f      	subs	r3, #95	@ 0x5f
 8006066:	fa00 f203 	lsl.w	r2, r0, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	430a      	orrs	r2, r1
 8006070:	635a      	str	r2, [r3, #52]	@ 0x34
 8006072:	e01b      	b.n	80060ac <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	4613      	mov	r3, r2
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4413      	add	r3, r2
 8006084:	3b7d      	subs	r3, #125	@ 0x7d
 8006086:	221f      	movs	r2, #31
 8006088:	fa02 f303 	lsl.w	r3, r2, r3
 800608c:	43db      	mvns	r3, r3
 800608e:	4019      	ands	r1, r3
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	6818      	ldr	r0, [r3, #0]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	4613      	mov	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	3b7d      	subs	r3, #125	@ 0x7d
 80060a0:	fa00 f203 	lsl.w	r2, r0, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	430a      	orrs	r2, r1
 80060aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2b09      	cmp	r3, #9
 80060b2:	d81a      	bhi.n	80060ea <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6959      	ldr	r1, [r3, #20]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	4613      	mov	r3, r2
 80060c0:	005b      	lsls	r3, r3, #1
 80060c2:	4413      	add	r3, r2
 80060c4:	2207      	movs	r2, #7
 80060c6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ca:	43db      	mvns	r3, r3
 80060cc:	4019      	ands	r1, r3
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	6898      	ldr	r0, [r3, #8]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	4613      	mov	r3, r2
 80060d8:	005b      	lsls	r3, r3, #1
 80060da:	4413      	add	r3, r2
 80060dc:	fa00 f203 	lsl.w	r2, r0, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	430a      	orrs	r2, r1
 80060e6:	615a      	str	r2, [r3, #20]
 80060e8:	e05d      	b.n	80061a6 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b13      	cmp	r3, #19
 80060f0:	d81c      	bhi.n	800612c <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6919      	ldr	r1, [r3, #16]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	4613      	mov	r3, r2
 80060fe:	005b      	lsls	r3, r3, #1
 8006100:	4413      	add	r3, r2
 8006102:	3b1e      	subs	r3, #30
 8006104:	2207      	movs	r2, #7
 8006106:	fa02 f303 	lsl.w	r3, r2, r3
 800610a:	43db      	mvns	r3, r3
 800610c:	4019      	ands	r1, r3
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	6898      	ldr	r0, [r3, #8]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	4613      	mov	r3, r2
 8006118:	005b      	lsls	r3, r3, #1
 800611a:	4413      	add	r3, r2
 800611c:	3b1e      	subs	r3, #30
 800611e:	fa00 f203 	lsl.w	r2, r0, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	611a      	str	r2, [r3, #16]
 800612a:	e03c      	b.n	80061a6 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2b1d      	cmp	r3, #29
 8006132:	d81c      	bhi.n	800616e <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68d9      	ldr	r1, [r3, #12]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	4613      	mov	r3, r2
 8006140:	005b      	lsls	r3, r3, #1
 8006142:	4413      	add	r3, r2
 8006144:	3b3c      	subs	r3, #60	@ 0x3c
 8006146:	2207      	movs	r2, #7
 8006148:	fa02 f303 	lsl.w	r3, r2, r3
 800614c:	43db      	mvns	r3, r3
 800614e:	4019      	ands	r1, r3
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	6898      	ldr	r0, [r3, #8]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	4613      	mov	r3, r2
 800615a:	005b      	lsls	r3, r3, #1
 800615c:	4413      	add	r3, r2
 800615e:	3b3c      	subs	r3, #60	@ 0x3c
 8006160:	fa00 f203 	lsl.w	r2, r0, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	430a      	orrs	r2, r1
 800616a:	60da      	str	r2, [r3, #12]
 800616c:	e01b      	b.n	80061a6 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	4613      	mov	r3, r2
 800617a:	005b      	lsls	r3, r3, #1
 800617c:	4413      	add	r3, r2
 800617e:	3b5a      	subs	r3, #90	@ 0x5a
 8006180:	2207      	movs	r2, #7
 8006182:	fa02 f303 	lsl.w	r3, r2, r3
 8006186:	43db      	mvns	r3, r3
 8006188:	4019      	ands	r1, r3
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	6898      	ldr	r0, [r3, #8]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	4613      	mov	r3, r2
 8006194:	005b      	lsls	r3, r3, #1
 8006196:	4413      	add	r3, r2
 8006198:	3b5a      	subs	r3, #90	@ 0x5a
 800619a:	fa00 f203 	lsl.w	r2, r0, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2b10      	cmp	r3, #16
 80061ac:	d003      	beq.n	80061b6 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80061b2:	2b11      	cmp	r3, #17
 80061b4:	d121      	bne.n	80061fa <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80061b6:	4b16      	ldr	r3, [pc, #88]	@ (8006210 <HAL_ADC_ConfigChannel+0x2cc>)
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d11b      	bne.n	80061fa <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80061c2:	4b13      	ldr	r3, [pc, #76]	@ (8006210 <HAL_ADC_ConfigChannel+0x2cc>)
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	4a12      	ldr	r2, [pc, #72]	@ (8006210 <HAL_ADC_ConfigChannel+0x2cc>)
 80061c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80061cc:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2b10      	cmp	r3, #16
 80061d4:	d111      	bne.n	80061fa <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80061d6:	4b0f      	ldr	r3, [pc, #60]	@ (8006214 <HAL_ADC_ConfigChannel+0x2d0>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a0f      	ldr	r2, [pc, #60]	@ (8006218 <HAL_ADC_ConfigChannel+0x2d4>)
 80061dc:	fba2 2303 	umull	r2, r3, r2, r3
 80061e0:	0c9a      	lsrs	r2, r3, #18
 80061e2:	4613      	mov	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4413      	add	r3, r2
 80061e8:	005b      	lsls	r3, r3, #1
 80061ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80061ec:	e002      	b.n	80061f4 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	3b01      	subs	r3, #1
 80061f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1f9      	bne.n	80061ee <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8006202:	7bfb      	ldrb	r3, [r7, #15]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	bc80      	pop	{r7}
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	40012700 	.word	0x40012700
 8006214:	20000010 	.word	0x20000010
 8006218:	431bde83 	.word	0x431bde83

0800621c <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc ADC handle
  * @param  AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
  assert_param(IS_ADC_RANGE(ADC_RESOLUTION_12B, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(ADC_RESOLUTION_12B, AnalogWDGConfig->LowThreshold));
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a27      	ldr	r2, [pc, #156]	@ (80062c8 <HAL_ADC_AnalogWDGConfig+0xac>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d003      	beq.n	8006238 <HAL_ADC_AnalogWDGConfig+0x1c>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8006234:	4a25      	ldr	r2, [pc, #148]	@ (80062cc <HAL_ADC_AnalogWDGConfig+0xb0>)
 8006236:	4293      	cmp	r3, r2
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800623e:	2b01      	cmp	r3, #1
 8006240:	d101      	bne.n	8006246 <HAL_ADC_AnalogWDGConfig+0x2a>
 8006242:	2302      	movs	r3, #2
 8006244:	e03b      	b.n	80062be <HAL_ADC_AnalogWDGConfig+0xa2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	7a1b      	ldrb	r3, [r3, #8]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d108      	bne.n	8006268 <HAL_ADC_AnalogWDGConfig+0x4c>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006264:	605a      	str	r2, [r3, #4]
 8006266:	e007      	b.n	8006278 <HAL_ADC_AnalogWDGConfig+0x5c>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006276:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  hadc->Instance->CR1 &= ~( ADC_CR1_AWDSGL |
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6859      	ldr	r1, [r3, #4]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	4b13      	ldr	r3, [pc, #76]	@ (80062d0 <HAL_ADC_AnalogWDGConfig+0xb4>)
 8006284:	400b      	ands	r3, r1
 8006286:	6053      	str	r3, [r2, #4]
                            ADC_CR1_JAWDEN |
                            ADC_CR1_AWDEN  |
                            ADC_CR1_AWDCH   );
  
  hadc->Instance->CR1 |= ( AnalogWDGConfig->WatchdogMode |
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6859      	ldr	r1, [r3, #4]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
                           AnalogWDGConfig->Channel       );
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
  hadc->Instance->CR1 |= ( AnalogWDGConfig->WatchdogMode |
 8006296:	431a      	orrs	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	430a      	orrs	r2, r1
 800629e:	605a      	str	r2, [r3, #4]
      
  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	68d2      	ldr	r2, [r2, #12]
 80062a8:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	6912      	ldr	r2, [r2, #16]
 80062b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bc80      	pop	{r7}
 80062c6:	4770      	bx	lr
 80062c8:	00800200 	.word	0x00800200
 80062cc:	00400200 	.word	0x00400200
 80062d0:	ff3ffde0 	.word	0xff3ffde0

080062d4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80062dc:	2300      	movs	r3, #0
 80062de:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 80062e0:	2300      	movs	r3, #0
 80062e2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062ee:	2b40      	cmp	r3, #64	@ 0x40
 80062f0:	d043      	beq.n	800637a <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f042 0201 	orr.w	r2, r2, #1
 8006300:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8006302:	4b20      	ldr	r3, [pc, #128]	@ (8006384 <ADC_Enable+0xb0>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a20      	ldr	r2, [pc, #128]	@ (8006388 <ADC_Enable+0xb4>)
 8006308:	fba2 2303 	umull	r2, r3, r2, r3
 800630c:	0c9a      	lsrs	r2, r3, #18
 800630e:	4613      	mov	r3, r2
 8006310:	005b      	lsls	r3, r3, #1
 8006312:	4413      	add	r3, r2
 8006314:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8006316:	e002      	b.n	800631e <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	3b01      	subs	r3, #1
 800631c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1f9      	bne.n	8006318 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8006324:	f7ff fa58 	bl	80057d8 <HAL_GetTick>
 8006328:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800632a:	e01f      	b.n	800636c <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 800632c:	f7ff fa54 	bl	80057d8 <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	2b02      	cmp	r3, #2
 8006338:	d918      	bls.n	800636c <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006344:	2b40      	cmp	r3, #64	@ 0x40
 8006346:	d011      	beq.n	800636c <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800634c:	f043 0210 	orr.w	r2, r3, #16
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006358:	f043 0201 	orr.w	r2, r3, #1
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e007      	b.n	800637c <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006376:	2b40      	cmp	r3, #64	@ 0x40
 8006378:	d1d8      	bne.n	800632c <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	20000010 	.word	0x20000010
 8006388:	431bde83 	.word	0x431bde83

0800638c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006394:	2300      	movs	r3, #0
 8006396:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063a2:	2b40      	cmp	r3, #64	@ 0x40
 80063a4:	d12e      	bne.n	8006404 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689a      	ldr	r2, [r3, #8]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f022 0201 	bic.w	r2, r2, #1
 80063b4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80063b6:	f7ff fa0f 	bl	80057d8 <HAL_GetTick>
 80063ba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 80063bc:	e01b      	b.n	80063f6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 80063be:	f7ff fa0b 	bl	80057d8 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d914      	bls.n	80063f6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063d6:	2b40      	cmp	r3, #64	@ 0x40
 80063d8:	d10d      	bne.n	80063f6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063de:	f043 0210 	orr.w	r2, r3, #16
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063ea:	f043 0201 	orr.w	r2, r3, #1
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	651a      	str	r2, [r3, #80]	@ 0x50

          return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e007      	b.n	8006406 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006400:	2b40      	cmp	r3, #64	@ 0x40
 8006402:	d0dc      	beq.n	80063be <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800640e:	b480      	push	{r7}
 8006410:	b083      	sub	sp, #12
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8006416:	bf00      	nop
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	bc80      	pop	{r7}
 800641e:	4770      	bx	lr

08006420 <__NVIC_SetPriorityGrouping>:
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f003 0307 	and.w	r3, r3, #7
 800642e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006430:	4b0c      	ldr	r3, [pc, #48]	@ (8006464 <__NVIC_SetPriorityGrouping+0x44>)
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800643c:	4013      	ands	r3, r2
 800643e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006448:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800644c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006452:	4a04      	ldr	r2, [pc, #16]	@ (8006464 <__NVIC_SetPriorityGrouping+0x44>)
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	60d3      	str	r3, [r2, #12]
}
 8006458:	bf00      	nop
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	bc80      	pop	{r7}
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	e000ed00 	.word	0xe000ed00

08006468 <__NVIC_GetPriorityGrouping>:
{
 8006468:	b480      	push	{r7}
 800646a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800646c:	4b04      	ldr	r3, [pc, #16]	@ (8006480 <__NVIC_GetPriorityGrouping+0x18>)
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	0a1b      	lsrs	r3, r3, #8
 8006472:	f003 0307 	and.w	r3, r3, #7
}
 8006476:	4618      	mov	r0, r3
 8006478:	46bd      	mov	sp, r7
 800647a:	bc80      	pop	{r7}
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	e000ed00 	.word	0xe000ed00

08006484 <__NVIC_EnableIRQ>:
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	4603      	mov	r3, r0
 800648c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800648e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006492:	2b00      	cmp	r3, #0
 8006494:	db0b      	blt.n	80064ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006496:	79fb      	ldrb	r3, [r7, #7]
 8006498:	f003 021f 	and.w	r2, r3, #31
 800649c:	4906      	ldr	r1, [pc, #24]	@ (80064b8 <__NVIC_EnableIRQ+0x34>)
 800649e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064a2:	095b      	lsrs	r3, r3, #5
 80064a4:	2001      	movs	r0, #1
 80064a6:	fa00 f202 	lsl.w	r2, r0, r2
 80064aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80064ae:	bf00      	nop
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bc80      	pop	{r7}
 80064b6:	4770      	bx	lr
 80064b8:	e000e100 	.word	0xe000e100

080064bc <__NVIC_SetPriority>:
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	4603      	mov	r3, r0
 80064c4:	6039      	str	r1, [r7, #0]
 80064c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	db0a      	blt.n	80064e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	b2da      	uxtb	r2, r3
 80064d4:	490c      	ldr	r1, [pc, #48]	@ (8006508 <__NVIC_SetPriority+0x4c>)
 80064d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064da:	0112      	lsls	r2, r2, #4
 80064dc:	b2d2      	uxtb	r2, r2
 80064de:	440b      	add	r3, r1
 80064e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80064e4:	e00a      	b.n	80064fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	4908      	ldr	r1, [pc, #32]	@ (800650c <__NVIC_SetPriority+0x50>)
 80064ec:	79fb      	ldrb	r3, [r7, #7]
 80064ee:	f003 030f 	and.w	r3, r3, #15
 80064f2:	3b04      	subs	r3, #4
 80064f4:	0112      	lsls	r2, r2, #4
 80064f6:	b2d2      	uxtb	r2, r2
 80064f8:	440b      	add	r3, r1
 80064fa:	761a      	strb	r2, [r3, #24]
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	bc80      	pop	{r7}
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	e000e100 	.word	0xe000e100
 800650c:	e000ed00 	.word	0xe000ed00

08006510 <NVIC_EncodePriority>:
{
 8006510:	b480      	push	{r7}
 8006512:	b089      	sub	sp, #36	@ 0x24
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f003 0307 	and.w	r3, r3, #7
 8006522:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	f1c3 0307 	rsb	r3, r3, #7
 800652a:	2b04      	cmp	r3, #4
 800652c:	bf28      	it	cs
 800652e:	2304      	movcs	r3, #4
 8006530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	3304      	adds	r3, #4
 8006536:	2b06      	cmp	r3, #6
 8006538:	d902      	bls.n	8006540 <NVIC_EncodePriority+0x30>
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	3b03      	subs	r3, #3
 800653e:	e000      	b.n	8006542 <NVIC_EncodePriority+0x32>
 8006540:	2300      	movs	r3, #0
 8006542:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006544:	f04f 32ff 	mov.w	r2, #4294967295
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	fa02 f303 	lsl.w	r3, r2, r3
 800654e:	43da      	mvns	r2, r3
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	401a      	ands	r2, r3
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006558:	f04f 31ff 	mov.w	r1, #4294967295
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	fa01 f303 	lsl.w	r3, r1, r3
 8006562:	43d9      	mvns	r1, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006568:	4313      	orrs	r3, r2
}
 800656a:	4618      	mov	r0, r3
 800656c:	3724      	adds	r7, #36	@ 0x24
 800656e:	46bd      	mov	sp, r7
 8006570:	bc80      	pop	{r7}
 8006572:	4770      	bx	lr

08006574 <SysTick_Config>:
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	3b01      	subs	r3, #1
 8006580:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006584:	d301      	bcc.n	800658a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8006586:	2301      	movs	r3, #1
 8006588:	e00f      	b.n	80065aa <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800658a:	4a0a      	ldr	r2, [pc, #40]	@ (80065b4 <SysTick_Config+0x40>)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	3b01      	subs	r3, #1
 8006590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006592:	210f      	movs	r1, #15
 8006594:	f04f 30ff 	mov.w	r0, #4294967295
 8006598:	f7ff ff90 	bl	80064bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800659c:	4b05      	ldr	r3, [pc, #20]	@ (80065b4 <SysTick_Config+0x40>)
 800659e:	2200      	movs	r2, #0
 80065a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80065a2:	4b04      	ldr	r3, [pc, #16]	@ (80065b4 <SysTick_Config+0x40>)
 80065a4:	2207      	movs	r2, #7
 80065a6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	e000e010 	.word	0xe000e010

080065b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f7ff ff2d 	bl	8006420 <__NVIC_SetPriorityGrouping>
}
 80065c6:	bf00      	nop
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b086      	sub	sp, #24
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	4603      	mov	r3, r0
 80065d6:	60b9      	str	r1, [r7, #8]
 80065d8:	607a      	str	r2, [r7, #4]
 80065da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80065dc:	2300      	movs	r3, #0
 80065de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80065e0:	f7ff ff42 	bl	8006468 <__NVIC_GetPriorityGrouping>
 80065e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	68b9      	ldr	r1, [r7, #8]
 80065ea:	6978      	ldr	r0, [r7, #20]
 80065ec:	f7ff ff90 	bl	8006510 <NVIC_EncodePriority>
 80065f0:	4602      	mov	r2, r0
 80065f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065f6:	4611      	mov	r1, r2
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7ff ff5f 	bl	80064bc <__NVIC_SetPriority>
}
 80065fe:	bf00      	nop
 8006600:	3718      	adds	r7, #24
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b082      	sub	sp, #8
 800660a:	af00      	add	r7, sp, #0
 800660c:	4603      	mov	r3, r0
 800660e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006614:	4618      	mov	r0, r3
 8006616:	f7ff ff35 	bl	8006484 <__NVIC_EnableIRQ>
}
 800661a:	bf00      	nop
 800661c:	3708      	adds	r7, #8
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b082      	sub	sp, #8
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f7ff ffa2 	bl	8006574 <SysTick_Config>
 8006630:	4603      	mov	r3, r0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3708      	adds	r7, #8
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
	...

0800663c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006646:	2300      	movs	r3, #0
 8006648:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800664a:	2300      	movs	r3, #0
 800664c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800664e:	2300      	movs	r3, #0
 8006650:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8006652:	e160      	b.n	8006916 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	2101      	movs	r1, #1
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	fa01 f303 	lsl.w	r3, r1, r3
 8006660:	4013      	ands	r3, r2
 8006662:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2b00      	cmp	r3, #0
 8006668:	f000 8152 	beq.w	8006910 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f003 0303 	and.w	r3, r3, #3
 8006674:	2b01      	cmp	r3, #1
 8006676:	d005      	beq.n	8006684 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006680:	2b02      	cmp	r3, #2
 8006682:	d130      	bne.n	80066e6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	005b      	lsls	r3, r3, #1
 800668e:	2203      	movs	r2, #3
 8006690:	fa02 f303 	lsl.w	r3, r2, r3
 8006694:	43db      	mvns	r3, r3
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	4013      	ands	r3, r2
 800669a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	68da      	ldr	r2, [r3, #12]
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	005b      	lsls	r3, r3, #1
 80066a4:	fa02 f303 	lsl.w	r3, r2, r3
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80066ba:	2201      	movs	r2, #1
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	fa02 f303 	lsl.w	r3, r2, r3
 80066c2:	43db      	mvns	r3, r3
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	4013      	ands	r3, r2
 80066c8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	091b      	lsrs	r3, r3, #4
 80066d0:	f003 0201 	and.w	r2, r3, #1
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	fa02 f303 	lsl.w	r3, r2, r3
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	4313      	orrs	r3, r2
 80066de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	f003 0303 	and.w	r3, r3, #3
 80066ee:	2b03      	cmp	r3, #3
 80066f0:	d017      	beq.n	8006722 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	005b      	lsls	r3, r3, #1
 80066fc:	2203      	movs	r2, #3
 80066fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006702:	43db      	mvns	r3, r3
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	4013      	ands	r3, r2
 8006708:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	689a      	ldr	r2, [r3, #8]
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	005b      	lsls	r3, r3, #1
 8006712:	fa02 f303 	lsl.w	r3, r2, r3
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	4313      	orrs	r3, r2
 800671a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f003 0303 	and.w	r3, r3, #3
 800672a:	2b02      	cmp	r3, #2
 800672c:	d123      	bne.n	8006776 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	08da      	lsrs	r2, r3, #3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	3208      	adds	r2, #8
 8006736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800673a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	f003 0307 	and.w	r3, r3, #7
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	220f      	movs	r2, #15
 8006746:	fa02 f303 	lsl.w	r3, r2, r3
 800674a:	43db      	mvns	r3, r3
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	4013      	ands	r3, r2
 8006750:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	691a      	ldr	r2, [r3, #16]
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f003 0307 	and.w	r3, r3, #7
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	fa02 f303 	lsl.w	r3, r2, r3
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	4313      	orrs	r3, r2
 8006766:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	08da      	lsrs	r2, r3, #3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	3208      	adds	r2, #8
 8006770:	6939      	ldr	r1, [r7, #16]
 8006772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	005b      	lsls	r3, r3, #1
 8006780:	2203      	movs	r2, #3
 8006782:	fa02 f303 	lsl.w	r3, r2, r3
 8006786:	43db      	mvns	r3, r3
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	4013      	ands	r3, r2
 800678c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f003 0203 	and.w	r2, r3, #3
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	005b      	lsls	r3, r3, #1
 800679a:	fa02 f303 	lsl.w	r3, r2, r3
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f000 80ac 	beq.w	8006910 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067b8:	4b5e      	ldr	r3, [pc, #376]	@ (8006934 <HAL_GPIO_Init+0x2f8>)
 80067ba:	6a1b      	ldr	r3, [r3, #32]
 80067bc:	4a5d      	ldr	r2, [pc, #372]	@ (8006934 <HAL_GPIO_Init+0x2f8>)
 80067be:	f043 0301 	orr.w	r3, r3, #1
 80067c2:	6213      	str	r3, [r2, #32]
 80067c4:	4b5b      	ldr	r3, [pc, #364]	@ (8006934 <HAL_GPIO_Init+0x2f8>)
 80067c6:	6a1b      	ldr	r3, [r3, #32]
 80067c8:	f003 0301 	and.w	r3, r3, #1
 80067cc:	60bb      	str	r3, [r7, #8]
 80067ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80067d0:	4a59      	ldr	r2, [pc, #356]	@ (8006938 <HAL_GPIO_Init+0x2fc>)
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	089b      	lsrs	r3, r3, #2
 80067d6:	3302      	adds	r3, #2
 80067d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f003 0303 	and.w	r3, r3, #3
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	220f      	movs	r2, #15
 80067e8:	fa02 f303 	lsl.w	r3, r2, r3
 80067ec:	43db      	mvns	r3, r3
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	4013      	ands	r3, r2
 80067f2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a51      	ldr	r2, [pc, #324]	@ (800693c <HAL_GPIO_Init+0x300>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d025      	beq.n	8006848 <HAL_GPIO_Init+0x20c>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a50      	ldr	r2, [pc, #320]	@ (8006940 <HAL_GPIO_Init+0x304>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d01f      	beq.n	8006844 <HAL_GPIO_Init+0x208>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a4f      	ldr	r2, [pc, #316]	@ (8006944 <HAL_GPIO_Init+0x308>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d019      	beq.n	8006840 <HAL_GPIO_Init+0x204>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a4e      	ldr	r2, [pc, #312]	@ (8006948 <HAL_GPIO_Init+0x30c>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d013      	beq.n	800683c <HAL_GPIO_Init+0x200>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a4d      	ldr	r2, [pc, #308]	@ (800694c <HAL_GPIO_Init+0x310>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d00d      	beq.n	8006838 <HAL_GPIO_Init+0x1fc>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a4c      	ldr	r2, [pc, #304]	@ (8006950 <HAL_GPIO_Init+0x314>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d007      	beq.n	8006834 <HAL_GPIO_Init+0x1f8>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a4b      	ldr	r2, [pc, #300]	@ (8006954 <HAL_GPIO_Init+0x318>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d101      	bne.n	8006830 <HAL_GPIO_Init+0x1f4>
 800682c:	2306      	movs	r3, #6
 800682e:	e00c      	b.n	800684a <HAL_GPIO_Init+0x20e>
 8006830:	2307      	movs	r3, #7
 8006832:	e00a      	b.n	800684a <HAL_GPIO_Init+0x20e>
 8006834:	2305      	movs	r3, #5
 8006836:	e008      	b.n	800684a <HAL_GPIO_Init+0x20e>
 8006838:	2304      	movs	r3, #4
 800683a:	e006      	b.n	800684a <HAL_GPIO_Init+0x20e>
 800683c:	2303      	movs	r3, #3
 800683e:	e004      	b.n	800684a <HAL_GPIO_Init+0x20e>
 8006840:	2302      	movs	r3, #2
 8006842:	e002      	b.n	800684a <HAL_GPIO_Init+0x20e>
 8006844:	2301      	movs	r3, #1
 8006846:	e000      	b.n	800684a <HAL_GPIO_Init+0x20e>
 8006848:	2300      	movs	r3, #0
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	f002 0203 	and.w	r2, r2, #3
 8006850:	0092      	lsls	r2, r2, #2
 8006852:	4093      	lsls	r3, r2
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	4313      	orrs	r3, r2
 8006858:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800685a:	4937      	ldr	r1, [pc, #220]	@ (8006938 <HAL_GPIO_Init+0x2fc>)
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	089b      	lsrs	r3, r3, #2
 8006860:	3302      	adds	r3, #2
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006868:	4b3b      	ldr	r3, [pc, #236]	@ (8006958 <HAL_GPIO_Init+0x31c>)
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	43db      	mvns	r3, r3
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	4013      	ands	r3, r2
 8006876:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d003      	beq.n	800688c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	4313      	orrs	r3, r2
 800688a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800688c:	4a32      	ldr	r2, [pc, #200]	@ (8006958 <HAL_GPIO_Init+0x31c>)
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006892:	4b31      	ldr	r3, [pc, #196]	@ (8006958 <HAL_GPIO_Init+0x31c>)
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	43db      	mvns	r3, r3
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	4013      	ands	r3, r2
 80068a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d003      	beq.n	80068b6 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80068ae:	693a      	ldr	r2, [r7, #16]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80068b6:	4a28      	ldr	r2, [pc, #160]	@ (8006958 <HAL_GPIO_Init+0x31c>)
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80068bc:	4b26      	ldr	r3, [pc, #152]	@ (8006958 <HAL_GPIO_Init+0x31c>)
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	43db      	mvns	r3, r3
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	4013      	ands	r3, r2
 80068ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d003      	beq.n	80068e0 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	4313      	orrs	r3, r2
 80068de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80068e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006958 <HAL_GPIO_Init+0x31c>)
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80068e6:	4b1c      	ldr	r3, [pc, #112]	@ (8006958 <HAL_GPIO_Init+0x31c>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	43db      	mvns	r3, r3
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	4013      	ands	r3, r2
 80068f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d003      	beq.n	800690a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	4313      	orrs	r3, r2
 8006908:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800690a:	4a13      	ldr	r2, [pc, #76]	@ (8006958 <HAL_GPIO_Init+0x31c>)
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	3301      	adds	r3, #1
 8006914:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	fa22 f303 	lsr.w	r3, r2, r3
 8006920:	2b00      	cmp	r3, #0
 8006922:	f47f ae97 	bne.w	8006654 <HAL_GPIO_Init+0x18>
  }
}
 8006926:	bf00      	nop
 8006928:	bf00      	nop
 800692a:	371c      	adds	r7, #28
 800692c:	46bd      	mov	sp, r7
 800692e:	bc80      	pop	{r7}
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	40023800 	.word	0x40023800
 8006938:	40010000 	.word	0x40010000
 800693c:	40020000 	.word	0x40020000
 8006940:	40020400 	.word	0x40020400
 8006944:	40020800 	.word	0x40020800
 8006948:	40020c00 	.word	0x40020c00
 800694c:	40021000 	.word	0x40021000
 8006950:	40021400 	.word	0x40021400
 8006954:	40021800 	.word	0x40021800
 8006958:	40010400 	.word	0x40010400

0800695c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800695c:	b480      	push	{r7}
 800695e:	b087      	sub	sp, #28
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006966:	2300      	movs	r3, #0
 8006968:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800696a:	2300      	movs	r3, #0
 800696c:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 800696e:	2300      	movs	r3, #0
 8006970:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8006972:	e0c4      	b.n	8006afe <HAL_GPIO_DeInit+0x1a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8006974:	2201      	movs	r2, #1
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	fa02 f303 	lsl.w	r3, r2, r3
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	4013      	ands	r3, r2
 8006980:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	2b00      	cmp	r3, #0
 8006986:	f000 80b7 	beq.w	8006af8 <HAL_GPIO_DeInit+0x19c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
 800698a:	4a63      	ldr	r2, [pc, #396]	@ (8006b18 <HAL_GPIO_DeInit+0x1bc>)
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	089b      	lsrs	r3, r3, #2
 8006990:	3302      	adds	r3, #2
 8006992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006996:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f003 0303 	and.w	r3, r3, #3
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	220f      	movs	r2, #15
 80069a2:	fa02 f303 	lsl.w	r3, r2, r3
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	4013      	ands	r3, r2
 80069aa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a5b      	ldr	r2, [pc, #364]	@ (8006b1c <HAL_GPIO_DeInit+0x1c0>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d025      	beq.n	8006a00 <HAL_GPIO_DeInit+0xa4>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a5a      	ldr	r2, [pc, #360]	@ (8006b20 <HAL_GPIO_DeInit+0x1c4>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d01f      	beq.n	80069fc <HAL_GPIO_DeInit+0xa0>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a59      	ldr	r2, [pc, #356]	@ (8006b24 <HAL_GPIO_DeInit+0x1c8>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d019      	beq.n	80069f8 <HAL_GPIO_DeInit+0x9c>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a58      	ldr	r2, [pc, #352]	@ (8006b28 <HAL_GPIO_DeInit+0x1cc>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d013      	beq.n	80069f4 <HAL_GPIO_DeInit+0x98>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a57      	ldr	r2, [pc, #348]	@ (8006b2c <HAL_GPIO_DeInit+0x1d0>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d00d      	beq.n	80069f0 <HAL_GPIO_DeInit+0x94>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a56      	ldr	r2, [pc, #344]	@ (8006b30 <HAL_GPIO_DeInit+0x1d4>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d007      	beq.n	80069ec <HAL_GPIO_DeInit+0x90>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a55      	ldr	r2, [pc, #340]	@ (8006b34 <HAL_GPIO_DeInit+0x1d8>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d101      	bne.n	80069e8 <HAL_GPIO_DeInit+0x8c>
 80069e4:	2306      	movs	r3, #6
 80069e6:	e00c      	b.n	8006a02 <HAL_GPIO_DeInit+0xa6>
 80069e8:	2307      	movs	r3, #7
 80069ea:	e00a      	b.n	8006a02 <HAL_GPIO_DeInit+0xa6>
 80069ec:	2305      	movs	r3, #5
 80069ee:	e008      	b.n	8006a02 <HAL_GPIO_DeInit+0xa6>
 80069f0:	2304      	movs	r3, #4
 80069f2:	e006      	b.n	8006a02 <HAL_GPIO_DeInit+0xa6>
 80069f4:	2303      	movs	r3, #3
 80069f6:	e004      	b.n	8006a02 <HAL_GPIO_DeInit+0xa6>
 80069f8:	2302      	movs	r3, #2
 80069fa:	e002      	b.n	8006a02 <HAL_GPIO_DeInit+0xa6>
 80069fc:	2301      	movs	r3, #1
 80069fe:	e000      	b.n	8006a02 <HAL_GPIO_DeInit+0xa6>
 8006a00:	2300      	movs	r3, #0
 8006a02:	697a      	ldr	r2, [r7, #20]
 8006a04:	f002 0203 	and.w	r2, r2, #3
 8006a08:	0092      	lsls	r2, r2, #2
 8006a0a:	4093      	lsls	r3, r2
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d132      	bne.n	8006a78 <HAL_GPIO_DeInit+0x11c>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8006a12:	4b49      	ldr	r3, [pc, #292]	@ (8006b38 <HAL_GPIO_DeInit+0x1dc>)
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	43db      	mvns	r3, r3
 8006a1a:	4947      	ldr	r1, [pc, #284]	@ (8006b38 <HAL_GPIO_DeInit+0x1dc>)
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8006a20:	4b45      	ldr	r3, [pc, #276]	@ (8006b38 <HAL_GPIO_DeInit+0x1dc>)
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	43db      	mvns	r3, r3
 8006a28:	4943      	ldr	r1, [pc, #268]	@ (8006b38 <HAL_GPIO_DeInit+0x1dc>)
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8006a2e:	4b42      	ldr	r3, [pc, #264]	@ (8006b38 <HAL_GPIO_DeInit+0x1dc>)
 8006a30:	68da      	ldr	r2, [r3, #12]
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	43db      	mvns	r3, r3
 8006a36:	4940      	ldr	r1, [pc, #256]	@ (8006b38 <HAL_GPIO_DeInit+0x1dc>)
 8006a38:	4013      	ands	r3, r2
 8006a3a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8006a3c:	4b3e      	ldr	r3, [pc, #248]	@ (8006b38 <HAL_GPIO_DeInit+0x1dc>)
 8006a3e:	689a      	ldr	r2, [r3, #8]
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	43db      	mvns	r3, r3
 8006a44:	493c      	ldr	r1, [pc, #240]	@ (8006b38 <HAL_GPIO_DeInit+0x1dc>)
 8006a46:	4013      	ands	r3, r2
 8006a48:	608b      	str	r3, [r1, #8]

        tmp = (0x0FU) << (4 * (position & 0x03));
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f003 0303 	and.w	r3, r3, #3
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	220f      	movs	r2, #15
 8006a54:	fa02 f303 	lsl.w	r3, r2, r3
 8006a58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8006a5a:	4a2f      	ldr	r2, [pc, #188]	@ (8006b18 <HAL_GPIO_DeInit+0x1bc>)
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	089b      	lsrs	r3, r3, #2
 8006a60:	3302      	adds	r3, #2
 8006a62:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	43da      	mvns	r2, r3
 8006a6a:	482b      	ldr	r0, [pc, #172]	@ (8006b18 <HAL_GPIO_DeInit+0x1bc>)
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	089b      	lsrs	r3, r3, #2
 8006a70:	400a      	ands	r2, r1
 8006a72:	3302      	adds	r3, #2
 8006a74:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	005b      	lsls	r3, r3, #1
 8006a80:	2103      	movs	r1, #3
 8006a82:	fa01 f303 	lsl.w	r3, r1, r3
 8006a86:	43db      	mvns	r3, r3
 8006a88:	401a      	ands	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	08da      	lsrs	r2, r3, #3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	3208      	adds	r2, #8
 8006a96:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f003 0307 	and.w	r3, r3, #7
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	220f      	movs	r2, #15
 8006aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa8:	43db      	mvns	r3, r3
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	08d2      	lsrs	r2, r2, #3
 8006aae:	4019      	ands	r1, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	3208      	adds	r2, #8
 8006ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68da      	ldr	r2, [r3, #12]
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	005b      	lsls	r3, r3, #1
 8006ac0:	2103      	movs	r1, #3
 8006ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ac6:	43db      	mvns	r3, r3
 8006ac8:	401a      	ands	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685a      	ldr	r2, [r3, #4]
 8006ad2:	2101      	movs	r1, #1
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8006ada:	43db      	mvns	r3, r3
 8006adc:	401a      	ands	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	689a      	ldr	r2, [r3, #8]
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	005b      	lsls	r3, r3, #1
 8006aea:	2103      	movs	r1, #3
 8006aec:	fa01 f303 	lsl.w	r3, r1, r3
 8006af0:	43db      	mvns	r3, r3
 8006af2:	401a      	ands	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	609a      	str	r2, [r3, #8]
    }

    position++;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	3301      	adds	r3, #1
 8006afc:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8006afe:	683a      	ldr	r2, [r7, #0]
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	fa22 f303 	lsr.w	r3, r2, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f47f af34 	bne.w	8006974 <HAL_GPIO_DeInit+0x18>
  }
}
 8006b0c:	bf00      	nop
 8006b0e:	bf00      	nop
 8006b10:	371c      	adds	r7, #28
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bc80      	pop	{r7}
 8006b16:	4770      	bx	lr
 8006b18:	40010000 	.word	0x40010000
 8006b1c:	40020000 	.word	0x40020000
 8006b20:	40020400 	.word	0x40020400
 8006b24:	40020800 	.word	0x40020800
 8006b28:	40020c00 	.word	0x40020c00
 8006b2c:	40021000 	.word	0x40021000
 8006b30:	40021400 	.word	0x40021400
 8006b34:	40021800 	.word	0x40021800
 8006b38:	40010400 	.word	0x40010400

08006b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	460b      	mov	r3, r1
 8006b46:	807b      	strh	r3, [r7, #2]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006b4c:	787b      	ldrb	r3, [r7, #1]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006b52:	887a      	ldrh	r2, [r7, #2]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8006b58:	e003      	b.n	8006b62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8006b5a:	887b      	ldrh	r3, [r7, #2]
 8006b5c:	041a      	lsls	r2, r3, #16
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	619a      	str	r2, [r3, #24]
}
 8006b62:	bf00      	nop
 8006b64:	370c      	adds	r7, #12
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bc80      	pop	{r7}
 8006b6a:	4770      	bx	lr

08006b6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	4603      	mov	r3, r0
 8006b74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006b76:	4b08      	ldr	r3, [pc, #32]	@ (8006b98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b78:	695a      	ldr	r2, [r3, #20]
 8006b7a:	88fb      	ldrh	r3, [r7, #6]
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d006      	beq.n	8006b90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006b82:	4a05      	ldr	r2, [pc, #20]	@ (8006b98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b84:	88fb      	ldrh	r3, [r7, #6]
 8006b86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006b88:	88fb      	ldrh	r3, [r7, #6]
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7fb fe52 	bl	8002834 <HAL_GPIO_EXTI_Callback>
  }
}
 8006b90:	bf00      	nop
 8006b92:	3708      	adds	r7, #8
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	40010400 	.word	0x40010400

08006b9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d101      	bne.n	8006bae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e12b      	b.n	8006e06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d106      	bne.n	8006bc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f95d 	bl	8006e82 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2224      	movs	r2, #36	@ 0x24
 8006bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 0201 	bic.w	r2, r2, #1
 8006bde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006bee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006bfe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006c00:	f001 fdac 	bl	800875c <HAL_RCC_GetPCLK1Freq>
 8006c04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	4a81      	ldr	r2, [pc, #516]	@ (8006e10 <HAL_I2C_Init+0x274>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d807      	bhi.n	8006c20 <HAL_I2C_Init+0x84>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	4a80      	ldr	r2, [pc, #512]	@ (8006e14 <HAL_I2C_Init+0x278>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	bf94      	ite	ls
 8006c18:	2301      	movls	r3, #1
 8006c1a:	2300      	movhi	r3, #0
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	e006      	b.n	8006c2e <HAL_I2C_Init+0x92>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4a7d      	ldr	r2, [pc, #500]	@ (8006e18 <HAL_I2C_Init+0x27c>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	bf94      	ite	ls
 8006c28:	2301      	movls	r3, #1
 8006c2a:	2300      	movhi	r3, #0
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e0e7      	b.n	8006e06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	4a78      	ldr	r2, [pc, #480]	@ (8006e1c <HAL_I2C_Init+0x280>)
 8006c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c3e:	0c9b      	lsrs	r3, r3, #18
 8006c40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	430a      	orrs	r2, r1
 8006c54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	4a6a      	ldr	r2, [pc, #424]	@ (8006e10 <HAL_I2C_Init+0x274>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d802      	bhi.n	8006c70 <HAL_I2C_Init+0xd4>
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	e009      	b.n	8006c84 <HAL_I2C_Init+0xe8>
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006c76:	fb02 f303 	mul.w	r3, r2, r3
 8006c7a:	4a69      	ldr	r2, [pc, #420]	@ (8006e20 <HAL_I2C_Init+0x284>)
 8006c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c80:	099b      	lsrs	r3, r3, #6
 8006c82:	3301      	adds	r3, #1
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	6812      	ldr	r2, [r2, #0]
 8006c88:	430b      	orrs	r3, r1
 8006c8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	69db      	ldr	r3, [r3, #28]
 8006c92:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006c96:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	495c      	ldr	r1, [pc, #368]	@ (8006e10 <HAL_I2C_Init+0x274>)
 8006ca0:	428b      	cmp	r3, r1
 8006ca2:	d819      	bhi.n	8006cd8 <HAL_I2C_Init+0x13c>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	1e59      	subs	r1, r3, #1
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	fbb1 f3f3 	udiv	r3, r1, r3
 8006cb2:	1c59      	adds	r1, r3, #1
 8006cb4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006cb8:	400b      	ands	r3, r1
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00a      	beq.n	8006cd4 <HAL_I2C_Init+0x138>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	1e59      	subs	r1, r3, #1
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	005b      	lsls	r3, r3, #1
 8006cc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ccc:	3301      	adds	r3, #1
 8006cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cd2:	e051      	b.n	8006d78 <HAL_I2C_Init+0x1dc>
 8006cd4:	2304      	movs	r3, #4
 8006cd6:	e04f      	b.n	8006d78 <HAL_I2C_Init+0x1dc>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d111      	bne.n	8006d04 <HAL_I2C_Init+0x168>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	1e58      	subs	r0, r3, #1
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6859      	ldr	r1, [r3, #4]
 8006ce8:	460b      	mov	r3, r1
 8006cea:	005b      	lsls	r3, r3, #1
 8006cec:	440b      	add	r3, r1
 8006cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	bf0c      	ite	eq
 8006cfc:	2301      	moveq	r3, #1
 8006cfe:	2300      	movne	r3, #0
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	e012      	b.n	8006d2a <HAL_I2C_Init+0x18e>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	1e58      	subs	r0, r3, #1
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6859      	ldr	r1, [r3, #4]
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	440b      	add	r3, r1
 8006d12:	0099      	lsls	r1, r3, #2
 8006d14:	440b      	add	r3, r1
 8006d16:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	bf0c      	ite	eq
 8006d24:	2301      	moveq	r3, #1
 8006d26:	2300      	movne	r3, #0
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d001      	beq.n	8006d32 <HAL_I2C_Init+0x196>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e022      	b.n	8006d78 <HAL_I2C_Init+0x1dc>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10e      	bne.n	8006d58 <HAL_I2C_Init+0x1bc>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	1e58      	subs	r0, r3, #1
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6859      	ldr	r1, [r3, #4]
 8006d42:	460b      	mov	r3, r1
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	440b      	add	r3, r1
 8006d48:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d56:	e00f      	b.n	8006d78 <HAL_I2C_Init+0x1dc>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	1e58      	subs	r0, r3, #1
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6859      	ldr	r1, [r3, #4]
 8006d60:	460b      	mov	r3, r1
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	440b      	add	r3, r1
 8006d66:	0099      	lsls	r1, r3, #2
 8006d68:	440b      	add	r3, r1
 8006d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d6e:	3301      	adds	r3, #1
 8006d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d78:	6879      	ldr	r1, [r7, #4]
 8006d7a:	6809      	ldr	r1, [r1, #0]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	69da      	ldr	r2, [r3, #28]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	431a      	orrs	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	430a      	orrs	r2, r1
 8006d9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006da6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	6911      	ldr	r1, [r2, #16]
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	68d2      	ldr	r2, [r2, #12]
 8006db2:	4311      	orrs	r1, r2
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	6812      	ldr	r2, [r2, #0]
 8006db8:	430b      	orrs	r3, r1
 8006dba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	695a      	ldr	r2, [r3, #20]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	431a      	orrs	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f042 0201 	orr.w	r2, r2, #1
 8006de6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2220      	movs	r2, #32
 8006df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	000186a0 	.word	0x000186a0
 8006e14:	001e847f 	.word	0x001e847f
 8006e18:	003d08ff 	.word	0x003d08ff
 8006e1c:	431bde83 	.word	0x431bde83
 8006e20:	10624dd3 	.word	0x10624dd3

08006e24 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d101      	bne.n	8006e36 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e021      	b.n	8006e7a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2224      	movs	r2, #36	@ 0x24
 8006e3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f022 0201 	bic.w	r2, r2, #1
 8006e4c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f820 	bl	8006e94 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3708      	adds	r7, #8
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b083      	sub	sp, #12
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006e8a:	bf00      	nop
 8006e8c:	370c      	adds	r7, #12
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bc80      	pop	{r7}
 8006e92:	4770      	bx	lr

08006e94 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bc80      	pop	{r7}
 8006ea4:	4770      	bx	lr
	...

08006ea8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b088      	sub	sp, #32
 8006eac:	af02      	add	r7, sp, #8
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	4608      	mov	r0, r1
 8006eb2:	4611      	mov	r1, r2
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	817b      	strh	r3, [r7, #10]
 8006eba:	460b      	mov	r3, r1
 8006ebc:	813b      	strh	r3, [r7, #8]
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006ec2:	f7fe fc89 	bl	80057d8 <HAL_GetTick>
 8006ec6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	2b20      	cmp	r3, #32
 8006ed2:	f040 80d9 	bne.w	8007088 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	2319      	movs	r3, #25
 8006edc:	2201      	movs	r2, #1
 8006ede:	496d      	ldr	r1, [pc, #436]	@ (8007094 <HAL_I2C_Mem_Write+0x1ec>)
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f000 fc97 	bl	8007814 <I2C_WaitOnFlagUntilTimeout>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d001      	beq.n	8006ef0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006eec:	2302      	movs	r3, #2
 8006eee:	e0cc      	b.n	800708a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d101      	bne.n	8006efe <HAL_I2C_Mem_Write+0x56>
 8006efa:	2302      	movs	r3, #2
 8006efc:	e0c5      	b.n	800708a <HAL_I2C_Mem_Write+0x1e2>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d007      	beq.n	8006f24 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f042 0201 	orr.w	r2, r2, #1
 8006f22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2221      	movs	r2, #33	@ 0x21
 8006f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2240      	movs	r2, #64	@ 0x40
 8006f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6a3a      	ldr	r2, [r7, #32]
 8006f4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006f54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	4a4d      	ldr	r2, [pc, #308]	@ (8007098 <HAL_I2C_Mem_Write+0x1f0>)
 8006f64:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f66:	88f8      	ldrh	r0, [r7, #6]
 8006f68:	893a      	ldrh	r2, [r7, #8]
 8006f6a:	8979      	ldrh	r1, [r7, #10]
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	9301      	str	r3, [sp, #4]
 8006f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f72:	9300      	str	r3, [sp, #0]
 8006f74:	4603      	mov	r3, r0
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f000 face 	bl	8007518 <I2C_RequestMemoryWrite>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d052      	beq.n	8007028 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e081      	b.n	800708a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f000 fd5c 	bl	8007a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00d      	beq.n	8006fb2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f9a:	2b04      	cmp	r3, #4
 8006f9c:	d107      	bne.n	8006fae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e06b      	b.n	800708a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb6:	781a      	ldrb	r2, [r3, #0]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fc2:	1c5a      	adds	r2, r3, #1
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	695b      	ldr	r3, [r3, #20]
 8006fe8:	f003 0304 	and.w	r3, r3, #4
 8006fec:	2b04      	cmp	r3, #4
 8006fee:	d11b      	bne.n	8007028 <HAL_I2C_Mem_Write+0x180>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d017      	beq.n	8007028 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ffc:	781a      	ldrb	r2, [r3, #0]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007008:	1c5a      	adds	r2, r3, #1
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007012:	3b01      	subs	r3, #1
 8007014:	b29a      	uxth	r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800701e:	b29b      	uxth	r3, r3
 8007020:	3b01      	subs	r3, #1
 8007022:	b29a      	uxth	r2, r3
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1aa      	bne.n	8006f86 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f000 fd4f 	bl	8007ad8 <I2C_WaitOnBTFFlagUntilTimeout>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00d      	beq.n	800705c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007044:	2b04      	cmp	r3, #4
 8007046:	d107      	bne.n	8007058 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007056:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e016      	b.n	800708a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800706a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2220      	movs	r2, #32
 8007070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007084:	2300      	movs	r3, #0
 8007086:	e000      	b.n	800708a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007088:	2302      	movs	r3, #2
  }
}
 800708a:	4618      	mov	r0, r3
 800708c:	3718      	adds	r7, #24
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	00100002 	.word	0x00100002
 8007098:	ffff0000 	.word	0xffff0000

0800709c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b08c      	sub	sp, #48	@ 0x30
 80070a0:	af02      	add	r7, sp, #8
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	4608      	mov	r0, r1
 80070a6:	4611      	mov	r1, r2
 80070a8:	461a      	mov	r2, r3
 80070aa:	4603      	mov	r3, r0
 80070ac:	817b      	strh	r3, [r7, #10]
 80070ae:	460b      	mov	r3, r1
 80070b0:	813b      	strh	r3, [r7, #8]
 80070b2:	4613      	mov	r3, r2
 80070b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80070b6:	f7fe fb8f 	bl	80057d8 <HAL_GetTick>
 80070ba:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	2b20      	cmp	r3, #32
 80070c6:	f040 8208 	bne.w	80074da <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80070ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	2319      	movs	r3, #25
 80070d0:	2201      	movs	r2, #1
 80070d2:	497b      	ldr	r1, [pc, #492]	@ (80072c0 <HAL_I2C_Mem_Read+0x224>)
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f000 fb9d 	bl	8007814 <I2C_WaitOnFlagUntilTimeout>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d001      	beq.n	80070e4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80070e0:	2302      	movs	r3, #2
 80070e2:	e1fb      	b.n	80074dc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d101      	bne.n	80070f2 <HAL_I2C_Mem_Read+0x56>
 80070ee:	2302      	movs	r3, #2
 80070f0:	e1f4      	b.n	80074dc <HAL_I2C_Mem_Read+0x440>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0301 	and.w	r3, r3, #1
 8007104:	2b01      	cmp	r3, #1
 8007106:	d007      	beq.n	8007118 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f042 0201 	orr.w	r2, r2, #1
 8007116:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007126:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2222      	movs	r2, #34	@ 0x22
 800712c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2240      	movs	r2, #64	@ 0x40
 8007134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007142:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007148:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800714e:	b29a      	uxth	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	4a5b      	ldr	r2, [pc, #364]	@ (80072c4 <HAL_I2C_Mem_Read+0x228>)
 8007158:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800715a:	88f8      	ldrh	r0, [r7, #6]
 800715c:	893a      	ldrh	r2, [r7, #8]
 800715e:	8979      	ldrh	r1, [r7, #10]
 8007160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007162:	9301      	str	r3, [sp, #4]
 8007164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	4603      	mov	r3, r0
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f000 fa6a 	bl	8007644 <I2C_RequestMemoryRead>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d001      	beq.n	800717a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e1b0      	b.n	80074dc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800717e:	2b00      	cmp	r3, #0
 8007180:	d113      	bne.n	80071aa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007182:	2300      	movs	r3, #0
 8007184:	623b      	str	r3, [r7, #32]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	695b      	ldr	r3, [r3, #20]
 800718c:	623b      	str	r3, [r7, #32]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	623b      	str	r3, [r7, #32]
 8007196:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071a6:	601a      	str	r2, [r3, #0]
 80071a8:	e184      	b.n	80074b4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d11b      	bne.n	80071ea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071c2:	2300      	movs	r3, #0
 80071c4:	61fb      	str	r3, [r7, #28]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	61fb      	str	r3, [r7, #28]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	61fb      	str	r3, [r7, #28]
 80071d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071e6:	601a      	str	r2, [r3, #0]
 80071e8:	e164      	b.n	80074b4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d11b      	bne.n	800722a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007200:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007210:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007212:	2300      	movs	r3, #0
 8007214:	61bb      	str	r3, [r7, #24]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	695b      	ldr	r3, [r3, #20]
 800721c:	61bb      	str	r3, [r7, #24]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	61bb      	str	r3, [r7, #24]
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	e144      	b.n	80074b4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800722a:	2300      	movs	r3, #0
 800722c:	617b      	str	r3, [r7, #20]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	695b      	ldr	r3, [r3, #20]
 8007234:	617b      	str	r3, [r7, #20]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	617b      	str	r3, [r7, #20]
 800723e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007240:	e138      	b.n	80074b4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007246:	2b03      	cmp	r3, #3
 8007248:	f200 80f1 	bhi.w	800742e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007250:	2b01      	cmp	r3, #1
 8007252:	d123      	bne.n	800729c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007254:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007256:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007258:	68f8      	ldr	r0, [r7, #12]
 800725a:	f000 fc85 	bl	8007b68 <I2C_WaitOnRXNEFlagUntilTimeout>
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d001      	beq.n	8007268 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	e139      	b.n	80074dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	691a      	ldr	r2, [r3, #16]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007272:	b2d2      	uxtb	r2, r2
 8007274:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800727a:	1c5a      	adds	r2, r3, #1
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007284:	3b01      	subs	r3, #1
 8007286:	b29a      	uxth	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007290:	b29b      	uxth	r3, r3
 8007292:	3b01      	subs	r3, #1
 8007294:	b29a      	uxth	r2, r3
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800729a:	e10b      	b.n	80074b4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d14e      	bne.n	8007342 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80072a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072aa:	2200      	movs	r2, #0
 80072ac:	4906      	ldr	r1, [pc, #24]	@ (80072c8 <HAL_I2C_Mem_Read+0x22c>)
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f000 fab0 	bl	8007814 <I2C_WaitOnFlagUntilTimeout>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d008      	beq.n	80072cc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e10e      	b.n	80074dc <HAL_I2C_Mem_Read+0x440>
 80072be:	bf00      	nop
 80072c0:	00100002 	.word	0x00100002
 80072c4:	ffff0000 	.word	0xffff0000
 80072c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	691a      	ldr	r2, [r3, #16]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e6:	b2d2      	uxtb	r2, r2
 80072e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ee:	1c5a      	adds	r2, r3, #1
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072f8:	3b01      	subs	r3, #1
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007304:	b29b      	uxth	r3, r3
 8007306:	3b01      	subs	r3, #1
 8007308:	b29a      	uxth	r2, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	691a      	ldr	r2, [r3, #16]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007318:	b2d2      	uxtb	r2, r2
 800731a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007320:	1c5a      	adds	r2, r3, #1
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800732a:	3b01      	subs	r3, #1
 800732c:	b29a      	uxth	r2, r3
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007336:	b29b      	uxth	r3, r3
 8007338:	3b01      	subs	r3, #1
 800733a:	b29a      	uxth	r2, r3
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007340:	e0b8      	b.n	80074b4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007348:	2200      	movs	r2, #0
 800734a:	4966      	ldr	r1, [pc, #408]	@ (80074e4 <HAL_I2C_Mem_Read+0x448>)
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f000 fa61 	bl	8007814 <I2C_WaitOnFlagUntilTimeout>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e0bf      	b.n	80074dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800736a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	691a      	ldr	r2, [r3, #16]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007376:	b2d2      	uxtb	r2, r2
 8007378:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800737e:	1c5a      	adds	r2, r3, #1
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007388:	3b01      	subs	r3, #1
 800738a:	b29a      	uxth	r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007394:	b29b      	uxth	r3, r3
 8007396:	3b01      	subs	r3, #1
 8007398:	b29a      	uxth	r2, r3
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800739e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a4:	2200      	movs	r2, #0
 80073a6:	494f      	ldr	r1, [pc, #316]	@ (80074e4 <HAL_I2C_Mem_Read+0x448>)
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f000 fa33 	bl	8007814 <I2C_WaitOnFlagUntilTimeout>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d001      	beq.n	80073b8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e091      	b.n	80074dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	691a      	ldr	r2, [r3, #16]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d2:	b2d2      	uxtb	r2, r2
 80073d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073da:	1c5a      	adds	r2, r3, #1
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073e4:	3b01      	subs	r3, #1
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	3b01      	subs	r3, #1
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	691a      	ldr	r2, [r3, #16]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007404:	b2d2      	uxtb	r2, r2
 8007406:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800740c:	1c5a      	adds	r2, r3, #1
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007416:	3b01      	subs	r3, #1
 8007418:	b29a      	uxth	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007422:	b29b      	uxth	r3, r3
 8007424:	3b01      	subs	r3, #1
 8007426:	b29a      	uxth	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800742c:	e042      	b.n	80074b4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800742e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007430:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f000 fb98 	bl	8007b68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d001      	beq.n	8007442 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e04c      	b.n	80074dc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	691a      	ldr	r2, [r3, #16]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800744c:	b2d2      	uxtb	r2, r2
 800744e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007454:	1c5a      	adds	r2, r3, #1
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800745e:	3b01      	subs	r3, #1
 8007460:	b29a      	uxth	r2, r3
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800746a:	b29b      	uxth	r3, r3
 800746c:	3b01      	subs	r3, #1
 800746e:	b29a      	uxth	r2, r3
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	f003 0304 	and.w	r3, r3, #4
 800747e:	2b04      	cmp	r3, #4
 8007480:	d118      	bne.n	80074b4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	691a      	ldr	r2, [r3, #16]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800748c:	b2d2      	uxtb	r2, r2
 800748e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007494:	1c5a      	adds	r2, r3, #1
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800749e:	3b01      	subs	r3, #1
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	3b01      	subs	r3, #1
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f47f aec2 	bne.w	8007242 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2220      	movs	r2, #32
 80074c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	e000      	b.n	80074dc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80074da:	2302      	movs	r3, #2
  }
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3728      	adds	r7, #40	@ 0x28
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	00010004 	.word	0x00010004

080074e8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074f6:	b2db      	uxtb	r3, r3
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bc80      	pop	{r7}
 8007500:	4770      	bx	lr

08007502 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007502:	b480      	push	{r7}
 8007504:	b083      	sub	sp, #12
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800750e:	4618      	mov	r0, r3
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	bc80      	pop	{r7}
 8007516:	4770      	bx	lr

08007518 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b088      	sub	sp, #32
 800751c:	af02      	add	r7, sp, #8
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	4608      	mov	r0, r1
 8007522:	4611      	mov	r1, r2
 8007524:	461a      	mov	r2, r3
 8007526:	4603      	mov	r3, r0
 8007528:	817b      	strh	r3, [r7, #10]
 800752a:	460b      	mov	r3, r1
 800752c:	813b      	strh	r3, [r7, #8]
 800752e:	4613      	mov	r3, r2
 8007530:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007540:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	6a3b      	ldr	r3, [r7, #32]
 8007548:	2200      	movs	r2, #0
 800754a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	f000 f960 	bl	8007814 <I2C_WaitOnFlagUntilTimeout>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00d      	beq.n	8007576 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007564:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007568:	d103      	bne.n	8007572 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007570:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e05f      	b.n	8007636 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007576:	897b      	ldrh	r3, [r7, #10]
 8007578:	b2db      	uxtb	r3, r3
 800757a:	461a      	mov	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007584:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007588:	6a3a      	ldr	r2, [r7, #32]
 800758a:	492d      	ldr	r1, [pc, #180]	@ (8007640 <I2C_RequestMemoryWrite+0x128>)
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f000 f9bb 	bl	8007908 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d001      	beq.n	800759c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	e04c      	b.n	8007636 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800759c:	2300      	movs	r3, #0
 800759e:	617b      	str	r3, [r7, #20]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	695b      	ldr	r3, [r3, #20]
 80075a6:	617b      	str	r3, [r7, #20]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	699b      	ldr	r3, [r3, #24]
 80075ae:	617b      	str	r3, [r7, #20]
 80075b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075b4:	6a39      	ldr	r1, [r7, #32]
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f000 fa46 	bl	8007a48 <I2C_WaitOnTXEFlagUntilTimeout>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00d      	beq.n	80075de <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c6:	2b04      	cmp	r3, #4
 80075c8:	d107      	bne.n	80075da <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e02b      	b.n	8007636 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80075de:	88fb      	ldrh	r3, [r7, #6]
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d105      	bne.n	80075f0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80075e4:	893b      	ldrh	r3, [r7, #8]
 80075e6:	b2da      	uxtb	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	611a      	str	r2, [r3, #16]
 80075ee:	e021      	b.n	8007634 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80075f0:	893b      	ldrh	r3, [r7, #8]
 80075f2:	0a1b      	lsrs	r3, r3, #8
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	b2da      	uxtb	r2, r3
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007600:	6a39      	ldr	r1, [r7, #32]
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f000 fa20 	bl	8007a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00d      	beq.n	800762a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007612:	2b04      	cmp	r3, #4
 8007614:	d107      	bne.n	8007626 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007624:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e005      	b.n	8007636 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800762a:	893b      	ldrh	r3, [r7, #8]
 800762c:	b2da      	uxtb	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3718      	adds	r7, #24
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	00010002 	.word	0x00010002

08007644 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b088      	sub	sp, #32
 8007648:	af02      	add	r7, sp, #8
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	4608      	mov	r0, r1
 800764e:	4611      	mov	r1, r2
 8007650:	461a      	mov	r2, r3
 8007652:	4603      	mov	r3, r0
 8007654:	817b      	strh	r3, [r7, #10]
 8007656:	460b      	mov	r3, r1
 8007658:	813b      	strh	r3, [r7, #8]
 800765a:	4613      	mov	r3, r2
 800765c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800766c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800767c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800767e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	6a3b      	ldr	r3, [r7, #32]
 8007684:	2200      	movs	r2, #0
 8007686:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f000 f8c2 	bl	8007814 <I2C_WaitOnFlagUntilTimeout>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00d      	beq.n	80076b2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076a4:	d103      	bne.n	80076ae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80076ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e0aa      	b.n	8007808 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80076b2:	897b      	ldrh	r3, [r7, #10]
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	461a      	mov	r2, r3
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80076c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80076c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c4:	6a3a      	ldr	r2, [r7, #32]
 80076c6:	4952      	ldr	r1, [pc, #328]	@ (8007810 <I2C_RequestMemoryRead+0x1cc>)
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f000 f91d 	bl	8007908 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d001      	beq.n	80076d8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e097      	b.n	8007808 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076d8:	2300      	movs	r3, #0
 80076da:	617b      	str	r3, [r7, #20]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	617b      	str	r3, [r7, #20]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	617b      	str	r3, [r7, #20]
 80076ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076f0:	6a39      	ldr	r1, [r7, #32]
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f000 f9a8 	bl	8007a48 <I2C_WaitOnTXEFlagUntilTimeout>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00d      	beq.n	800771a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007702:	2b04      	cmp	r3, #4
 8007704:	d107      	bne.n	8007716 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007714:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e076      	b.n	8007808 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800771a:	88fb      	ldrh	r3, [r7, #6]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d105      	bne.n	800772c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007720:	893b      	ldrh	r3, [r7, #8]
 8007722:	b2da      	uxtb	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	611a      	str	r2, [r3, #16]
 800772a:	e021      	b.n	8007770 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800772c:	893b      	ldrh	r3, [r7, #8]
 800772e:	0a1b      	lsrs	r3, r3, #8
 8007730:	b29b      	uxth	r3, r3
 8007732:	b2da      	uxtb	r2, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800773a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800773c:	6a39      	ldr	r1, [r7, #32]
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f000 f982 	bl	8007a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00d      	beq.n	8007766 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800774e:	2b04      	cmp	r3, #4
 8007750:	d107      	bne.n	8007762 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007760:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e050      	b.n	8007808 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007766:	893b      	ldrh	r3, [r7, #8]
 8007768:	b2da      	uxtb	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007770:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007772:	6a39      	ldr	r1, [r7, #32]
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f000 f967 	bl	8007a48 <I2C_WaitOnTXEFlagUntilTimeout>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00d      	beq.n	800779c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007784:	2b04      	cmp	r3, #4
 8007786:	d107      	bne.n	8007798 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007796:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e035      	b.n	8007808 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80077aa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80077ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	6a3b      	ldr	r3, [r7, #32]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f000 f82b 	bl	8007814 <I2C_WaitOnFlagUntilTimeout>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00d      	beq.n	80077e0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077d2:	d103      	bne.n	80077dc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80077dc:	2303      	movs	r3, #3
 80077de:	e013      	b.n	8007808 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80077e0:	897b      	ldrh	r3, [r7, #10]
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	f043 0301 	orr.w	r3, r3, #1
 80077e8:	b2da      	uxtb	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80077f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f2:	6a3a      	ldr	r2, [r7, #32]
 80077f4:	4906      	ldr	r1, [pc, #24]	@ (8007810 <I2C_RequestMemoryRead+0x1cc>)
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f000 f886 	bl	8007908 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d001      	beq.n	8007806 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e000      	b.n	8007808 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3718      	adds	r7, #24
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	00010002 	.word	0x00010002

08007814 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	603b      	str	r3, [r7, #0]
 8007820:	4613      	mov	r3, r2
 8007822:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007824:	e048      	b.n	80078b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782c:	d044      	beq.n	80078b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800782e:	f7fd ffd3 	bl	80057d8 <HAL_GetTick>
 8007832:	4602      	mov	r2, r0
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	1ad3      	subs	r3, r2, r3
 8007838:	683a      	ldr	r2, [r7, #0]
 800783a:	429a      	cmp	r2, r3
 800783c:	d302      	bcc.n	8007844 <I2C_WaitOnFlagUntilTimeout+0x30>
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d139      	bne.n	80078b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	0c1b      	lsrs	r3, r3, #16
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b01      	cmp	r3, #1
 800784c:	d10d      	bne.n	800786a <I2C_WaitOnFlagUntilTimeout+0x56>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	695b      	ldr	r3, [r3, #20]
 8007854:	43da      	mvns	r2, r3
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	4013      	ands	r3, r2
 800785a:	b29b      	uxth	r3, r3
 800785c:	2b00      	cmp	r3, #0
 800785e:	bf0c      	ite	eq
 8007860:	2301      	moveq	r3, #1
 8007862:	2300      	movne	r3, #0
 8007864:	b2db      	uxtb	r3, r3
 8007866:	461a      	mov	r2, r3
 8007868:	e00c      	b.n	8007884 <I2C_WaitOnFlagUntilTimeout+0x70>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	43da      	mvns	r2, r3
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	4013      	ands	r3, r2
 8007876:	b29b      	uxth	r3, r3
 8007878:	2b00      	cmp	r3, #0
 800787a:	bf0c      	ite	eq
 800787c:	2301      	moveq	r3, #1
 800787e:	2300      	movne	r3, #0
 8007880:	b2db      	uxtb	r3, r3
 8007882:	461a      	mov	r2, r3
 8007884:	79fb      	ldrb	r3, [r7, #7]
 8007886:	429a      	cmp	r2, r3
 8007888:	d116      	bne.n	80078b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2220      	movs	r2, #32
 8007894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a4:	f043 0220 	orr.w	r2, r3, #32
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e023      	b.n	8007900 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	0c1b      	lsrs	r3, r3, #16
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d10d      	bne.n	80078de <I2C_WaitOnFlagUntilTimeout+0xca>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	695b      	ldr	r3, [r3, #20]
 80078c8:	43da      	mvns	r2, r3
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	4013      	ands	r3, r2
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	bf0c      	ite	eq
 80078d4:	2301      	moveq	r3, #1
 80078d6:	2300      	movne	r3, #0
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	461a      	mov	r2, r3
 80078dc:	e00c      	b.n	80078f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	43da      	mvns	r2, r3
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	4013      	ands	r3, r2
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	bf0c      	ite	eq
 80078f0:	2301      	moveq	r3, #1
 80078f2:	2300      	movne	r3, #0
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	461a      	mov	r2, r3
 80078f8:	79fb      	ldrb	r3, [r7, #7]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d093      	beq.n	8007826 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	607a      	str	r2, [r7, #4]
 8007914:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007916:	e071      	b.n	80079fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007922:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007926:	d123      	bne.n	8007970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007936:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007940:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2220      	movs	r2, #32
 800794c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800795c:	f043 0204 	orr.w	r2, r3, #4
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e067      	b.n	8007a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007976:	d041      	beq.n	80079fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007978:	f7fd ff2e 	bl	80057d8 <HAL_GetTick>
 800797c:	4602      	mov	r2, r0
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	429a      	cmp	r2, r3
 8007986:	d302      	bcc.n	800798e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d136      	bne.n	80079fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	0c1b      	lsrs	r3, r3, #16
 8007992:	b2db      	uxtb	r3, r3
 8007994:	2b01      	cmp	r3, #1
 8007996:	d10c      	bne.n	80079b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	695b      	ldr	r3, [r3, #20]
 800799e:	43da      	mvns	r2, r3
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	4013      	ands	r3, r2
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	bf14      	ite	ne
 80079aa:	2301      	movne	r3, #1
 80079ac:	2300      	moveq	r3, #0
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	e00b      	b.n	80079ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	699b      	ldr	r3, [r3, #24]
 80079b8:	43da      	mvns	r2, r3
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	4013      	ands	r3, r2
 80079be:	b29b      	uxth	r3, r3
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	bf14      	ite	ne
 80079c4:	2301      	movne	r3, #1
 80079c6:	2300      	moveq	r3, #0
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d016      	beq.n	80079fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2220      	movs	r2, #32
 80079d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2200      	movs	r2, #0
 80079e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079e8:	f043 0220 	orr.w	r2, r3, #32
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e021      	b.n	8007a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	0c1b      	lsrs	r3, r3, #16
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d10c      	bne.n	8007a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	695b      	ldr	r3, [r3, #20]
 8007a0c:	43da      	mvns	r2, r3
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	4013      	ands	r3, r2
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	bf14      	ite	ne
 8007a18:	2301      	movne	r3, #1
 8007a1a:	2300      	moveq	r3, #0
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	e00b      	b.n	8007a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	43da      	mvns	r2, r3
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	bf14      	ite	ne
 8007a32:	2301      	movne	r3, #1
 8007a34:	2300      	moveq	r3, #0
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f47f af6d 	bne.w	8007918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a54:	e034      	b.n	8007ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f000 f8e3 	bl	8007c22 <I2C_IsAcknowledgeFailed>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d001      	beq.n	8007a66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e034      	b.n	8007ad0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a6c:	d028      	beq.n	8007ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a6e:	f7fd feb3 	bl	80057d8 <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	68ba      	ldr	r2, [r7, #8]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d302      	bcc.n	8007a84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d11d      	bne.n	8007ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a8e:	2b80      	cmp	r3, #128	@ 0x80
 8007a90:	d016      	beq.n	8007ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2220      	movs	r2, #32
 8007a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aac:	f043 0220 	orr.w	r2, r3, #32
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e007      	b.n	8007ad0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	695b      	ldr	r3, [r3, #20]
 8007ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007aca:	2b80      	cmp	r3, #128	@ 0x80
 8007acc:	d1c3      	bne.n	8007a56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007ae4:	e034      	b.n	8007b50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007ae6:	68f8      	ldr	r0, [r7, #12]
 8007ae8:	f000 f89b 	bl	8007c22 <I2C_IsAcknowledgeFailed>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e034      	b.n	8007b60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007afc:	d028      	beq.n	8007b50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007afe:	f7fd fe6b 	bl	80057d8 <HAL_GetTick>
 8007b02:	4602      	mov	r2, r0
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	1ad3      	subs	r3, r2, r3
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d302      	bcc.n	8007b14 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d11d      	bne.n	8007b50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	695b      	ldr	r3, [r3, #20]
 8007b1a:	f003 0304 	and.w	r3, r3, #4
 8007b1e:	2b04      	cmp	r3, #4
 8007b20:	d016      	beq.n	8007b50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2200      	movs	r2, #0
 8007b26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2220      	movs	r2, #32
 8007b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b3c:	f043 0220 	orr.w	r2, r3, #32
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e007      	b.n	8007b60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	695b      	ldr	r3, [r3, #20]
 8007b56:	f003 0304 	and.w	r3, r3, #4
 8007b5a:	2b04      	cmp	r3, #4
 8007b5c:	d1c3      	bne.n	8007ae6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007b74:	e049      	b.n	8007c0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	695b      	ldr	r3, [r3, #20]
 8007b7c:	f003 0310 	and.w	r3, r3, #16
 8007b80:	2b10      	cmp	r3, #16
 8007b82:	d119      	bne.n	8007bb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f06f 0210 	mvn.w	r2, #16
 8007b8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2220      	movs	r2, #32
 8007b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e030      	b.n	8007c1a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bb8:	f7fd fe0e 	bl	80057d8 <HAL_GetTick>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d302      	bcc.n	8007bce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d11d      	bne.n	8007c0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	695b      	ldr	r3, [r3, #20]
 8007bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bd8:	2b40      	cmp	r3, #64	@ 0x40
 8007bda:	d016      	beq.n	8007c0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2220      	movs	r2, #32
 8007be6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bf6:	f043 0220 	orr.w	r2, r3, #32
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e007      	b.n	8007c1a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	695b      	ldr	r3, [r3, #20]
 8007c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c14:	2b40      	cmp	r3, #64	@ 0x40
 8007c16:	d1ae      	bne.n	8007b76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007c22:	b480      	push	{r7}
 8007c24:	b083      	sub	sp, #12
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	695b      	ldr	r3, [r3, #20]
 8007c30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c38:	d11b      	bne.n	8007c72 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007c42:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2220      	movs	r2, #32
 8007c4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c5e:	f043 0204 	orr.w	r2, r3, #4
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e000      	b.n	8007c74 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bc80      	pop	{r7}
 8007c7c:	4770      	bx	lr
	...

08007c80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b088      	sub	sp, #32
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d101      	bne.n	8007c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e31d      	b.n	80082ce <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c92:	4b94      	ldr	r3, [pc, #592]	@ (8007ee4 <HAL_RCC_OscConfig+0x264>)
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	f003 030c 	and.w	r3, r3, #12
 8007c9a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c9c:	4b91      	ldr	r3, [pc, #580]	@ (8007ee4 <HAL_RCC_OscConfig+0x264>)
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ca4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d07b      	beq.n	8007daa <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	2b08      	cmp	r3, #8
 8007cb6:	d006      	beq.n	8007cc6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	2b0c      	cmp	r3, #12
 8007cbc:	d10f      	bne.n	8007cde <HAL_RCC_OscConfig+0x5e>
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cc4:	d10b      	bne.n	8007cde <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cc6:	4b87      	ldr	r3, [pc, #540]	@ (8007ee4 <HAL_RCC_OscConfig+0x264>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d06a      	beq.n	8007da8 <HAL_RCC_OscConfig+0x128>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d166      	bne.n	8007da8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e2f7      	b.n	80082ce <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d106      	bne.n	8007cf4 <HAL_RCC_OscConfig+0x74>
 8007ce6:	4b7f      	ldr	r3, [pc, #508]	@ (8007ee4 <HAL_RCC_OscConfig+0x264>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a7e      	ldr	r2, [pc, #504]	@ (8007ee4 <HAL_RCC_OscConfig+0x264>)
 8007cec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cf0:	6013      	str	r3, [r2, #0]
 8007cf2:	e02d      	b.n	8007d50 <HAL_RCC_OscConfig+0xd0>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10c      	bne.n	8007d16 <HAL_RCC_OscConfig+0x96>
 8007cfc:	4b79      	ldr	r3, [pc, #484]	@ (8007ee4 <HAL_RCC_OscConfig+0x264>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a78      	ldr	r2, [pc, #480]	@ (8007ee4 <HAL_RCC_OscConfig+0x264>)
 8007d02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d06:	6013      	str	r3, [r2, #0]
 8007d08:	4b76      	ldr	r3, [pc, #472]	@ (8007ee4 <HAL_RCC_OscConfig+0x264>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a75      	ldr	r2, [pc, #468]	@ (8007ee4 <HAL_RCC_OscConfig+0x264>)
 8007d0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d12:	6013      	str	r3, [r2, #0]
 8007d14:	e01c      	b.n	8007d50 <HAL_RCC_OscConfig+0xd0>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	2b05      	cmp	r3, #5
 8007d1c:	d10c      	bne.n	8007d38 <HAL_RCC_OscConfig+0xb8>
 8007d1e:	4b71      	ldr	r3, [pc, #452]	@ (8007ee4 <HAL_RCC_OscConfig+0x264>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a70      	ldr	r2, [pc, #448]	@ (8007ee4 <HAL_RCC_OscConfig+0x264>)
 8007d24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d28:	6013      	str	r3, [r2, #0]
 8007d2a:	4b6e      	ldr	r3, [pc, #440]	@ (8007ee4 <HAL_RCC_OscConfig+0x264>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a6d      	ldr	r2, [pc, #436]	@ (8007ee4 <HAL_RCC_OscConfig+0x264>)
 8007d30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d34:	6013      	str	r3, [r2, #0]
 8007d36:	e00b      	b.n	8007d50 <HAL_RCC_OscConfig+0xd0>
 8007d38:	4b6a      	ldr	r3, [pc, #424]	@ (8007ee4 <HAL_RCC_OscConfig+0x264>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a69      	ldr	r2, [pc, #420]	@ (8007ee4 <HAL_RCC_OscConfig+0x264>)
 8007d3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d42:	6013      	str	r3, [r2, #0]
 8007d44:	4b67      	ldr	r3, [pc, #412]	@ (8007ee4 <HAL_RCC_OscConfig+0x264>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a66      	ldr	r2, [pc, #408]	@ (8007ee4 <HAL_RCC_OscConfig+0x264>)
 8007d4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d013      	beq.n	8007d80 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d58:	f7fd fd3e 	bl	80057d8 <HAL_GetTick>
 8007d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d5e:	e008      	b.n	8007d72 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d60:	f7fd fd3a 	bl	80057d8 <HAL_GetTick>
 8007d64:	4602      	mov	r2, r0
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	2b64      	cmp	r3, #100	@ 0x64
 8007d6c:	d901      	bls.n	8007d72 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	e2ad      	b.n	80082ce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d72:	4b5c      	ldr	r3, [pc, #368]	@ (8007ee4 <HAL_RCC_OscConfig+0x264>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d0f0      	beq.n	8007d60 <HAL_RCC_OscConfig+0xe0>
 8007d7e:	e014      	b.n	8007daa <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d80:	f7fd fd2a 	bl	80057d8 <HAL_GetTick>
 8007d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007d86:	e008      	b.n	8007d9a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d88:	f7fd fd26 	bl	80057d8 <HAL_GetTick>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	2b64      	cmp	r3, #100	@ 0x64
 8007d94:	d901      	bls.n	8007d9a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e299      	b.n	80082ce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007d9a:	4b52      	ldr	r3, [pc, #328]	@ (8007ee4 <HAL_RCC_OscConfig+0x264>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1f0      	bne.n	8007d88 <HAL_RCC_OscConfig+0x108>
 8007da6:	e000      	b.n	8007daa <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f003 0302 	and.w	r3, r3, #2
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d05a      	beq.n	8007e6c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	2b04      	cmp	r3, #4
 8007dba:	d005      	beq.n	8007dc8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	2b0c      	cmp	r3, #12
 8007dc0:	d119      	bne.n	8007df6 <HAL_RCC_OscConfig+0x176>
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d116      	bne.n	8007df6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dc8:	4b46      	ldr	r3, [pc, #280]	@ (8007ee4 <HAL_RCC_OscConfig+0x264>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0302 	and.w	r3, r3, #2
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d005      	beq.n	8007de0 <HAL_RCC_OscConfig+0x160>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d001      	beq.n	8007de0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e276      	b.n	80082ce <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007de0:	4b40      	ldr	r3, [pc, #256]	@ (8007ee4 <HAL_RCC_OscConfig+0x264>)
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	021b      	lsls	r3, r3, #8
 8007dee:	493d      	ldr	r1, [pc, #244]	@ (8007ee4 <HAL_RCC_OscConfig+0x264>)
 8007df0:	4313      	orrs	r3, r2
 8007df2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007df4:	e03a      	b.n	8007e6c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d020      	beq.n	8007e40 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007dfe:	4b3a      	ldr	r3, [pc, #232]	@ (8007ee8 <HAL_RCC_OscConfig+0x268>)
 8007e00:	2201      	movs	r2, #1
 8007e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e04:	f7fd fce8 	bl	80057d8 <HAL_GetTick>
 8007e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e0a:	e008      	b.n	8007e1e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e0c:	f7fd fce4 	bl	80057d8 <HAL_GetTick>
 8007e10:	4602      	mov	r2, r0
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d901      	bls.n	8007e1e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e257      	b.n	80082ce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e1e:	4b31      	ldr	r3, [pc, #196]	@ (8007ee4 <HAL_RCC_OscConfig+0x264>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 0302 	and.w	r3, r3, #2
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d0f0      	beq.n	8007e0c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e2a:	4b2e      	ldr	r3, [pc, #184]	@ (8007ee4 <HAL_RCC_OscConfig+0x264>)
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	021b      	lsls	r3, r3, #8
 8007e38:	492a      	ldr	r1, [pc, #168]	@ (8007ee4 <HAL_RCC_OscConfig+0x264>)
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	604b      	str	r3, [r1, #4]
 8007e3e:	e015      	b.n	8007e6c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e40:	4b29      	ldr	r3, [pc, #164]	@ (8007ee8 <HAL_RCC_OscConfig+0x268>)
 8007e42:	2200      	movs	r2, #0
 8007e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e46:	f7fd fcc7 	bl	80057d8 <HAL_GetTick>
 8007e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007e4c:	e008      	b.n	8007e60 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e4e:	f7fd fcc3 	bl	80057d8 <HAL_GetTick>
 8007e52:	4602      	mov	r2, r0
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	1ad3      	subs	r3, r2, r3
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d901      	bls.n	8007e60 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	e236      	b.n	80082ce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007e60:	4b20      	ldr	r3, [pc, #128]	@ (8007ee4 <HAL_RCC_OscConfig+0x264>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 0302 	and.w	r3, r3, #2
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1f0      	bne.n	8007e4e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 0310 	and.w	r3, r3, #16
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f000 80b8 	beq.w	8007fea <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d170      	bne.n	8007f62 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007e80:	4b18      	ldr	r3, [pc, #96]	@ (8007ee4 <HAL_RCC_OscConfig+0x264>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d005      	beq.n	8007e98 <HAL_RCC_OscConfig+0x218>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d101      	bne.n	8007e98 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e21a      	b.n	80082ce <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6a1a      	ldr	r2, [r3, #32]
 8007e9c:	4b11      	ldr	r3, [pc, #68]	@ (8007ee4 <HAL_RCC_OscConfig+0x264>)
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d921      	bls.n	8007eec <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a1b      	ldr	r3, [r3, #32]
 8007eac:	4618      	mov	r0, r3
 8007eae:	f000 fc7d 	bl	80087ac <RCC_SetFlashLatencyFromMSIRange>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d001      	beq.n	8007ebc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e208      	b.n	80082ce <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007ebc:	4b09      	ldr	r3, [pc, #36]	@ (8007ee4 <HAL_RCC_OscConfig+0x264>)
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a1b      	ldr	r3, [r3, #32]
 8007ec8:	4906      	ldr	r1, [pc, #24]	@ (8007ee4 <HAL_RCC_OscConfig+0x264>)
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007ece:	4b05      	ldr	r3, [pc, #20]	@ (8007ee4 <HAL_RCC_OscConfig+0x264>)
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	69db      	ldr	r3, [r3, #28]
 8007eda:	061b      	lsls	r3, r3, #24
 8007edc:	4901      	ldr	r1, [pc, #4]	@ (8007ee4 <HAL_RCC_OscConfig+0x264>)
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	604b      	str	r3, [r1, #4]
 8007ee2:	e020      	b.n	8007f26 <HAL_RCC_OscConfig+0x2a6>
 8007ee4:	40023800 	.word	0x40023800
 8007ee8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007eec:	4b99      	ldr	r3, [pc, #612]	@ (8008154 <HAL_RCC_OscConfig+0x4d4>)
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6a1b      	ldr	r3, [r3, #32]
 8007ef8:	4996      	ldr	r1, [pc, #600]	@ (8008154 <HAL_RCC_OscConfig+0x4d4>)
 8007efa:	4313      	orrs	r3, r2
 8007efc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007efe:	4b95      	ldr	r3, [pc, #596]	@ (8008154 <HAL_RCC_OscConfig+0x4d4>)
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	69db      	ldr	r3, [r3, #28]
 8007f0a:	061b      	lsls	r3, r3, #24
 8007f0c:	4991      	ldr	r1, [pc, #580]	@ (8008154 <HAL_RCC_OscConfig+0x4d4>)
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a1b      	ldr	r3, [r3, #32]
 8007f16:	4618      	mov	r0, r3
 8007f18:	f000 fc48 	bl	80087ac <RCC_SetFlashLatencyFromMSIRange>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d001      	beq.n	8007f26 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e1d3      	b.n	80082ce <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a1b      	ldr	r3, [r3, #32]
 8007f2a:	0b5b      	lsrs	r3, r3, #13
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007f32:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8007f36:	4a87      	ldr	r2, [pc, #540]	@ (8008154 <HAL_RCC_OscConfig+0x4d4>)
 8007f38:	6892      	ldr	r2, [r2, #8]
 8007f3a:	0912      	lsrs	r2, r2, #4
 8007f3c:	f002 020f 	and.w	r2, r2, #15
 8007f40:	4985      	ldr	r1, [pc, #532]	@ (8008158 <HAL_RCC_OscConfig+0x4d8>)
 8007f42:	5c8a      	ldrb	r2, [r1, r2]
 8007f44:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007f46:	4a85      	ldr	r2, [pc, #532]	@ (800815c <HAL_RCC_OscConfig+0x4dc>)
 8007f48:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007f4a:	4b85      	ldr	r3, [pc, #532]	@ (8008160 <HAL_RCC_OscConfig+0x4e0>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7fd fbf6 	bl	8005740 <HAL_InitTick>
 8007f54:	4603      	mov	r3, r0
 8007f56:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007f58:	7bfb      	ldrb	r3, [r7, #15]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d045      	beq.n	8007fea <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8007f5e:	7bfb      	ldrb	r3, [r7, #15]
 8007f60:	e1b5      	b.n	80082ce <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	699b      	ldr	r3, [r3, #24]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d029      	beq.n	8007fbe <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007f6a:	4b7e      	ldr	r3, [pc, #504]	@ (8008164 <HAL_RCC_OscConfig+0x4e4>)
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f70:	f7fd fc32 	bl	80057d8 <HAL_GetTick>
 8007f74:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007f76:	e008      	b.n	8007f8a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007f78:	f7fd fc2e 	bl	80057d8 <HAL_GetTick>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d901      	bls.n	8007f8a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8007f86:	2303      	movs	r3, #3
 8007f88:	e1a1      	b.n	80082ce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007f8a:	4b72      	ldr	r3, [pc, #456]	@ (8008154 <HAL_RCC_OscConfig+0x4d4>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d0f0      	beq.n	8007f78 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007f96:	4b6f      	ldr	r3, [pc, #444]	@ (8008154 <HAL_RCC_OscConfig+0x4d4>)
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a1b      	ldr	r3, [r3, #32]
 8007fa2:	496c      	ldr	r1, [pc, #432]	@ (8008154 <HAL_RCC_OscConfig+0x4d4>)
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007fa8:	4b6a      	ldr	r3, [pc, #424]	@ (8008154 <HAL_RCC_OscConfig+0x4d4>)
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	69db      	ldr	r3, [r3, #28]
 8007fb4:	061b      	lsls	r3, r3, #24
 8007fb6:	4967      	ldr	r1, [pc, #412]	@ (8008154 <HAL_RCC_OscConfig+0x4d4>)
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	604b      	str	r3, [r1, #4]
 8007fbc:	e015      	b.n	8007fea <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007fbe:	4b69      	ldr	r3, [pc, #420]	@ (8008164 <HAL_RCC_OscConfig+0x4e4>)
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fc4:	f7fd fc08 	bl	80057d8 <HAL_GetTick>
 8007fc8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007fca:	e008      	b.n	8007fde <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007fcc:	f7fd fc04 	bl	80057d8 <HAL_GetTick>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d901      	bls.n	8007fde <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e177      	b.n	80082ce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007fde:	4b5d      	ldr	r3, [pc, #372]	@ (8008154 <HAL_RCC_OscConfig+0x4d4>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1f0      	bne.n	8007fcc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f003 0308 	and.w	r3, r3, #8
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d030      	beq.n	8008058 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	695b      	ldr	r3, [r3, #20]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d016      	beq.n	800802c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ffe:	4b5a      	ldr	r3, [pc, #360]	@ (8008168 <HAL_RCC_OscConfig+0x4e8>)
 8008000:	2201      	movs	r2, #1
 8008002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008004:	f7fd fbe8 	bl	80057d8 <HAL_GetTick>
 8008008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800800a:	e008      	b.n	800801e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800800c:	f7fd fbe4 	bl	80057d8 <HAL_GetTick>
 8008010:	4602      	mov	r2, r0
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	1ad3      	subs	r3, r2, r3
 8008016:	2b02      	cmp	r3, #2
 8008018:	d901      	bls.n	800801e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800801a:	2303      	movs	r3, #3
 800801c:	e157      	b.n	80082ce <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800801e:	4b4d      	ldr	r3, [pc, #308]	@ (8008154 <HAL_RCC_OscConfig+0x4d4>)
 8008020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008022:	f003 0302 	and.w	r3, r3, #2
 8008026:	2b00      	cmp	r3, #0
 8008028:	d0f0      	beq.n	800800c <HAL_RCC_OscConfig+0x38c>
 800802a:	e015      	b.n	8008058 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800802c:	4b4e      	ldr	r3, [pc, #312]	@ (8008168 <HAL_RCC_OscConfig+0x4e8>)
 800802e:	2200      	movs	r2, #0
 8008030:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008032:	f7fd fbd1 	bl	80057d8 <HAL_GetTick>
 8008036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008038:	e008      	b.n	800804c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800803a:	f7fd fbcd 	bl	80057d8 <HAL_GetTick>
 800803e:	4602      	mov	r2, r0
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	2b02      	cmp	r3, #2
 8008046:	d901      	bls.n	800804c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	e140      	b.n	80082ce <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800804c:	4b41      	ldr	r3, [pc, #260]	@ (8008154 <HAL_RCC_OscConfig+0x4d4>)
 800804e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008050:	f003 0302 	and.w	r3, r3, #2
 8008054:	2b00      	cmp	r3, #0
 8008056:	d1f0      	bne.n	800803a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 0304 	and.w	r3, r3, #4
 8008060:	2b00      	cmp	r3, #0
 8008062:	f000 80b5 	beq.w	80081d0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008066:	2300      	movs	r3, #0
 8008068:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800806a:	4b3a      	ldr	r3, [pc, #232]	@ (8008154 <HAL_RCC_OscConfig+0x4d4>)
 800806c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800806e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d10d      	bne.n	8008092 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008076:	4b37      	ldr	r3, [pc, #220]	@ (8008154 <HAL_RCC_OscConfig+0x4d4>)
 8008078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800807a:	4a36      	ldr	r2, [pc, #216]	@ (8008154 <HAL_RCC_OscConfig+0x4d4>)
 800807c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008080:	6253      	str	r3, [r2, #36]	@ 0x24
 8008082:	4b34      	ldr	r3, [pc, #208]	@ (8008154 <HAL_RCC_OscConfig+0x4d4>)
 8008084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008086:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800808a:	60bb      	str	r3, [r7, #8]
 800808c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800808e:	2301      	movs	r3, #1
 8008090:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008092:	4b36      	ldr	r3, [pc, #216]	@ (800816c <HAL_RCC_OscConfig+0x4ec>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800809a:	2b00      	cmp	r3, #0
 800809c:	d118      	bne.n	80080d0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800809e:	4b33      	ldr	r3, [pc, #204]	@ (800816c <HAL_RCC_OscConfig+0x4ec>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a32      	ldr	r2, [pc, #200]	@ (800816c <HAL_RCC_OscConfig+0x4ec>)
 80080a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80080aa:	f7fd fb95 	bl	80057d8 <HAL_GetTick>
 80080ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080b0:	e008      	b.n	80080c4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080b2:	f7fd fb91 	bl	80057d8 <HAL_GetTick>
 80080b6:	4602      	mov	r2, r0
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	2b64      	cmp	r3, #100	@ 0x64
 80080be:	d901      	bls.n	80080c4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e104      	b.n	80082ce <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080c4:	4b29      	ldr	r3, [pc, #164]	@ (800816c <HAL_RCC_OscConfig+0x4ec>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d0f0      	beq.n	80080b2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d106      	bne.n	80080e6 <HAL_RCC_OscConfig+0x466>
 80080d8:	4b1e      	ldr	r3, [pc, #120]	@ (8008154 <HAL_RCC_OscConfig+0x4d4>)
 80080da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080dc:	4a1d      	ldr	r2, [pc, #116]	@ (8008154 <HAL_RCC_OscConfig+0x4d4>)
 80080de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080e2:	6353      	str	r3, [r2, #52]	@ 0x34
 80080e4:	e02d      	b.n	8008142 <HAL_RCC_OscConfig+0x4c2>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d10c      	bne.n	8008108 <HAL_RCC_OscConfig+0x488>
 80080ee:	4b19      	ldr	r3, [pc, #100]	@ (8008154 <HAL_RCC_OscConfig+0x4d4>)
 80080f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080f2:	4a18      	ldr	r2, [pc, #96]	@ (8008154 <HAL_RCC_OscConfig+0x4d4>)
 80080f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080f8:	6353      	str	r3, [r2, #52]	@ 0x34
 80080fa:	4b16      	ldr	r3, [pc, #88]	@ (8008154 <HAL_RCC_OscConfig+0x4d4>)
 80080fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080fe:	4a15      	ldr	r2, [pc, #84]	@ (8008154 <HAL_RCC_OscConfig+0x4d4>)
 8008100:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008104:	6353      	str	r3, [r2, #52]	@ 0x34
 8008106:	e01c      	b.n	8008142 <HAL_RCC_OscConfig+0x4c2>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	2b05      	cmp	r3, #5
 800810e:	d10c      	bne.n	800812a <HAL_RCC_OscConfig+0x4aa>
 8008110:	4b10      	ldr	r3, [pc, #64]	@ (8008154 <HAL_RCC_OscConfig+0x4d4>)
 8008112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008114:	4a0f      	ldr	r2, [pc, #60]	@ (8008154 <HAL_RCC_OscConfig+0x4d4>)
 8008116:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800811a:	6353      	str	r3, [r2, #52]	@ 0x34
 800811c:	4b0d      	ldr	r3, [pc, #52]	@ (8008154 <HAL_RCC_OscConfig+0x4d4>)
 800811e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008120:	4a0c      	ldr	r2, [pc, #48]	@ (8008154 <HAL_RCC_OscConfig+0x4d4>)
 8008122:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008126:	6353      	str	r3, [r2, #52]	@ 0x34
 8008128:	e00b      	b.n	8008142 <HAL_RCC_OscConfig+0x4c2>
 800812a:	4b0a      	ldr	r3, [pc, #40]	@ (8008154 <HAL_RCC_OscConfig+0x4d4>)
 800812c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800812e:	4a09      	ldr	r2, [pc, #36]	@ (8008154 <HAL_RCC_OscConfig+0x4d4>)
 8008130:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008134:	6353      	str	r3, [r2, #52]	@ 0x34
 8008136:	4b07      	ldr	r3, [pc, #28]	@ (8008154 <HAL_RCC_OscConfig+0x4d4>)
 8008138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800813a:	4a06      	ldr	r2, [pc, #24]	@ (8008154 <HAL_RCC_OscConfig+0x4d4>)
 800813c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008140:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d024      	beq.n	8008194 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800814a:	f7fd fb45 	bl	80057d8 <HAL_GetTick>
 800814e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008150:	e019      	b.n	8008186 <HAL_RCC_OscConfig+0x506>
 8008152:	bf00      	nop
 8008154:	40023800 	.word	0x40023800
 8008158:	0800dc58 	.word	0x0800dc58
 800815c:	20000010 	.word	0x20000010
 8008160:	200000cc 	.word	0x200000cc
 8008164:	42470020 	.word	0x42470020
 8008168:	42470680 	.word	0x42470680
 800816c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008170:	f7fd fb32 	bl	80057d8 <HAL_GetTick>
 8008174:	4602      	mov	r2, r0
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800817e:	4293      	cmp	r3, r2
 8008180:	d901      	bls.n	8008186 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8008182:	2303      	movs	r3, #3
 8008184:	e0a3      	b.n	80082ce <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008186:	4b54      	ldr	r3, [pc, #336]	@ (80082d8 <HAL_RCC_OscConfig+0x658>)
 8008188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800818a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800818e:	2b00      	cmp	r3, #0
 8008190:	d0ee      	beq.n	8008170 <HAL_RCC_OscConfig+0x4f0>
 8008192:	e014      	b.n	80081be <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008194:	f7fd fb20 	bl	80057d8 <HAL_GetTick>
 8008198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800819a:	e00a      	b.n	80081b2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800819c:	f7fd fb1c 	bl	80057d8 <HAL_GetTick>
 80081a0:	4602      	mov	r2, r0
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d901      	bls.n	80081b2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80081ae:	2303      	movs	r3, #3
 80081b0:	e08d      	b.n	80082ce <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80081b2:	4b49      	ldr	r3, [pc, #292]	@ (80082d8 <HAL_RCC_OscConfig+0x658>)
 80081b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d1ee      	bne.n	800819c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80081be:	7ffb      	ldrb	r3, [r7, #31]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d105      	bne.n	80081d0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80081c4:	4b44      	ldr	r3, [pc, #272]	@ (80082d8 <HAL_RCC_OscConfig+0x658>)
 80081c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081c8:	4a43      	ldr	r2, [pc, #268]	@ (80082d8 <HAL_RCC_OscConfig+0x658>)
 80081ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80081ce:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d079      	beq.n	80082cc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80081d8:	69bb      	ldr	r3, [r7, #24]
 80081da:	2b0c      	cmp	r3, #12
 80081dc:	d056      	beq.n	800828c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	d13b      	bne.n	800825e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081e6:	4b3d      	ldr	r3, [pc, #244]	@ (80082dc <HAL_RCC_OscConfig+0x65c>)
 80081e8:	2200      	movs	r2, #0
 80081ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081ec:	f7fd faf4 	bl	80057d8 <HAL_GetTick>
 80081f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80081f2:	e008      	b.n	8008206 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081f4:	f7fd faf0 	bl	80057d8 <HAL_GetTick>
 80081f8:	4602      	mov	r2, r0
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	2b02      	cmp	r3, #2
 8008200:	d901      	bls.n	8008206 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8008202:	2303      	movs	r3, #3
 8008204:	e063      	b.n	80082ce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008206:	4b34      	ldr	r3, [pc, #208]	@ (80082d8 <HAL_RCC_OscConfig+0x658>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1f0      	bne.n	80081f4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008212:	4b31      	ldr	r3, [pc, #196]	@ (80082d8 <HAL_RCC_OscConfig+0x658>)
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008222:	4319      	orrs	r1, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008228:	430b      	orrs	r3, r1
 800822a:	492b      	ldr	r1, [pc, #172]	@ (80082d8 <HAL_RCC_OscConfig+0x658>)
 800822c:	4313      	orrs	r3, r2
 800822e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008230:	4b2a      	ldr	r3, [pc, #168]	@ (80082dc <HAL_RCC_OscConfig+0x65c>)
 8008232:	2201      	movs	r2, #1
 8008234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008236:	f7fd facf 	bl	80057d8 <HAL_GetTick>
 800823a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800823c:	e008      	b.n	8008250 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800823e:	f7fd facb 	bl	80057d8 <HAL_GetTick>
 8008242:	4602      	mov	r2, r0
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	1ad3      	subs	r3, r2, r3
 8008248:	2b02      	cmp	r3, #2
 800824a:	d901      	bls.n	8008250 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800824c:	2303      	movs	r3, #3
 800824e:	e03e      	b.n	80082ce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008250:	4b21      	ldr	r3, [pc, #132]	@ (80082d8 <HAL_RCC_OscConfig+0x658>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008258:	2b00      	cmp	r3, #0
 800825a:	d0f0      	beq.n	800823e <HAL_RCC_OscConfig+0x5be>
 800825c:	e036      	b.n	80082cc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800825e:	4b1f      	ldr	r3, [pc, #124]	@ (80082dc <HAL_RCC_OscConfig+0x65c>)
 8008260:	2200      	movs	r2, #0
 8008262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008264:	f7fd fab8 	bl	80057d8 <HAL_GetTick>
 8008268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800826a:	e008      	b.n	800827e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800826c:	f7fd fab4 	bl	80057d8 <HAL_GetTick>
 8008270:	4602      	mov	r2, r0
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	2b02      	cmp	r3, #2
 8008278:	d901      	bls.n	800827e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800827a:	2303      	movs	r3, #3
 800827c:	e027      	b.n	80082ce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800827e:	4b16      	ldr	r3, [pc, #88]	@ (80082d8 <HAL_RCC_OscConfig+0x658>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1f0      	bne.n	800826c <HAL_RCC_OscConfig+0x5ec>
 800828a:	e01f      	b.n	80082cc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008290:	2b01      	cmp	r3, #1
 8008292:	d101      	bne.n	8008298 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	e01a      	b.n	80082ce <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008298:	4b0f      	ldr	r3, [pc, #60]	@ (80082d8 <HAL_RCC_OscConfig+0x658>)
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d10d      	bne.n	80082c8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d106      	bne.n	80082c8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d001      	beq.n	80082cc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	e000      	b.n	80082ce <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80082cc:	2300      	movs	r3, #0
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3720      	adds	r7, #32
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	40023800 	.word	0x40023800
 80082dc:	42470060 	.word	0x42470060

080082e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d101      	bne.n	80082f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	e11a      	b.n	800852a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80082f4:	4b8f      	ldr	r3, [pc, #572]	@ (8008534 <HAL_RCC_ClockConfig+0x254>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	683a      	ldr	r2, [r7, #0]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d919      	bls.n	8008336 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d105      	bne.n	8008314 <HAL_RCC_ClockConfig+0x34>
 8008308:	4b8a      	ldr	r3, [pc, #552]	@ (8008534 <HAL_RCC_ClockConfig+0x254>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a89      	ldr	r2, [pc, #548]	@ (8008534 <HAL_RCC_ClockConfig+0x254>)
 800830e:	f043 0304 	orr.w	r3, r3, #4
 8008312:	6013      	str	r3, [r2, #0]
 8008314:	4b87      	ldr	r3, [pc, #540]	@ (8008534 <HAL_RCC_ClockConfig+0x254>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f023 0201 	bic.w	r2, r3, #1
 800831c:	4985      	ldr	r1, [pc, #532]	@ (8008534 <HAL_RCC_ClockConfig+0x254>)
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	4313      	orrs	r3, r2
 8008322:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008324:	4b83      	ldr	r3, [pc, #524]	@ (8008534 <HAL_RCC_ClockConfig+0x254>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 0301 	and.w	r3, r3, #1
 800832c:	683a      	ldr	r2, [r7, #0]
 800832e:	429a      	cmp	r2, r3
 8008330:	d001      	beq.n	8008336 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e0f9      	b.n	800852a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f003 0302 	and.w	r3, r3, #2
 800833e:	2b00      	cmp	r3, #0
 8008340:	d008      	beq.n	8008354 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008342:	4b7d      	ldr	r3, [pc, #500]	@ (8008538 <HAL_RCC_ClockConfig+0x258>)
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	497a      	ldr	r1, [pc, #488]	@ (8008538 <HAL_RCC_ClockConfig+0x258>)
 8008350:	4313      	orrs	r3, r2
 8008352:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 0301 	and.w	r3, r3, #1
 800835c:	2b00      	cmp	r3, #0
 800835e:	f000 808e 	beq.w	800847e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	2b02      	cmp	r3, #2
 8008368:	d107      	bne.n	800837a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800836a:	4b73      	ldr	r3, [pc, #460]	@ (8008538 <HAL_RCC_ClockConfig+0x258>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008372:	2b00      	cmp	r3, #0
 8008374:	d121      	bne.n	80083ba <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e0d7      	b.n	800852a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	2b03      	cmp	r3, #3
 8008380:	d107      	bne.n	8008392 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008382:	4b6d      	ldr	r3, [pc, #436]	@ (8008538 <HAL_RCC_ClockConfig+0x258>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800838a:	2b00      	cmp	r3, #0
 800838c:	d115      	bne.n	80083ba <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e0cb      	b.n	800852a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	2b01      	cmp	r3, #1
 8008398:	d107      	bne.n	80083aa <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800839a:	4b67      	ldr	r3, [pc, #412]	@ (8008538 <HAL_RCC_ClockConfig+0x258>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f003 0302 	and.w	r3, r3, #2
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d109      	bne.n	80083ba <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	e0bf      	b.n	800852a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80083aa:	4b63      	ldr	r3, [pc, #396]	@ (8008538 <HAL_RCC_ClockConfig+0x258>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d101      	bne.n	80083ba <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e0b7      	b.n	800852a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80083ba:	4b5f      	ldr	r3, [pc, #380]	@ (8008538 <HAL_RCC_ClockConfig+0x258>)
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f023 0203 	bic.w	r2, r3, #3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	495c      	ldr	r1, [pc, #368]	@ (8008538 <HAL_RCC_ClockConfig+0x258>)
 80083c8:	4313      	orrs	r3, r2
 80083ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80083cc:	f7fd fa04 	bl	80057d8 <HAL_GetTick>
 80083d0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d112      	bne.n	8008400 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80083da:	e00a      	b.n	80083f2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083dc:	f7fd f9fc 	bl	80057d8 <HAL_GetTick>
 80083e0:	4602      	mov	r2, r0
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d901      	bls.n	80083f2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80083ee:	2303      	movs	r3, #3
 80083f0:	e09b      	b.n	800852a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80083f2:	4b51      	ldr	r3, [pc, #324]	@ (8008538 <HAL_RCC_ClockConfig+0x258>)
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	f003 030c 	and.w	r3, r3, #12
 80083fa:	2b08      	cmp	r3, #8
 80083fc:	d1ee      	bne.n	80083dc <HAL_RCC_ClockConfig+0xfc>
 80083fe:	e03e      	b.n	800847e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	2b03      	cmp	r3, #3
 8008406:	d112      	bne.n	800842e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008408:	e00a      	b.n	8008420 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800840a:	f7fd f9e5 	bl	80057d8 <HAL_GetTick>
 800840e:	4602      	mov	r2, r0
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	1ad3      	subs	r3, r2, r3
 8008414:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008418:	4293      	cmp	r3, r2
 800841a:	d901      	bls.n	8008420 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800841c:	2303      	movs	r3, #3
 800841e:	e084      	b.n	800852a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008420:	4b45      	ldr	r3, [pc, #276]	@ (8008538 <HAL_RCC_ClockConfig+0x258>)
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	f003 030c 	and.w	r3, r3, #12
 8008428:	2b0c      	cmp	r3, #12
 800842a:	d1ee      	bne.n	800840a <HAL_RCC_ClockConfig+0x12a>
 800842c:	e027      	b.n	800847e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	2b01      	cmp	r3, #1
 8008434:	d11d      	bne.n	8008472 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008436:	e00a      	b.n	800844e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008438:	f7fd f9ce 	bl	80057d8 <HAL_GetTick>
 800843c:	4602      	mov	r2, r0
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008446:	4293      	cmp	r3, r2
 8008448:	d901      	bls.n	800844e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800844a:	2303      	movs	r3, #3
 800844c:	e06d      	b.n	800852a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800844e:	4b3a      	ldr	r3, [pc, #232]	@ (8008538 <HAL_RCC_ClockConfig+0x258>)
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	f003 030c 	and.w	r3, r3, #12
 8008456:	2b04      	cmp	r3, #4
 8008458:	d1ee      	bne.n	8008438 <HAL_RCC_ClockConfig+0x158>
 800845a:	e010      	b.n	800847e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800845c:	f7fd f9bc 	bl	80057d8 <HAL_GetTick>
 8008460:	4602      	mov	r2, r0
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800846a:	4293      	cmp	r3, r2
 800846c:	d901      	bls.n	8008472 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800846e:	2303      	movs	r3, #3
 8008470:	e05b      	b.n	800852a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008472:	4b31      	ldr	r3, [pc, #196]	@ (8008538 <HAL_RCC_ClockConfig+0x258>)
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	f003 030c 	and.w	r3, r3, #12
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1ee      	bne.n	800845c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800847e:	4b2d      	ldr	r3, [pc, #180]	@ (8008534 <HAL_RCC_ClockConfig+0x254>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f003 0301 	and.w	r3, r3, #1
 8008486:	683a      	ldr	r2, [r7, #0]
 8008488:	429a      	cmp	r2, r3
 800848a:	d219      	bcs.n	80084c0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	2b01      	cmp	r3, #1
 8008490:	d105      	bne.n	800849e <HAL_RCC_ClockConfig+0x1be>
 8008492:	4b28      	ldr	r3, [pc, #160]	@ (8008534 <HAL_RCC_ClockConfig+0x254>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a27      	ldr	r2, [pc, #156]	@ (8008534 <HAL_RCC_ClockConfig+0x254>)
 8008498:	f043 0304 	orr.w	r3, r3, #4
 800849c:	6013      	str	r3, [r2, #0]
 800849e:	4b25      	ldr	r3, [pc, #148]	@ (8008534 <HAL_RCC_ClockConfig+0x254>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f023 0201 	bic.w	r2, r3, #1
 80084a6:	4923      	ldr	r1, [pc, #140]	@ (8008534 <HAL_RCC_ClockConfig+0x254>)
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084ae:	4b21      	ldr	r3, [pc, #132]	@ (8008534 <HAL_RCC_ClockConfig+0x254>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f003 0301 	and.w	r3, r3, #1
 80084b6:	683a      	ldr	r2, [r7, #0]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d001      	beq.n	80084c0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	e034      	b.n	800852a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f003 0304 	and.w	r3, r3, #4
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d008      	beq.n	80084de <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80084cc:	4b1a      	ldr	r3, [pc, #104]	@ (8008538 <HAL_RCC_ClockConfig+0x258>)
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	4917      	ldr	r1, [pc, #92]	@ (8008538 <HAL_RCC_ClockConfig+0x258>)
 80084da:	4313      	orrs	r3, r2
 80084dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f003 0308 	and.w	r3, r3, #8
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d009      	beq.n	80084fe <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80084ea:	4b13      	ldr	r3, [pc, #76]	@ (8008538 <HAL_RCC_ClockConfig+0x258>)
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	00db      	lsls	r3, r3, #3
 80084f8:	490f      	ldr	r1, [pc, #60]	@ (8008538 <HAL_RCC_ClockConfig+0x258>)
 80084fa:	4313      	orrs	r3, r2
 80084fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80084fe:	f000 f823 	bl	8008548 <HAL_RCC_GetSysClockFreq>
 8008502:	4602      	mov	r2, r0
 8008504:	4b0c      	ldr	r3, [pc, #48]	@ (8008538 <HAL_RCC_ClockConfig+0x258>)
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	091b      	lsrs	r3, r3, #4
 800850a:	f003 030f 	and.w	r3, r3, #15
 800850e:	490b      	ldr	r1, [pc, #44]	@ (800853c <HAL_RCC_ClockConfig+0x25c>)
 8008510:	5ccb      	ldrb	r3, [r1, r3]
 8008512:	fa22 f303 	lsr.w	r3, r2, r3
 8008516:	4a0a      	ldr	r2, [pc, #40]	@ (8008540 <HAL_RCC_ClockConfig+0x260>)
 8008518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800851a:	4b0a      	ldr	r3, [pc, #40]	@ (8008544 <HAL_RCC_ClockConfig+0x264>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4618      	mov	r0, r3
 8008520:	f7fd f90e 	bl	8005740 <HAL_InitTick>
 8008524:	4603      	mov	r3, r0
 8008526:	72fb      	strb	r3, [r7, #11]

  return status;
 8008528:	7afb      	ldrb	r3, [r7, #11]
}
 800852a:	4618      	mov	r0, r3
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	40023c00 	.word	0x40023c00
 8008538:	40023800 	.word	0x40023800
 800853c:	0800dc58 	.word	0x0800dc58
 8008540:	20000010 	.word	0x20000010
 8008544:	200000cc 	.word	0x200000cc

08008548 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800854c:	b092      	sub	sp, #72	@ 0x48
 800854e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8008550:	4b79      	ldr	r3, [pc, #484]	@ (8008738 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008558:	f003 030c 	and.w	r3, r3, #12
 800855c:	2b0c      	cmp	r3, #12
 800855e:	d00d      	beq.n	800857c <HAL_RCC_GetSysClockFreq+0x34>
 8008560:	2b0c      	cmp	r3, #12
 8008562:	f200 80d5 	bhi.w	8008710 <HAL_RCC_GetSysClockFreq+0x1c8>
 8008566:	2b04      	cmp	r3, #4
 8008568:	d002      	beq.n	8008570 <HAL_RCC_GetSysClockFreq+0x28>
 800856a:	2b08      	cmp	r3, #8
 800856c:	d003      	beq.n	8008576 <HAL_RCC_GetSysClockFreq+0x2e>
 800856e:	e0cf      	b.n	8008710 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008570:	4b72      	ldr	r3, [pc, #456]	@ (800873c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8008572:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8008574:	e0da      	b.n	800872c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008576:	4b72      	ldr	r3, [pc, #456]	@ (8008740 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8008578:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800857a:	e0d7      	b.n	800872c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800857c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800857e:	0c9b      	lsrs	r3, r3, #18
 8008580:	f003 020f 	and.w	r2, r3, #15
 8008584:	4b6f      	ldr	r3, [pc, #444]	@ (8008744 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8008586:	5c9b      	ldrb	r3, [r3, r2]
 8008588:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800858a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800858c:	0d9b      	lsrs	r3, r3, #22
 800858e:	f003 0303 	and.w	r3, r3, #3
 8008592:	3301      	adds	r3, #1
 8008594:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008596:	4b68      	ldr	r3, [pc, #416]	@ (8008738 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d05d      	beq.n	800865e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80085a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a4:	2200      	movs	r2, #0
 80085a6:	4618      	mov	r0, r3
 80085a8:	4611      	mov	r1, r2
 80085aa:	4604      	mov	r4, r0
 80085ac:	460d      	mov	r5, r1
 80085ae:	4622      	mov	r2, r4
 80085b0:	462b      	mov	r3, r5
 80085b2:	f04f 0000 	mov.w	r0, #0
 80085b6:	f04f 0100 	mov.w	r1, #0
 80085ba:	0159      	lsls	r1, r3, #5
 80085bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80085c0:	0150      	lsls	r0, r2, #5
 80085c2:	4602      	mov	r2, r0
 80085c4:	460b      	mov	r3, r1
 80085c6:	4621      	mov	r1, r4
 80085c8:	1a51      	subs	r1, r2, r1
 80085ca:	6139      	str	r1, [r7, #16]
 80085cc:	4629      	mov	r1, r5
 80085ce:	eb63 0301 	sbc.w	r3, r3, r1
 80085d2:	617b      	str	r3, [r7, #20]
 80085d4:	f04f 0200 	mov.w	r2, #0
 80085d8:	f04f 0300 	mov.w	r3, #0
 80085dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80085e0:	4659      	mov	r1, fp
 80085e2:	018b      	lsls	r3, r1, #6
 80085e4:	4651      	mov	r1, sl
 80085e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80085ea:	4651      	mov	r1, sl
 80085ec:	018a      	lsls	r2, r1, #6
 80085ee:	46d4      	mov	ip, sl
 80085f0:	ebb2 080c 	subs.w	r8, r2, ip
 80085f4:	4659      	mov	r1, fp
 80085f6:	eb63 0901 	sbc.w	r9, r3, r1
 80085fa:	f04f 0200 	mov.w	r2, #0
 80085fe:	f04f 0300 	mov.w	r3, #0
 8008602:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008606:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800860a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800860e:	4690      	mov	r8, r2
 8008610:	4699      	mov	r9, r3
 8008612:	4623      	mov	r3, r4
 8008614:	eb18 0303 	adds.w	r3, r8, r3
 8008618:	60bb      	str	r3, [r7, #8]
 800861a:	462b      	mov	r3, r5
 800861c:	eb49 0303 	adc.w	r3, r9, r3
 8008620:	60fb      	str	r3, [r7, #12]
 8008622:	f04f 0200 	mov.w	r2, #0
 8008626:	f04f 0300 	mov.w	r3, #0
 800862a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800862e:	4629      	mov	r1, r5
 8008630:	024b      	lsls	r3, r1, #9
 8008632:	4620      	mov	r0, r4
 8008634:	4629      	mov	r1, r5
 8008636:	4604      	mov	r4, r0
 8008638:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800863c:	4601      	mov	r1, r0
 800863e:	024a      	lsls	r2, r1, #9
 8008640:	4610      	mov	r0, r2
 8008642:	4619      	mov	r1, r3
 8008644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008646:	2200      	movs	r2, #0
 8008648:	62bb      	str	r3, [r7, #40]	@ 0x28
 800864a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800864c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008650:	f7f8 fd7c 	bl	800114c <__aeabi_uldivmod>
 8008654:	4602      	mov	r2, r0
 8008656:	460b      	mov	r3, r1
 8008658:	4613      	mov	r3, r2
 800865a:	647b      	str	r3, [r7, #68]	@ 0x44
 800865c:	e055      	b.n	800870a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800865e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008660:	2200      	movs	r2, #0
 8008662:	623b      	str	r3, [r7, #32]
 8008664:	627a      	str	r2, [r7, #36]	@ 0x24
 8008666:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800866a:	4642      	mov	r2, r8
 800866c:	464b      	mov	r3, r9
 800866e:	f04f 0000 	mov.w	r0, #0
 8008672:	f04f 0100 	mov.w	r1, #0
 8008676:	0159      	lsls	r1, r3, #5
 8008678:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800867c:	0150      	lsls	r0, r2, #5
 800867e:	4602      	mov	r2, r0
 8008680:	460b      	mov	r3, r1
 8008682:	46c4      	mov	ip, r8
 8008684:	ebb2 0a0c 	subs.w	sl, r2, ip
 8008688:	4640      	mov	r0, r8
 800868a:	4649      	mov	r1, r9
 800868c:	468c      	mov	ip, r1
 800868e:	eb63 0b0c 	sbc.w	fp, r3, ip
 8008692:	f04f 0200 	mov.w	r2, #0
 8008696:	f04f 0300 	mov.w	r3, #0
 800869a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800869e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80086a2:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80086a6:	ebb2 040a 	subs.w	r4, r2, sl
 80086aa:	eb63 050b 	sbc.w	r5, r3, fp
 80086ae:	f04f 0200 	mov.w	r2, #0
 80086b2:	f04f 0300 	mov.w	r3, #0
 80086b6:	00eb      	lsls	r3, r5, #3
 80086b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80086bc:	00e2      	lsls	r2, r4, #3
 80086be:	4614      	mov	r4, r2
 80086c0:	461d      	mov	r5, r3
 80086c2:	4603      	mov	r3, r0
 80086c4:	18e3      	adds	r3, r4, r3
 80086c6:	603b      	str	r3, [r7, #0]
 80086c8:	460b      	mov	r3, r1
 80086ca:	eb45 0303 	adc.w	r3, r5, r3
 80086ce:	607b      	str	r3, [r7, #4]
 80086d0:	f04f 0200 	mov.w	r2, #0
 80086d4:	f04f 0300 	mov.w	r3, #0
 80086d8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80086dc:	4629      	mov	r1, r5
 80086de:	028b      	lsls	r3, r1, #10
 80086e0:	4620      	mov	r0, r4
 80086e2:	4629      	mov	r1, r5
 80086e4:	4604      	mov	r4, r0
 80086e6:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80086ea:	4601      	mov	r1, r0
 80086ec:	028a      	lsls	r2, r1, #10
 80086ee:	4610      	mov	r0, r2
 80086f0:	4619      	mov	r1, r3
 80086f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086f4:	2200      	movs	r2, #0
 80086f6:	61bb      	str	r3, [r7, #24]
 80086f8:	61fa      	str	r2, [r7, #28]
 80086fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086fe:	f7f8 fd25 	bl	800114c <__aeabi_uldivmod>
 8008702:	4602      	mov	r2, r0
 8008704:	460b      	mov	r3, r1
 8008706:	4613      	mov	r3, r2
 8008708:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 800870a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800870c:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800870e:	e00d      	b.n	800872c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8008710:	4b09      	ldr	r3, [pc, #36]	@ (8008738 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	0b5b      	lsrs	r3, r3, #13
 8008716:	f003 0307 	and.w	r3, r3, #7
 800871a:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800871c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800871e:	3301      	adds	r3, #1
 8008720:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008724:	fa02 f303 	lsl.w	r3, r2, r3
 8008728:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800872a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800872c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 800872e:	4618      	mov	r0, r3
 8008730:	3748      	adds	r7, #72	@ 0x48
 8008732:	46bd      	mov	sp, r7
 8008734:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008738:	40023800 	.word	0x40023800
 800873c:	00f42400 	.word	0x00f42400
 8008740:	007a1200 	.word	0x007a1200
 8008744:	0800dc4c 	.word	0x0800dc4c

08008748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008748:	b480      	push	{r7}
 800874a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800874c:	4b02      	ldr	r3, [pc, #8]	@ (8008758 <HAL_RCC_GetHCLKFreq+0x10>)
 800874e:	681b      	ldr	r3, [r3, #0]
}
 8008750:	4618      	mov	r0, r3
 8008752:	46bd      	mov	sp, r7
 8008754:	bc80      	pop	{r7}
 8008756:	4770      	bx	lr
 8008758:	20000010 	.word	0x20000010

0800875c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008760:	f7ff fff2 	bl	8008748 <HAL_RCC_GetHCLKFreq>
 8008764:	4602      	mov	r2, r0
 8008766:	4b05      	ldr	r3, [pc, #20]	@ (800877c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	0a1b      	lsrs	r3, r3, #8
 800876c:	f003 0307 	and.w	r3, r3, #7
 8008770:	4903      	ldr	r1, [pc, #12]	@ (8008780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008772:	5ccb      	ldrb	r3, [r1, r3]
 8008774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008778:	4618      	mov	r0, r3
 800877a:	bd80      	pop	{r7, pc}
 800877c:	40023800 	.word	0x40023800
 8008780:	0800dc68 	.word	0x0800dc68

08008784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008788:	f7ff ffde 	bl	8008748 <HAL_RCC_GetHCLKFreq>
 800878c:	4602      	mov	r2, r0
 800878e:	4b05      	ldr	r3, [pc, #20]	@ (80087a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	0adb      	lsrs	r3, r3, #11
 8008794:	f003 0307 	and.w	r3, r3, #7
 8008798:	4903      	ldr	r1, [pc, #12]	@ (80087a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800879a:	5ccb      	ldrb	r3, [r1, r3]
 800879c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	40023800 	.word	0x40023800
 80087a8:	0800dc68 	.word	0x0800dc68

080087ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b087      	sub	sp, #28
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80087b4:	2300      	movs	r3, #0
 80087b6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80087b8:	4b29      	ldr	r3, [pc, #164]	@ (8008860 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d12c      	bne.n	800881e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80087c4:	4b26      	ldr	r3, [pc, #152]	@ (8008860 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80087c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d005      	beq.n	80087dc <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80087d0:	4b24      	ldr	r3, [pc, #144]	@ (8008864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80087d8:	617b      	str	r3, [r7, #20]
 80087da:	e016      	b.n	800880a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80087dc:	4b20      	ldr	r3, [pc, #128]	@ (8008860 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80087de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087e0:	4a1f      	ldr	r2, [pc, #124]	@ (8008860 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80087e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80087e6:	6253      	str	r3, [r2, #36]	@ 0x24
 80087e8:	4b1d      	ldr	r3, [pc, #116]	@ (8008860 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80087ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087f0:	60fb      	str	r3, [r7, #12]
 80087f2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80087f4:	4b1b      	ldr	r3, [pc, #108]	@ (8008864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80087fc:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80087fe:	4b18      	ldr	r3, [pc, #96]	@ (8008860 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008802:	4a17      	ldr	r2, [pc, #92]	@ (8008860 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008804:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008808:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8008810:	d105      	bne.n	800881e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008818:	d101      	bne.n	800881e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800881a:	2301      	movs	r3, #1
 800881c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	2b01      	cmp	r3, #1
 8008822:	d105      	bne.n	8008830 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8008824:	4b10      	ldr	r3, [pc, #64]	@ (8008868 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a0f      	ldr	r2, [pc, #60]	@ (8008868 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800882a:	f043 0304 	orr.w	r3, r3, #4
 800882e:	6013      	str	r3, [r2, #0]
 8008830:	4b0d      	ldr	r3, [pc, #52]	@ (8008868 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f023 0201 	bic.w	r2, r3, #1
 8008838:	490b      	ldr	r1, [pc, #44]	@ (8008868 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	4313      	orrs	r3, r2
 800883e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008840:	4b09      	ldr	r3, [pc, #36]	@ (8008868 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f003 0301 	and.w	r3, r3, #1
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	429a      	cmp	r2, r3
 800884c:	d001      	beq.n	8008852 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	e000      	b.n	8008854 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8008852:	2300      	movs	r3, #0
}
 8008854:	4618      	mov	r0, r3
 8008856:	371c      	adds	r7, #28
 8008858:	46bd      	mov	sp, r7
 800885a:	bc80      	pop	{r7}
 800885c:	4770      	bx	lr
 800885e:	bf00      	nop
 8008860:	40023800 	.word	0x40023800
 8008864:	40007000 	.word	0x40007000
 8008868:	40023c00 	.word	0x40023c00

0800886c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d101      	bne.n	800887e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	e07b      	b.n	8008976 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008882:	2b00      	cmp	r3, #0
 8008884:	d108      	bne.n	8008898 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800888e:	d009      	beq.n	80088a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	61da      	str	r2, [r3, #28]
 8008896:	e005      	b.n	80088a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d106      	bne.n	80088c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f7f9 fe34 	bl	800252c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2202      	movs	r2, #2
 80088c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80088da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80088ec:	431a      	orrs	r2, r3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088f6:	431a      	orrs	r2, r3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	691b      	ldr	r3, [r3, #16]
 80088fc:	f003 0302 	and.w	r3, r3, #2
 8008900:	431a      	orrs	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	695b      	ldr	r3, [r3, #20]
 8008906:	f003 0301 	and.w	r3, r3, #1
 800890a:	431a      	orrs	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	699b      	ldr	r3, [r3, #24]
 8008910:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008914:	431a      	orrs	r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	69db      	ldr	r3, [r3, #28]
 800891a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800891e:	431a      	orrs	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6a1b      	ldr	r3, [r3, #32]
 8008924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008928:	ea42 0103 	orr.w	r1, r2, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008930:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	430a      	orrs	r2, r1
 800893a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	699b      	ldr	r3, [r3, #24]
 8008940:	0c1b      	lsrs	r3, r3, #16
 8008942:	f003 0104 	and.w	r1, r3, #4
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800894a:	f003 0210 	and.w	r2, r3, #16
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	430a      	orrs	r2, r1
 8008954:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	69da      	ldr	r2, [r3, #28]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008964:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3708      	adds	r7, #8
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b088      	sub	sp, #32
 8008982:	af00      	add	r7, sp, #0
 8008984:	60f8      	str	r0, [r7, #12]
 8008986:	60b9      	str	r1, [r7, #8]
 8008988:	603b      	str	r3, [r7, #0]
 800898a:	4613      	mov	r3, r2
 800898c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800898e:	2300      	movs	r3, #0
 8008990:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008998:	2b01      	cmp	r3, #1
 800899a:	d101      	bne.n	80089a0 <HAL_SPI_Transmit+0x22>
 800899c:	2302      	movs	r3, #2
 800899e:	e12d      	b.n	8008bfc <HAL_SPI_Transmit+0x27e>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2201      	movs	r2, #1
 80089a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80089a8:	f7fc ff16 	bl	80057d8 <HAL_GetTick>
 80089ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80089ae:	88fb      	ldrh	r3, [r7, #6]
 80089b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d002      	beq.n	80089c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80089be:	2302      	movs	r3, #2
 80089c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80089c2:	e116      	b.n	8008bf2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d002      	beq.n	80089d0 <HAL_SPI_Transmit+0x52>
 80089ca:	88fb      	ldrh	r3, [r7, #6]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d102      	bne.n	80089d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80089d4:	e10d      	b.n	8008bf2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2203      	movs	r2, #3
 80089da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2200      	movs	r2, #0
 80089e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	68ba      	ldr	r2, [r7, #8]
 80089e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	88fa      	ldrh	r2, [r7, #6]
 80089ee:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	88fa      	ldrh	r2, [r7, #6]
 80089f4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2200      	movs	r2, #0
 8008a00:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2200      	movs	r2, #0
 8008a12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a1c:	d10f      	bne.n	8008a3e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a48:	2b40      	cmp	r3, #64	@ 0x40
 8008a4a:	d007      	beq.n	8008a5c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a64:	d14f      	bne.n	8008b06 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d002      	beq.n	8008a74 <HAL_SPI_Transmit+0xf6>
 8008a6e:	8afb      	ldrh	r3, [r7, #22]
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d142      	bne.n	8008afa <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a78:	881a      	ldrh	r2, [r3, #0]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a84:	1c9a      	adds	r2, r3, #2
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	3b01      	subs	r3, #1
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008a98:	e02f      	b.n	8008afa <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	f003 0302 	and.w	r3, r3, #2
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	d112      	bne.n	8008ace <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aac:	881a      	ldrh	r2, [r3, #0]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ab8:	1c9a      	adds	r2, r3, #2
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	3b01      	subs	r3, #1
 8008ac6:	b29a      	uxth	r2, r3
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008acc:	e015      	b.n	8008afa <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ace:	f7fc fe83 	bl	80057d8 <HAL_GetTick>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	1ad3      	subs	r3, r2, r3
 8008ad8:	683a      	ldr	r2, [r7, #0]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d803      	bhi.n	8008ae6 <HAL_SPI_Transmit+0x168>
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae4:	d102      	bne.n	8008aec <HAL_SPI_Transmit+0x16e>
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d106      	bne.n	8008afa <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8008aec:	2303      	movs	r3, #3
 8008aee:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8008af8:	e07b      	b.n	8008bf2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d1ca      	bne.n	8008a9a <HAL_SPI_Transmit+0x11c>
 8008b04:	e050      	b.n	8008ba8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d002      	beq.n	8008b14 <HAL_SPI_Transmit+0x196>
 8008b0e:	8afb      	ldrh	r3, [r7, #22]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d144      	bne.n	8008b9e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	330c      	adds	r3, #12
 8008b1e:	7812      	ldrb	r2, [r2, #0]
 8008b20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b26:	1c5a      	adds	r2, r3, #1
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	3b01      	subs	r3, #1
 8008b34:	b29a      	uxth	r2, r3
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008b3a:	e030      	b.n	8008b9e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	f003 0302 	and.w	r3, r3, #2
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d113      	bne.n	8008b72 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	330c      	adds	r3, #12
 8008b54:	7812      	ldrb	r2, [r2, #0]
 8008b56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b5c:	1c5a      	adds	r2, r3, #1
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	b29a      	uxth	r2, r3
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008b70:	e015      	b.n	8008b9e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b72:	f7fc fe31 	bl	80057d8 <HAL_GetTick>
 8008b76:	4602      	mov	r2, r0
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	1ad3      	subs	r3, r2, r3
 8008b7c:	683a      	ldr	r2, [r7, #0]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d803      	bhi.n	8008b8a <HAL_SPI_Transmit+0x20c>
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b88:	d102      	bne.n	8008b90 <HAL_SPI_Transmit+0x212>
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d106      	bne.n	8008b9e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8008b90:	2303      	movs	r3, #3
 8008b92:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8008b9c:	e029      	b.n	8008bf2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d1c9      	bne.n	8008b3c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ba8:	69ba      	ldr	r2, [r7, #24]
 8008baa:	6839      	ldr	r1, [r7, #0]
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f000 f8b1 	bl	8008d14 <SPI_EndRxTxTransaction>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d002      	beq.n	8008bbe <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2220      	movs	r2, #32
 8008bbc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d10a      	bne.n	8008bdc <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	613b      	str	r3, [r7, #16]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	613b      	str	r3, [r7, #16]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	613b      	str	r3, [r7, #16]
 8008bda:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d002      	beq.n	8008bea <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	77fb      	strb	r3, [r7, #31]
 8008be8:	e003      	b.n	8008bf2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2201      	movs	r2, #1
 8008bee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008bfa:	7ffb      	ldrb	r3, [r7, #31]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3720      	adds	r7, #32
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b088      	sub	sp, #32
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	603b      	str	r3, [r7, #0]
 8008c10:	4613      	mov	r3, r2
 8008c12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008c14:	f7fc fde0 	bl	80057d8 <HAL_GetTick>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c1c:	1a9b      	subs	r3, r3, r2
 8008c1e:	683a      	ldr	r2, [r7, #0]
 8008c20:	4413      	add	r3, r2
 8008c22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008c24:	f7fc fdd8 	bl	80057d8 <HAL_GetTick>
 8008c28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008c2a:	4b39      	ldr	r3, [pc, #228]	@ (8008d10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	015b      	lsls	r3, r3, #5
 8008c30:	0d1b      	lsrs	r3, r3, #20
 8008c32:	69fa      	ldr	r2, [r7, #28]
 8008c34:	fb02 f303 	mul.w	r3, r2, r3
 8008c38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008c3a:	e054      	b.n	8008ce6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c42:	d050      	beq.n	8008ce6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008c44:	f7fc fdc8 	bl	80057d8 <HAL_GetTick>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	1ad3      	subs	r3, r2, r3
 8008c4e:	69fa      	ldr	r2, [r7, #28]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d902      	bls.n	8008c5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d13d      	bne.n	8008cd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	685a      	ldr	r2, [r3, #4]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008c68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008c72:	d111      	bne.n	8008c98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c7c:	d004      	beq.n	8008c88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c86:	d107      	bne.n	8008c98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ca0:	d10f      	bne.n	8008cc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008cb0:	601a      	str	r2, [r3, #0]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008cc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	e017      	b.n	8008d06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d101      	bne.n	8008ce0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	689a      	ldr	r2, [r3, #8]
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	4013      	ands	r3, r2
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	bf0c      	ite	eq
 8008cf6:	2301      	moveq	r3, #1
 8008cf8:	2300      	movne	r3, #0
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	79fb      	ldrb	r3, [r7, #7]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d19b      	bne.n	8008c3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3720      	adds	r7, #32
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	20000010 	.word	0x20000010

08008d14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b088      	sub	sp, #32
 8008d18:	af02      	add	r7, sp, #8
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008d20:	4b1b      	ldr	r3, [pc, #108]	@ (8008d90 <SPI_EndRxTxTransaction+0x7c>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a1b      	ldr	r2, [pc, #108]	@ (8008d94 <SPI_EndRxTxTransaction+0x80>)
 8008d26:	fba2 2303 	umull	r2, r3, r2, r3
 8008d2a:	0d5b      	lsrs	r3, r3, #21
 8008d2c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008d30:	fb02 f303 	mul.w	r3, r2, r3
 8008d34:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008d3e:	d112      	bne.n	8008d66 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	9300      	str	r3, [sp, #0]
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	2200      	movs	r2, #0
 8008d48:	2180      	movs	r1, #128	@ 0x80
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f7ff ff5a 	bl	8008c04 <SPI_WaitFlagStateUntilTimeout>
 8008d50:	4603      	mov	r3, r0
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d016      	beq.n	8008d84 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d5a:	f043 0220 	orr.w	r2, r3, #32
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008d62:	2303      	movs	r3, #3
 8008d64:	e00f      	b.n	8008d86 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d00a      	beq.n	8008d82 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	3b01      	subs	r3, #1
 8008d70:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d7c:	2b80      	cmp	r3, #128	@ 0x80
 8008d7e:	d0f2      	beq.n	8008d66 <SPI_EndRxTxTransaction+0x52>
 8008d80:	e000      	b.n	8008d84 <SPI_EndRxTxTransaction+0x70>
        break;
 8008d82:	bf00      	nop
  }

  return HAL_OK;
 8008d84:	2300      	movs	r3, #0
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3718      	adds	r7, #24
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	20000010 	.word	0x20000010
 8008d94:	165e9f81 	.word	0x165e9f81

08008d98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d101      	bne.n	8008daa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e031      	b.n	8008e0e <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d106      	bne.n	8008dc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f7f9 fbf8 	bl	80025b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2202      	movs	r2, #2
 8008dc8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	3304      	adds	r3, #4
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	4610      	mov	r0, r2
 8008dd8:	f000 fc30 	bl	800963c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2201      	movs	r2, #1
 8008de8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2201      	movs	r2, #1
 8008df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3708      	adds	r7, #8
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b082      	sub	sp, #8
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d101      	bne.n	8008e28 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	e031      	b.n	8008e8c <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d106      	bne.n	8008e42 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 f829 	bl	8008e94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2202      	movs	r2, #2
 8008e46:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	3304      	adds	r3, #4
 8008e52:	4619      	mov	r1, r3
 8008e54:	4610      	mov	r0, r2
 8008e56:	f000 fbf1 	bl	800963c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2201      	movs	r2, #1
 8008e66:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2201      	movs	r2, #1
 8008e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2201      	movs	r2, #1
 8008e86:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8008e8a:	2300      	movs	r3, #0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3708      	adds	r7, #8
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008e9c:	bf00      	nop
 8008e9e:	370c      	adds	r7, #12
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bc80      	pop	{r7}
 8008ea4:	4770      	bx	lr
	...

08008ea8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d109      	bne.n	8008ecc <HAL_TIM_PWM_Start+0x24>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	bf14      	ite	ne
 8008ec4:	2301      	movne	r3, #1
 8008ec6:	2300      	moveq	r3, #0
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	e022      	b.n	8008f12 <HAL_TIM_PWM_Start+0x6a>
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	2b04      	cmp	r3, #4
 8008ed0:	d109      	bne.n	8008ee6 <HAL_TIM_PWM_Start+0x3e>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	bf14      	ite	ne
 8008ede:	2301      	movne	r3, #1
 8008ee0:	2300      	moveq	r3, #0
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	e015      	b.n	8008f12 <HAL_TIM_PWM_Start+0x6a>
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	2b08      	cmp	r3, #8
 8008eea:	d109      	bne.n	8008f00 <HAL_TIM_PWM_Start+0x58>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	bf14      	ite	ne
 8008ef8:	2301      	movne	r3, #1
 8008efa:	2300      	moveq	r3, #0
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	e008      	b.n	8008f12 <HAL_TIM_PWM_Start+0x6a>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	bf14      	ite	ne
 8008f0c:	2301      	movne	r3, #1
 8008f0e:	2300      	moveq	r3, #0
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d001      	beq.n	8008f1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	e051      	b.n	8008fbe <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d104      	bne.n	8008f2a <HAL_TIM_PWM_Start+0x82>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2202      	movs	r2, #2
 8008f24:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8008f28:	e013      	b.n	8008f52 <HAL_TIM_PWM_Start+0xaa>
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	2b04      	cmp	r3, #4
 8008f2e:	d104      	bne.n	8008f3a <HAL_TIM_PWM_Start+0x92>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2202      	movs	r2, #2
 8008f34:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8008f38:	e00b      	b.n	8008f52 <HAL_TIM_PWM_Start+0xaa>
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	2b08      	cmp	r3, #8
 8008f3e:	d104      	bne.n	8008f4a <HAL_TIM_PWM_Start+0xa2>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2202      	movs	r2, #2
 8008f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8008f48:	e003      	b.n	8008f52 <HAL_TIM_PWM_Start+0xaa>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2202      	movs	r2, #2
 8008f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2201      	movs	r2, #1
 8008f58:	6839      	ldr	r1, [r7, #0]
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f000 fd69 	bl	8009a32 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f68:	d00e      	beq.n	8008f88 <HAL_TIM_PWM_Start+0xe0>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a16      	ldr	r2, [pc, #88]	@ (8008fc8 <HAL_TIM_PWM_Start+0x120>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d009      	beq.n	8008f88 <HAL_TIM_PWM_Start+0xe0>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a14      	ldr	r2, [pc, #80]	@ (8008fcc <HAL_TIM_PWM_Start+0x124>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d004      	beq.n	8008f88 <HAL_TIM_PWM_Start+0xe0>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a13      	ldr	r2, [pc, #76]	@ (8008fd0 <HAL_TIM_PWM_Start+0x128>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d111      	bne.n	8008fac <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	f003 0307 	and.w	r3, r3, #7
 8008f92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2b06      	cmp	r3, #6
 8008f98:	d010      	beq.n	8008fbc <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f042 0201 	orr.w	r2, r2, #1
 8008fa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008faa:	e007      	b.n	8008fbc <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f042 0201 	orr.w	r2, r2, #1
 8008fba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	40000400 	.word	0x40000400
 8008fcc:	40000800 	.word	0x40000800
 8008fd0:	40010800 	.word	0x40010800

08008fd4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	6839      	ldr	r1, [r7, #0]
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f000 fd23 	bl	8009a32 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	6a1a      	ldr	r2, [r3, #32]
 8008ff2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d107      	bne.n	800900c <HAL_TIM_PWM_Stop+0x38>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f022 0201 	bic.w	r2, r2, #1
 800900a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d104      	bne.n	800901c <HAL_TIM_PWM_Stop+0x48>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2201      	movs	r2, #1
 8009016:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800901a:	e013      	b.n	8009044 <HAL_TIM_PWM_Stop+0x70>
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	2b04      	cmp	r3, #4
 8009020:	d104      	bne.n	800902c <HAL_TIM_PWM_Stop+0x58>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2201      	movs	r2, #1
 8009026:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 800902a:	e00b      	b.n	8009044 <HAL_TIM_PWM_Stop+0x70>
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	2b08      	cmp	r3, #8
 8009030:	d104      	bne.n	800903c <HAL_TIM_PWM_Stop+0x68>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2201      	movs	r2, #1
 8009036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800903a:	e003      	b.n	8009044 <HAL_TIM_PWM_Stop+0x70>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2201      	movs	r2, #1
 8009040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009044:	2300      	movs	r3, #0
}
 8009046:	4618      	mov	r0, r3
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
	...

08009050 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800905a:	2300      	movs	r3, #0
 800905c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d109      	bne.n	8009078 <HAL_TIM_PWM_Start_IT+0x28>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800906a:	b2db      	uxtb	r3, r3
 800906c:	2b01      	cmp	r3, #1
 800906e:	bf14      	ite	ne
 8009070:	2301      	movne	r3, #1
 8009072:	2300      	moveq	r3, #0
 8009074:	b2db      	uxtb	r3, r3
 8009076:	e022      	b.n	80090be <HAL_TIM_PWM_Start_IT+0x6e>
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	2b04      	cmp	r3, #4
 800907c:	d109      	bne.n	8009092 <HAL_TIM_PWM_Start_IT+0x42>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8009084:	b2db      	uxtb	r3, r3
 8009086:	2b01      	cmp	r3, #1
 8009088:	bf14      	ite	ne
 800908a:	2301      	movne	r3, #1
 800908c:	2300      	moveq	r3, #0
 800908e:	b2db      	uxtb	r3, r3
 8009090:	e015      	b.n	80090be <HAL_TIM_PWM_Start_IT+0x6e>
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	2b08      	cmp	r3, #8
 8009096:	d109      	bne.n	80090ac <HAL_TIM_PWM_Start_IT+0x5c>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	bf14      	ite	ne
 80090a4:	2301      	movne	r3, #1
 80090a6:	2300      	moveq	r3, #0
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	e008      	b.n	80090be <HAL_TIM_PWM_Start_IT+0x6e>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	bf14      	ite	ne
 80090b8:	2301      	movne	r3, #1
 80090ba:	2300      	moveq	r3, #0
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d001      	beq.n	80090c6 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80090c2:	2301      	movs	r3, #1
 80090c4:	e09c      	b.n	8009200 <HAL_TIM_PWM_Start_IT+0x1b0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d104      	bne.n	80090d6 <HAL_TIM_PWM_Start_IT+0x86>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2202      	movs	r2, #2
 80090d0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80090d4:	e013      	b.n	80090fe <HAL_TIM_PWM_Start_IT+0xae>
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	2b04      	cmp	r3, #4
 80090da:	d104      	bne.n	80090e6 <HAL_TIM_PWM_Start_IT+0x96>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2202      	movs	r2, #2
 80090e0:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 80090e4:	e00b      	b.n	80090fe <HAL_TIM_PWM_Start_IT+0xae>
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	2b08      	cmp	r3, #8
 80090ea:	d104      	bne.n	80090f6 <HAL_TIM_PWM_Start_IT+0xa6>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2202      	movs	r2, #2
 80090f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80090f4:	e003      	b.n	80090fe <HAL_TIM_PWM_Start_IT+0xae>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2202      	movs	r2, #2
 80090fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  switch (Channel)
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	2b0c      	cmp	r3, #12
 8009102:	d841      	bhi.n	8009188 <HAL_TIM_PWM_Start_IT+0x138>
 8009104:	a201      	add	r2, pc, #4	@ (adr r2, 800910c <HAL_TIM_PWM_Start_IT+0xbc>)
 8009106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910a:	bf00      	nop
 800910c:	08009141 	.word	0x08009141
 8009110:	08009189 	.word	0x08009189
 8009114:	08009189 	.word	0x08009189
 8009118:	08009189 	.word	0x08009189
 800911c:	08009153 	.word	0x08009153
 8009120:	08009189 	.word	0x08009189
 8009124:	08009189 	.word	0x08009189
 8009128:	08009189 	.word	0x08009189
 800912c:	08009165 	.word	0x08009165
 8009130:	08009189 	.word	0x08009189
 8009134:	08009189 	.word	0x08009189
 8009138:	08009189 	.word	0x08009189
 800913c:	08009177 	.word	0x08009177
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	68da      	ldr	r2, [r3, #12]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f042 0202 	orr.w	r2, r2, #2
 800914e:	60da      	str	r2, [r3, #12]
      break;
 8009150:	e01d      	b.n	800918e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68da      	ldr	r2, [r3, #12]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f042 0204 	orr.w	r2, r2, #4
 8009160:	60da      	str	r2, [r3, #12]
      break;
 8009162:	e014      	b.n	800918e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68da      	ldr	r2, [r3, #12]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f042 0208 	orr.w	r2, r2, #8
 8009172:	60da      	str	r2, [r3, #12]
      break;
 8009174:	e00b      	b.n	800918e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	68da      	ldr	r2, [r3, #12]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f042 0210 	orr.w	r2, r2, #16
 8009184:	60da      	str	r2, [r3, #12]
      break;
 8009186:	e002      	b.n	800918e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	73fb      	strb	r3, [r7, #15]
      break;
 800918c:	bf00      	nop
  }

  if (status == HAL_OK)
 800918e:	7bfb      	ldrb	r3, [r7, #15]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d134      	bne.n	80091fe <HAL_TIM_PWM_Start_IT+0x1ae>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2201      	movs	r2, #1
 800919a:	6839      	ldr	r1, [r7, #0]
 800919c:	4618      	mov	r0, r3
 800919e:	f000 fc48 	bl	8009a32 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091aa:	d00e      	beq.n	80091ca <HAL_TIM_PWM_Start_IT+0x17a>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a15      	ldr	r2, [pc, #84]	@ (8009208 <HAL_TIM_PWM_Start_IT+0x1b8>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d009      	beq.n	80091ca <HAL_TIM_PWM_Start_IT+0x17a>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a14      	ldr	r2, [pc, #80]	@ (800920c <HAL_TIM_PWM_Start_IT+0x1bc>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d004      	beq.n	80091ca <HAL_TIM_PWM_Start_IT+0x17a>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a12      	ldr	r2, [pc, #72]	@ (8009210 <HAL_TIM_PWM_Start_IT+0x1c0>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d111      	bne.n	80091ee <HAL_TIM_PWM_Start_IT+0x19e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	f003 0307 	and.w	r3, r3, #7
 80091d4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	2b06      	cmp	r3, #6
 80091da:	d010      	beq.n	80091fe <HAL_TIM_PWM_Start_IT+0x1ae>
      {
        __HAL_TIM_ENABLE(htim);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f042 0201 	orr.w	r2, r2, #1
 80091ea:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091ec:	e007      	b.n	80091fe <HAL_TIM_PWM_Start_IT+0x1ae>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f042 0201 	orr.w	r2, r2, #1
 80091fc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80091fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009200:	4618      	mov	r0, r3
 8009202:	3710      	adds	r7, #16
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	40000400 	.word	0x40000400
 800920c:	40000800 	.word	0x40000800
 8009210:	40010800 	.word	0x40010800

08009214 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800921e:	2300      	movs	r3, #0
 8009220:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	2b0c      	cmp	r3, #12
 8009226:	d841      	bhi.n	80092ac <HAL_TIM_PWM_Stop_IT+0x98>
 8009228:	a201      	add	r2, pc, #4	@ (adr r2, 8009230 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800922a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800922e:	bf00      	nop
 8009230:	08009265 	.word	0x08009265
 8009234:	080092ad 	.word	0x080092ad
 8009238:	080092ad 	.word	0x080092ad
 800923c:	080092ad 	.word	0x080092ad
 8009240:	08009277 	.word	0x08009277
 8009244:	080092ad 	.word	0x080092ad
 8009248:	080092ad 	.word	0x080092ad
 800924c:	080092ad 	.word	0x080092ad
 8009250:	08009289 	.word	0x08009289
 8009254:	080092ad 	.word	0x080092ad
 8009258:	080092ad 	.word	0x080092ad
 800925c:	080092ad 	.word	0x080092ad
 8009260:	0800929b 	.word	0x0800929b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	68da      	ldr	r2, [r3, #12]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f022 0202 	bic.w	r2, r2, #2
 8009272:	60da      	str	r2, [r3, #12]
      break;
 8009274:	e01d      	b.n	80092b2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	68da      	ldr	r2, [r3, #12]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f022 0204 	bic.w	r2, r2, #4
 8009284:	60da      	str	r2, [r3, #12]
      break;
 8009286:	e014      	b.n	80092b2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	68da      	ldr	r2, [r3, #12]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f022 0208 	bic.w	r2, r2, #8
 8009296:	60da      	str	r2, [r3, #12]
      break;
 8009298:	e00b      	b.n	80092b2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68da      	ldr	r2, [r3, #12]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f022 0210 	bic.w	r2, r2, #16
 80092a8:	60da      	str	r2, [r3, #12]
      break;
 80092aa:	e002      	b.n	80092b2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	73fb      	strb	r3, [r7, #15]
      break;
 80092b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80092b2:	7bfb      	ldrb	r3, [r7, #15]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d132      	bne.n	800931e <HAL_TIM_PWM_Stop_IT+0x10a>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2200      	movs	r2, #0
 80092be:	6839      	ldr	r1, [r7, #0]
 80092c0:	4618      	mov	r0, r3
 80092c2:	f000 fbb6 	bl	8009a32 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	6a1a      	ldr	r2, [r3, #32]
 80092cc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80092d0:	4013      	ands	r3, r2
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d107      	bne.n	80092e6 <HAL_TIM_PWM_Stop_IT+0xd2>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f022 0201 	bic.w	r2, r2, #1
 80092e4:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d104      	bne.n	80092f6 <HAL_TIM_PWM_Stop_IT+0xe2>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2201      	movs	r2, #1
 80092f0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80092f4:	e013      	b.n	800931e <HAL_TIM_PWM_Stop_IT+0x10a>
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	2b04      	cmp	r3, #4
 80092fa:	d104      	bne.n	8009306 <HAL_TIM_PWM_Stop_IT+0xf2>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2201      	movs	r2, #1
 8009300:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8009304:	e00b      	b.n	800931e <HAL_TIM_PWM_Stop_IT+0x10a>
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	2b08      	cmp	r3, #8
 800930a:	d104      	bne.n	8009316 <HAL_TIM_PWM_Stop_IT+0x102>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2201      	movs	r2, #1
 8009310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8009314:	e003      	b.n	800931e <HAL_TIM_PWM_Stop_IT+0x10a>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2201      	movs	r2, #1
 800931a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

  /* Return function status */
  return status;
 800931e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009320:	4618      	mov	r0, r3
 8009322:	3710      	adds	r7, #16
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b086      	sub	sp, #24
 800932c:	af00      	add	r7, sp, #0
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	60b9      	str	r1, [r7, #8]
 8009332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009334:	2300      	movs	r3, #0
 8009336:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800933e:	2b01      	cmp	r3, #1
 8009340:	d101      	bne.n	8009346 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009342:	2302      	movs	r3, #2
 8009344:	e0ae      	b.n	80094a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2201      	movs	r2, #1
 800934a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  switch (Channel)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2b0c      	cmp	r3, #12
 8009352:	f200 809f 	bhi.w	8009494 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009356:	a201      	add	r2, pc, #4	@ (adr r2, 800935c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800935c:	08009391 	.word	0x08009391
 8009360:	08009495 	.word	0x08009495
 8009364:	08009495 	.word	0x08009495
 8009368:	08009495 	.word	0x08009495
 800936c:	080093d1 	.word	0x080093d1
 8009370:	08009495 	.word	0x08009495
 8009374:	08009495 	.word	0x08009495
 8009378:	08009495 	.word	0x08009495
 800937c:	08009413 	.word	0x08009413
 8009380:	08009495 	.word	0x08009495
 8009384:	08009495 	.word	0x08009495
 8009388:	08009495 	.word	0x08009495
 800938c:	08009453 	.word	0x08009453
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68b9      	ldr	r1, [r7, #8]
 8009396:	4618      	mov	r0, r3
 8009398:	f000 f9c0 	bl	800971c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	699a      	ldr	r2, [r3, #24]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f042 0208 	orr.w	r2, r2, #8
 80093aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	699a      	ldr	r2, [r3, #24]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f022 0204 	bic.w	r2, r2, #4
 80093ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	6999      	ldr	r1, [r3, #24]
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	68da      	ldr	r2, [r3, #12]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	430a      	orrs	r2, r1
 80093cc:	619a      	str	r2, [r3, #24]
      break;
 80093ce:	e064      	b.n	800949a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	68b9      	ldr	r1, [r7, #8]
 80093d6:	4618      	mov	r0, r3
 80093d8:	f000 f9dc 	bl	8009794 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	699a      	ldr	r2, [r3, #24]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80093ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	699a      	ldr	r2, [r3, #24]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80093fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	6999      	ldr	r1, [r3, #24]
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	021a      	lsls	r2, r3, #8
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	430a      	orrs	r2, r1
 800940e:	619a      	str	r2, [r3, #24]
      break;
 8009410:	e043      	b.n	800949a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	68b9      	ldr	r1, [r7, #8]
 8009418:	4618      	mov	r0, r3
 800941a:	f000 f9f9 	bl	8009810 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	69da      	ldr	r2, [r3, #28]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f042 0208 	orr.w	r2, r2, #8
 800942c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	69da      	ldr	r2, [r3, #28]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f022 0204 	bic.w	r2, r2, #4
 800943c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	69d9      	ldr	r1, [r3, #28]
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	68da      	ldr	r2, [r3, #12]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	430a      	orrs	r2, r1
 800944e:	61da      	str	r2, [r3, #28]
      break;
 8009450:	e023      	b.n	800949a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	68b9      	ldr	r1, [r7, #8]
 8009458:	4618      	mov	r0, r3
 800945a:	f000 fa16 	bl	800988a <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	69da      	ldr	r2, [r3, #28]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800946c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	69da      	ldr	r2, [r3, #28]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800947c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	69d9      	ldr	r1, [r3, #28]
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	021a      	lsls	r2, r3, #8
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	430a      	orrs	r2, r1
 8009490:	61da      	str	r2, [r3, #28]
      break;
 8009492:	e002      	b.n	800949a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009494:	2301      	movs	r3, #1
 8009496:	75fb      	strb	r3, [r7, #23]
      break;
 8009498:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2200      	movs	r2, #0
 800949e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 80094a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3718      	adds	r7, #24
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80094b6:	2300      	movs	r3, #0
 80094b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d101      	bne.n	80094c8 <HAL_TIM_ConfigClockSource+0x1c>
 80094c4:	2302      	movs	r3, #2
 80094c6:	e0b4      	b.n	8009632 <HAL_TIM_ConfigClockSource+0x186>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2201      	movs	r2, #1
 80094cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2202      	movs	r2, #2
 80094d4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80094e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80094ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	68ba      	ldr	r2, [r7, #8]
 80094f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009500:	d03e      	beq.n	8009580 <HAL_TIM_ConfigClockSource+0xd4>
 8009502:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009506:	f200 8087 	bhi.w	8009618 <HAL_TIM_ConfigClockSource+0x16c>
 800950a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800950e:	f000 8086 	beq.w	800961e <HAL_TIM_ConfigClockSource+0x172>
 8009512:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009516:	d87f      	bhi.n	8009618 <HAL_TIM_ConfigClockSource+0x16c>
 8009518:	2b70      	cmp	r3, #112	@ 0x70
 800951a:	d01a      	beq.n	8009552 <HAL_TIM_ConfigClockSource+0xa6>
 800951c:	2b70      	cmp	r3, #112	@ 0x70
 800951e:	d87b      	bhi.n	8009618 <HAL_TIM_ConfigClockSource+0x16c>
 8009520:	2b60      	cmp	r3, #96	@ 0x60
 8009522:	d050      	beq.n	80095c6 <HAL_TIM_ConfigClockSource+0x11a>
 8009524:	2b60      	cmp	r3, #96	@ 0x60
 8009526:	d877      	bhi.n	8009618 <HAL_TIM_ConfigClockSource+0x16c>
 8009528:	2b50      	cmp	r3, #80	@ 0x50
 800952a:	d03c      	beq.n	80095a6 <HAL_TIM_ConfigClockSource+0xfa>
 800952c:	2b50      	cmp	r3, #80	@ 0x50
 800952e:	d873      	bhi.n	8009618 <HAL_TIM_ConfigClockSource+0x16c>
 8009530:	2b40      	cmp	r3, #64	@ 0x40
 8009532:	d058      	beq.n	80095e6 <HAL_TIM_ConfigClockSource+0x13a>
 8009534:	2b40      	cmp	r3, #64	@ 0x40
 8009536:	d86f      	bhi.n	8009618 <HAL_TIM_ConfigClockSource+0x16c>
 8009538:	2b30      	cmp	r3, #48	@ 0x30
 800953a:	d064      	beq.n	8009606 <HAL_TIM_ConfigClockSource+0x15a>
 800953c:	2b30      	cmp	r3, #48	@ 0x30
 800953e:	d86b      	bhi.n	8009618 <HAL_TIM_ConfigClockSource+0x16c>
 8009540:	2b20      	cmp	r3, #32
 8009542:	d060      	beq.n	8009606 <HAL_TIM_ConfigClockSource+0x15a>
 8009544:	2b20      	cmp	r3, #32
 8009546:	d867      	bhi.n	8009618 <HAL_TIM_ConfigClockSource+0x16c>
 8009548:	2b00      	cmp	r3, #0
 800954a:	d05c      	beq.n	8009606 <HAL_TIM_ConfigClockSource+0x15a>
 800954c:	2b10      	cmp	r3, #16
 800954e:	d05a      	beq.n	8009606 <HAL_TIM_ConfigClockSource+0x15a>
 8009550:	e062      	b.n	8009618 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009562:	f000 fa47 	bl	80099f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009574:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	68ba      	ldr	r2, [r7, #8]
 800957c:	609a      	str	r2, [r3, #8]
      break;
 800957e:	e04f      	b.n	8009620 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009590:	f000 fa30 	bl	80099f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	689a      	ldr	r2, [r3, #8]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80095a2:	609a      	str	r2, [r3, #8]
      break;
 80095a4:	e03c      	b.n	8009620 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80095b2:	461a      	mov	r2, r3
 80095b4:	f000 f9a7 	bl	8009906 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2150      	movs	r1, #80	@ 0x50
 80095be:	4618      	mov	r0, r3
 80095c0:	f000 f9fe 	bl	80099c0 <TIM_ITRx_SetConfig>
      break;
 80095c4:	e02c      	b.n	8009620 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80095d2:	461a      	mov	r2, r3
 80095d4:	f000 f9c5 	bl	8009962 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2160      	movs	r1, #96	@ 0x60
 80095de:	4618      	mov	r0, r3
 80095e0:	f000 f9ee 	bl	80099c0 <TIM_ITRx_SetConfig>
      break;
 80095e4:	e01c      	b.n	8009620 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80095f2:	461a      	mov	r2, r3
 80095f4:	f000 f987 	bl	8009906 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2140      	movs	r1, #64	@ 0x40
 80095fe:	4618      	mov	r0, r3
 8009600:	f000 f9de 	bl	80099c0 <TIM_ITRx_SetConfig>
      break;
 8009604:	e00c      	b.n	8009620 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4619      	mov	r1, r3
 8009610:	4610      	mov	r0, r2
 8009612:	f000 f9d5 	bl	80099c0 <TIM_ITRx_SetConfig>
      break;
 8009616:	e003      	b.n	8009620 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	73fb      	strb	r3, [r7, #15]
      break;
 800961c:	e000      	b.n	8009620 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800961e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8009630:	7bfb      	ldrb	r3, [r7, #15]
}
 8009632:	4618      	mov	r0, r3
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
	...

0800963c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800963c:	b480      	push	{r7}
 800963e:	b085      	sub	sp, #20
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009652:	d00f      	beq.n	8009674 <TIM_Base_SetConfig+0x38>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	4a2b      	ldr	r2, [pc, #172]	@ (8009704 <TIM_Base_SetConfig+0xc8>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d00b      	beq.n	8009674 <TIM_Base_SetConfig+0x38>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	4a2a      	ldr	r2, [pc, #168]	@ (8009708 <TIM_Base_SetConfig+0xcc>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d007      	beq.n	8009674 <TIM_Base_SetConfig+0x38>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	4a29      	ldr	r2, [pc, #164]	@ (800970c <TIM_Base_SetConfig+0xd0>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d003      	beq.n	8009674 <TIM_Base_SetConfig+0x38>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4a28      	ldr	r2, [pc, #160]	@ (8009710 <TIM_Base_SetConfig+0xd4>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d108      	bne.n	8009686 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800967a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	4313      	orrs	r3, r2
 8009684:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800968c:	d017      	beq.n	80096be <TIM_Base_SetConfig+0x82>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	4a1c      	ldr	r2, [pc, #112]	@ (8009704 <TIM_Base_SetConfig+0xc8>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d013      	beq.n	80096be <TIM_Base_SetConfig+0x82>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4a1b      	ldr	r2, [pc, #108]	@ (8009708 <TIM_Base_SetConfig+0xcc>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d00f      	beq.n	80096be <TIM_Base_SetConfig+0x82>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4a1a      	ldr	r2, [pc, #104]	@ (800970c <TIM_Base_SetConfig+0xd0>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d00b      	beq.n	80096be <TIM_Base_SetConfig+0x82>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4a19      	ldr	r2, [pc, #100]	@ (8009710 <TIM_Base_SetConfig+0xd4>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d007      	beq.n	80096be <TIM_Base_SetConfig+0x82>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4a18      	ldr	r2, [pc, #96]	@ (8009714 <TIM_Base_SetConfig+0xd8>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d003      	beq.n	80096be <TIM_Base_SetConfig+0x82>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4a17      	ldr	r2, [pc, #92]	@ (8009718 <TIM_Base_SetConfig+0xdc>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d108      	bne.n	80096d0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80096c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	68fa      	ldr	r2, [r7, #12]
 80096cc:	4313      	orrs	r3, r2
 80096ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	691b      	ldr	r3, [r3, #16]
 80096da:	4313      	orrs	r3, r2
 80096dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	689a      	ldr	r2, [r3, #8]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2201      	movs	r2, #1
 80096f8:	615a      	str	r2, [r3, #20]
}
 80096fa:	bf00      	nop
 80096fc:	3714      	adds	r7, #20
 80096fe:	46bd      	mov	sp, r7
 8009700:	bc80      	pop	{r7}
 8009702:	4770      	bx	lr
 8009704:	40000400 	.word	0x40000400
 8009708:	40000800 	.word	0x40000800
 800970c:	40000c00 	.word	0x40000c00
 8009710:	40010800 	.word	0x40010800
 8009714:	40010c00 	.word	0x40010c00
 8009718:	40011000 	.word	0x40011000

0800971c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800971c:	b480      	push	{r7}
 800971e:	b087      	sub	sp, #28
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a1b      	ldr	r3, [r3, #32]
 800972a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6a1b      	ldr	r3, [r3, #32]
 8009730:	f023 0201 	bic.w	r2, r3, #1
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	699b      	ldr	r3, [r3, #24]
 8009742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800974a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f023 0303 	bic.w	r3, r3, #3
 8009752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	4313      	orrs	r3, r2
 800975c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	f023 0302 	bic.w	r3, r3, #2
 8009764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	697a      	ldr	r2, [r7, #20]
 800976c:	4313      	orrs	r3, r2
 800976e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	693a      	ldr	r2, [r7, #16]
 8009774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	68fa      	ldr	r2, [r7, #12]
 800977a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	685a      	ldr	r2, [r3, #4]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	697a      	ldr	r2, [r7, #20]
 8009788:	621a      	str	r2, [r3, #32]
}
 800978a:	bf00      	nop
 800978c:	371c      	adds	r7, #28
 800978e:	46bd      	mov	sp, r7
 8009790:	bc80      	pop	{r7}
 8009792:	4770      	bx	lr

08009794 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009794:	b480      	push	{r7}
 8009796:	b087      	sub	sp, #28
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6a1b      	ldr	r3, [r3, #32]
 80097a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6a1b      	ldr	r3, [r3, #32]
 80097a8:	f023 0210 	bic.w	r2, r3, #16
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	699b      	ldr	r3, [r3, #24]
 80097ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80097ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	021b      	lsls	r3, r3, #8
 80097d2:	68fa      	ldr	r2, [r7, #12]
 80097d4:	4313      	orrs	r3, r2
 80097d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	f023 0320 	bic.w	r3, r3, #32
 80097de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	011b      	lsls	r3, r3, #4
 80097e6:	697a      	ldr	r2, [r7, #20]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	693a      	ldr	r2, [r7, #16]
 80097f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	68fa      	ldr	r2, [r7, #12]
 80097f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	685a      	ldr	r2, [r3, #4]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	697a      	ldr	r2, [r7, #20]
 8009804:	621a      	str	r2, [r3, #32]
}
 8009806:	bf00      	nop
 8009808:	371c      	adds	r7, #28
 800980a:	46bd      	mov	sp, r7
 800980c:	bc80      	pop	{r7}
 800980e:	4770      	bx	lr

08009810 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009810:	b480      	push	{r7}
 8009812:	b087      	sub	sp, #28
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6a1b      	ldr	r3, [r3, #32]
 800981e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6a1b      	ldr	r3, [r3, #32]
 8009824:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	69db      	ldr	r3, [r3, #28]
 8009836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800983e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f023 0303 	bic.w	r3, r3, #3
 8009846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	68fa      	ldr	r2, [r7, #12]
 800984e:	4313      	orrs	r3, r2
 8009850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009858:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	021b      	lsls	r3, r3, #8
 8009860:	697a      	ldr	r2, [r7, #20]
 8009862:	4313      	orrs	r3, r2
 8009864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	693a      	ldr	r2, [r7, #16]
 800986a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	685a      	ldr	r2, [r3, #4]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	697a      	ldr	r2, [r7, #20]
 800987e:	621a      	str	r2, [r3, #32]
}
 8009880:	bf00      	nop
 8009882:	371c      	adds	r7, #28
 8009884:	46bd      	mov	sp, r7
 8009886:	bc80      	pop	{r7}
 8009888:	4770      	bx	lr

0800988a <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800988a:	b480      	push	{r7}
 800988c:	b087      	sub	sp, #28
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
 8009892:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6a1b      	ldr	r3, [r3, #32]
 8009898:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6a1b      	ldr	r3, [r3, #32]
 800989e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	69db      	ldr	r3, [r3, #28]
 80098b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80098b8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098c0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	021b      	lsls	r3, r3, #8
 80098c8:	68fa      	ldr	r2, [r7, #12]
 80098ca:	4313      	orrs	r3, r2
 80098cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80098d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	031b      	lsls	r3, r3, #12
 80098dc:	697a      	ldr	r2, [r7, #20]
 80098de:	4313      	orrs	r3, r2
 80098e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	693a      	ldr	r2, [r7, #16]
 80098e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	68fa      	ldr	r2, [r7, #12]
 80098ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	685a      	ldr	r2, [r3, #4]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	697a      	ldr	r2, [r7, #20]
 80098fa:	621a      	str	r2, [r3, #32]
}
 80098fc:	bf00      	nop
 80098fe:	371c      	adds	r7, #28
 8009900:	46bd      	mov	sp, r7
 8009902:	bc80      	pop	{r7}
 8009904:	4770      	bx	lr

08009906 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009906:	b480      	push	{r7}
 8009908:	b087      	sub	sp, #28
 800990a:	af00      	add	r7, sp, #0
 800990c:	60f8      	str	r0, [r7, #12]
 800990e:	60b9      	str	r1, [r7, #8]
 8009910:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	6a1b      	ldr	r3, [r3, #32]
 8009916:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6a1b      	ldr	r3, [r3, #32]
 800991c:	f023 0201 	bic.w	r2, r3, #1
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	699b      	ldr	r3, [r3, #24]
 8009928:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009930:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	011b      	lsls	r3, r3, #4
 8009936:	693a      	ldr	r2, [r7, #16]
 8009938:	4313      	orrs	r3, r2
 800993a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	f023 030a 	bic.w	r3, r3, #10
 8009942:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009944:	697a      	ldr	r2, [r7, #20]
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	4313      	orrs	r3, r2
 800994a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	693a      	ldr	r2, [r7, #16]
 8009950:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	697a      	ldr	r2, [r7, #20]
 8009956:	621a      	str	r2, [r3, #32]
}
 8009958:	bf00      	nop
 800995a:	371c      	adds	r7, #28
 800995c:	46bd      	mov	sp, r7
 800995e:	bc80      	pop	{r7}
 8009960:	4770      	bx	lr

08009962 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009962:	b480      	push	{r7}
 8009964:	b087      	sub	sp, #28
 8009966:	af00      	add	r7, sp, #0
 8009968:	60f8      	str	r0, [r7, #12]
 800996a:	60b9      	str	r1, [r7, #8]
 800996c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6a1b      	ldr	r3, [r3, #32]
 8009972:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6a1b      	ldr	r3, [r3, #32]
 8009978:	f023 0210 	bic.w	r2, r3, #16
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	699b      	ldr	r3, [r3, #24]
 8009984:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800998c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	031b      	lsls	r3, r3, #12
 8009992:	693a      	ldr	r2, [r7, #16]
 8009994:	4313      	orrs	r3, r2
 8009996:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800999e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	011b      	lsls	r3, r3, #4
 80099a4:	697a      	ldr	r2, [r7, #20]
 80099a6:	4313      	orrs	r3, r2
 80099a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	693a      	ldr	r2, [r7, #16]
 80099ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	697a      	ldr	r2, [r7, #20]
 80099b4:	621a      	str	r2, [r3, #32]
}
 80099b6:	bf00      	nop
 80099b8:	371c      	adds	r7, #28
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bc80      	pop	{r7}
 80099be:	4770      	bx	lr

080099c0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b085      	sub	sp, #20
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099d6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80099d8:	683a      	ldr	r2, [r7, #0]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	4313      	orrs	r3, r2
 80099de:	f043 0307 	orr.w	r3, r3, #7
 80099e2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	609a      	str	r2, [r3, #8]
}
 80099ea:	bf00      	nop
 80099ec:	3714      	adds	r7, #20
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bc80      	pop	{r7}
 80099f2:	4770      	bx	lr

080099f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b087      	sub	sp, #28
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	607a      	str	r2, [r7, #4]
 8009a00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	689b      	ldr	r3, [r3, #8]
 8009a06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009a0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	021a      	lsls	r2, r3, #8
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	431a      	orrs	r2, r3
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	697a      	ldr	r2, [r7, #20]
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	697a      	ldr	r2, [r7, #20]
 8009a26:	609a      	str	r2, [r3, #8]
}
 8009a28:	bf00      	nop
 8009a2a:	371c      	adds	r7, #28
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bc80      	pop	{r7}
 8009a30:	4770      	bx	lr

08009a32 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009a32:	b480      	push	{r7}
 8009a34:	b087      	sub	sp, #28
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	60f8      	str	r0, [r7, #12]
 8009a3a:	60b9      	str	r1, [r7, #8]
 8009a3c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	f003 031f 	and.w	r3, r3, #31
 8009a44:	2201      	movs	r2, #1
 8009a46:	fa02 f303 	lsl.w	r3, r2, r3
 8009a4a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6a1a      	ldr	r2, [r3, #32]
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	43db      	mvns	r3, r3
 8009a54:	401a      	ands	r2, r3
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	6a1a      	ldr	r2, [r3, #32]
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	f003 031f 	and.w	r3, r3, #31
 8009a64:	6879      	ldr	r1, [r7, #4]
 8009a66:	fa01 f303 	lsl.w	r3, r1, r3
 8009a6a:	431a      	orrs	r2, r3
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	621a      	str	r2, [r3, #32]
}
 8009a70:	bf00      	nop
 8009a72:	371c      	adds	r7, #28
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bc80      	pop	{r7}
 8009a78:	4770      	bx	lr
	...

08009a7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b085      	sub	sp, #20
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d101      	bne.n	8009a94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a90:	2302      	movs	r3, #2
 8009a92:	e046      	b.n	8009b22 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2202      	movs	r2, #2
 8009aa0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009aba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	68fa      	ldr	r2, [r7, #12]
 8009acc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ad6:	d00e      	beq.n	8009af6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a13      	ldr	r2, [pc, #76]	@ (8009b2c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d009      	beq.n	8009af6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a12      	ldr	r2, [pc, #72]	@ (8009b30 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d004      	beq.n	8009af6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a10      	ldr	r2, [pc, #64]	@ (8009b34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d10c      	bne.n	8009b10 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009afc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	68ba      	ldr	r2, [r7, #8]
 8009b04:	4313      	orrs	r3, r2
 8009b06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68ba      	ldr	r2, [r7, #8]
 8009b0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3714      	adds	r7, #20
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bc80      	pop	{r7}
 8009b2a:	4770      	bx	lr
 8009b2c:	40000400 	.word	0x40000400
 8009b30:	40000800 	.word	0x40000800
 8009b34:	40010800 	.word	0x40010800

08009b38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d101      	bne.n	8009b4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	e042      	b.n	8009bd0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d106      	bne.n	8009b64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f7f8 fd9c 	bl	800269c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2224      	movs	r2, #36	@ 0x24
 8009b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	68da      	ldr	r2, [r3, #12]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009b7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 f91d 	bl	8009dbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	691a      	ldr	r2, [r3, #16]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009b90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	695a      	ldr	r2, [r3, #20]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009ba0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	68da      	ldr	r2, [r3, #12]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009bb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2220      	movs	r2, #32
 8009bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2220      	movs	r2, #32
 8009bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009bce:	2300      	movs	r3, #0
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3708      	adds	r7, #8
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b08a      	sub	sp, #40	@ 0x28
 8009bdc:	af02      	add	r7, sp, #8
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	60b9      	str	r1, [r7, #8]
 8009be2:	603b      	str	r3, [r7, #0]
 8009be4:	4613      	mov	r3, r2
 8009be6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009be8:	2300      	movs	r3, #0
 8009bea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	2b20      	cmp	r3, #32
 8009bf6:	d16d      	bne.n	8009cd4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d002      	beq.n	8009c04 <HAL_UART_Transmit+0x2c>
 8009bfe:	88fb      	ldrh	r3, [r7, #6]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d101      	bne.n	8009c08 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009c04:	2301      	movs	r3, #1
 8009c06:	e066      	b.n	8009cd6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2221      	movs	r2, #33	@ 0x21
 8009c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c16:	f7fb fddf 	bl	80057d8 <HAL_GetTick>
 8009c1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	88fa      	ldrh	r2, [r7, #6]
 8009c20:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	88fa      	ldrh	r2, [r7, #6]
 8009c26:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c30:	d108      	bne.n	8009c44 <HAL_UART_Transmit+0x6c>
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	691b      	ldr	r3, [r3, #16]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d104      	bne.n	8009c44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	61bb      	str	r3, [r7, #24]
 8009c42:	e003      	b.n	8009c4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009c4c:	e02a      	b.n	8009ca4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	2200      	movs	r2, #0
 8009c56:	2180      	movs	r1, #128	@ 0x80
 8009c58:	68f8      	ldr	r0, [r7, #12]
 8009c5a:	f000 f840 	bl	8009cde <UART_WaitOnFlagUntilTimeout>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d001      	beq.n	8009c68 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8009c64:	2303      	movs	r3, #3
 8009c66:	e036      	b.n	8009cd6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009c68:	69fb      	ldr	r3, [r7, #28]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d10b      	bne.n	8009c86 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	881b      	ldrh	r3, [r3, #0]
 8009c72:	461a      	mov	r2, r3
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009c7e:	69bb      	ldr	r3, [r7, #24]
 8009c80:	3302      	adds	r3, #2
 8009c82:	61bb      	str	r3, [r7, #24]
 8009c84:	e007      	b.n	8009c96 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	781a      	ldrb	r2, [r3, #0]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009c90:	69fb      	ldr	r3, [r7, #28]
 8009c92:	3301      	adds	r3, #1
 8009c94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	3b01      	subs	r3, #1
 8009c9e:	b29a      	uxth	r2, r3
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d1cf      	bne.n	8009c4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	9300      	str	r3, [sp, #0]
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	2140      	movs	r1, #64	@ 0x40
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f000 f810 	bl	8009cde <UART_WaitOnFlagUntilTimeout>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d001      	beq.n	8009cc8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8009cc4:	2303      	movs	r3, #3
 8009cc6:	e006      	b.n	8009cd6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2220      	movs	r2, #32
 8009ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	e000      	b.n	8009cd6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8009cd4:	2302      	movs	r3, #2
  }
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3720      	adds	r7, #32
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	b090      	sub	sp, #64	@ 0x40
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	60f8      	str	r0, [r7, #12]
 8009ce6:	60b9      	str	r1, [r7, #8]
 8009ce8:	603b      	str	r3, [r7, #0]
 8009cea:	4613      	mov	r3, r2
 8009cec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cee:	e050      	b.n	8009d92 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cf6:	d04c      	beq.n	8009d92 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009cf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d007      	beq.n	8009d0e <UART_WaitOnFlagUntilTimeout+0x30>
 8009cfe:	f7fb fd6b 	bl	80057d8 <HAL_GetTick>
 8009d02:	4602      	mov	r2, r0
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	1ad3      	subs	r3, r2, r3
 8009d08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d241      	bcs.n	8009d92 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	330c      	adds	r3, #12
 8009d14:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d18:	e853 3f00 	ldrex	r3, [r3]
 8009d1c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d20:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	330c      	adds	r3, #12
 8009d2c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009d2e:	637a      	str	r2, [r7, #52]	@ 0x34
 8009d30:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009d34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d36:	e841 2300 	strex	r3, r2, [r1]
 8009d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d1e5      	bne.n	8009d0e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	3314      	adds	r3, #20
 8009d48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	e853 3f00 	ldrex	r3, [r3]
 8009d50:	613b      	str	r3, [r7, #16]
   return(result);
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	f023 0301 	bic.w	r3, r3, #1
 8009d58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	3314      	adds	r3, #20
 8009d60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009d62:	623a      	str	r2, [r7, #32]
 8009d64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d66:	69f9      	ldr	r1, [r7, #28]
 8009d68:	6a3a      	ldr	r2, [r7, #32]
 8009d6a:	e841 2300 	strex	r3, r2, [r1]
 8009d6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d70:	69bb      	ldr	r3, [r7, #24]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d1e5      	bne.n	8009d42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2220      	movs	r2, #32
 8009d7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2220      	movs	r2, #32
 8009d82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8009d8e:	2303      	movs	r3, #3
 8009d90:	e00f      	b.n	8009db2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	4013      	ands	r3, r2
 8009d9c:	68ba      	ldr	r2, [r7, #8]
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	bf0c      	ite	eq
 8009da2:	2301      	moveq	r3, #1
 8009da4:	2300      	movne	r3, #0
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	461a      	mov	r2, r3
 8009daa:	79fb      	ldrb	r3, [r7, #7]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d09f      	beq.n	8009cf0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009db0:	2300      	movs	r3, #0
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3740      	adds	r7, #64	@ 0x40
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
	...

08009dbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	691b      	ldr	r3, [r3, #16]
 8009dca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	68da      	ldr	r2, [r3, #12]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	430a      	orrs	r2, r1
 8009dd8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	689a      	ldr	r2, [r3, #8]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	691b      	ldr	r3, [r3, #16]
 8009de2:	431a      	orrs	r2, r3
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	695b      	ldr	r3, [r3, #20]
 8009de8:	431a      	orrs	r2, r3
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	69db      	ldr	r3, [r3, #28]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8009dfc:	f023 030c 	bic.w	r3, r3, #12
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	6812      	ldr	r2, [r2, #0]
 8009e04:	68b9      	ldr	r1, [r7, #8]
 8009e06:	430b      	orrs	r3, r1
 8009e08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	695b      	ldr	r3, [r3, #20]
 8009e10:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	699a      	ldr	r2, [r3, #24]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	430a      	orrs	r2, r1
 8009e1e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a55      	ldr	r2, [pc, #340]	@ (8009f7c <UART_SetConfig+0x1c0>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d103      	bne.n	8009e32 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009e2a:	f7fe fcab 	bl	8008784 <HAL_RCC_GetPCLK2Freq>
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	e002      	b.n	8009e38 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009e32:	f7fe fc93 	bl	800875c <HAL_RCC_GetPCLK1Freq>
 8009e36:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	69db      	ldr	r3, [r3, #28]
 8009e3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e40:	d14c      	bne.n	8009edc <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009e42:	68fa      	ldr	r2, [r7, #12]
 8009e44:	4613      	mov	r3, r2
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	4413      	add	r3, r2
 8009e4a:	009a      	lsls	r2, r3, #2
 8009e4c:	441a      	add	r2, r3
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	005b      	lsls	r3, r3, #1
 8009e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e58:	4a49      	ldr	r2, [pc, #292]	@ (8009f80 <UART_SetConfig+0x1c4>)
 8009e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e5e:	095b      	lsrs	r3, r3, #5
 8009e60:	0119      	lsls	r1, r3, #4
 8009e62:	68fa      	ldr	r2, [r7, #12]
 8009e64:	4613      	mov	r3, r2
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	4413      	add	r3, r2
 8009e6a:	009a      	lsls	r2, r3, #2
 8009e6c:	441a      	add	r2, r3
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	005b      	lsls	r3, r3, #1
 8009e74:	fbb2 f2f3 	udiv	r2, r2, r3
 8009e78:	4b41      	ldr	r3, [pc, #260]	@ (8009f80 <UART_SetConfig+0x1c4>)
 8009e7a:	fba3 0302 	umull	r0, r3, r3, r2
 8009e7e:	095b      	lsrs	r3, r3, #5
 8009e80:	2064      	movs	r0, #100	@ 0x64
 8009e82:	fb00 f303 	mul.w	r3, r0, r3
 8009e86:	1ad3      	subs	r3, r2, r3
 8009e88:	00db      	lsls	r3, r3, #3
 8009e8a:	3332      	adds	r3, #50	@ 0x32
 8009e8c:	4a3c      	ldr	r2, [pc, #240]	@ (8009f80 <UART_SetConfig+0x1c4>)
 8009e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8009e92:	095b      	lsrs	r3, r3, #5
 8009e94:	005b      	lsls	r3, r3, #1
 8009e96:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009e9a:	4419      	add	r1, r3
 8009e9c:	68fa      	ldr	r2, [r7, #12]
 8009e9e:	4613      	mov	r3, r2
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	4413      	add	r3, r2
 8009ea4:	009a      	lsls	r2, r3, #2
 8009ea6:	441a      	add	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	005b      	lsls	r3, r3, #1
 8009eae:	fbb2 f2f3 	udiv	r2, r2, r3
 8009eb2:	4b33      	ldr	r3, [pc, #204]	@ (8009f80 <UART_SetConfig+0x1c4>)
 8009eb4:	fba3 0302 	umull	r0, r3, r3, r2
 8009eb8:	095b      	lsrs	r3, r3, #5
 8009eba:	2064      	movs	r0, #100	@ 0x64
 8009ebc:	fb00 f303 	mul.w	r3, r0, r3
 8009ec0:	1ad3      	subs	r3, r2, r3
 8009ec2:	00db      	lsls	r3, r3, #3
 8009ec4:	3332      	adds	r3, #50	@ 0x32
 8009ec6:	4a2e      	ldr	r2, [pc, #184]	@ (8009f80 <UART_SetConfig+0x1c4>)
 8009ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8009ecc:	095b      	lsrs	r3, r3, #5
 8009ece:	f003 0207 	and.w	r2, r3, #7
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	440a      	add	r2, r1
 8009ed8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009eda:	e04a      	b.n	8009f72 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009edc:	68fa      	ldr	r2, [r7, #12]
 8009ede:	4613      	mov	r3, r2
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	4413      	add	r3, r2
 8009ee4:	009a      	lsls	r2, r3, #2
 8009ee6:	441a      	add	r2, r3
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ef2:	4a23      	ldr	r2, [pc, #140]	@ (8009f80 <UART_SetConfig+0x1c4>)
 8009ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8009ef8:	095b      	lsrs	r3, r3, #5
 8009efa:	0119      	lsls	r1, r3, #4
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	4613      	mov	r3, r2
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	4413      	add	r3, r2
 8009f04:	009a      	lsls	r2, r3, #2
 8009f06:	441a      	add	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8009f12:	4b1b      	ldr	r3, [pc, #108]	@ (8009f80 <UART_SetConfig+0x1c4>)
 8009f14:	fba3 0302 	umull	r0, r3, r3, r2
 8009f18:	095b      	lsrs	r3, r3, #5
 8009f1a:	2064      	movs	r0, #100	@ 0x64
 8009f1c:	fb00 f303 	mul.w	r3, r0, r3
 8009f20:	1ad3      	subs	r3, r2, r3
 8009f22:	011b      	lsls	r3, r3, #4
 8009f24:	3332      	adds	r3, #50	@ 0x32
 8009f26:	4a16      	ldr	r2, [pc, #88]	@ (8009f80 <UART_SetConfig+0x1c4>)
 8009f28:	fba2 2303 	umull	r2, r3, r2, r3
 8009f2c:	095b      	lsrs	r3, r3, #5
 8009f2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009f32:	4419      	add	r1, r3
 8009f34:	68fa      	ldr	r2, [r7, #12]
 8009f36:	4613      	mov	r3, r2
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	4413      	add	r3, r2
 8009f3c:	009a      	lsls	r2, r3, #2
 8009f3e:	441a      	add	r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	fbb2 f2f3 	udiv	r2, r2, r3
 8009f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8009f80 <UART_SetConfig+0x1c4>)
 8009f4c:	fba3 0302 	umull	r0, r3, r3, r2
 8009f50:	095b      	lsrs	r3, r3, #5
 8009f52:	2064      	movs	r0, #100	@ 0x64
 8009f54:	fb00 f303 	mul.w	r3, r0, r3
 8009f58:	1ad3      	subs	r3, r2, r3
 8009f5a:	011b      	lsls	r3, r3, #4
 8009f5c:	3332      	adds	r3, #50	@ 0x32
 8009f5e:	4a08      	ldr	r2, [pc, #32]	@ (8009f80 <UART_SetConfig+0x1c4>)
 8009f60:	fba2 2303 	umull	r2, r3, r2, r3
 8009f64:	095b      	lsrs	r3, r3, #5
 8009f66:	f003 020f 	and.w	r2, r3, #15
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	440a      	add	r2, r1
 8009f70:	609a      	str	r2, [r3, #8]
}
 8009f72:	bf00      	nop
 8009f74:	3710      	adds	r7, #16
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	40013800 	.word	0x40013800
 8009f80:	51eb851f 	.word	0x51eb851f

08009f84 <__cvt>:
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f8a:	461d      	mov	r5, r3
 8009f8c:	bfbb      	ittet	lt
 8009f8e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8009f92:	461d      	movlt	r5, r3
 8009f94:	2300      	movge	r3, #0
 8009f96:	232d      	movlt	r3, #45	@ 0x2d
 8009f98:	b088      	sub	sp, #32
 8009f9a:	4614      	mov	r4, r2
 8009f9c:	bfb8      	it	lt
 8009f9e:	4614      	movlt	r4, r2
 8009fa0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009fa2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009fa4:	7013      	strb	r3, [r2, #0]
 8009fa6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009fa8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8009fac:	f023 0820 	bic.w	r8, r3, #32
 8009fb0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009fb4:	d005      	beq.n	8009fc2 <__cvt+0x3e>
 8009fb6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009fba:	d100      	bne.n	8009fbe <__cvt+0x3a>
 8009fbc:	3601      	adds	r6, #1
 8009fbe:	2302      	movs	r3, #2
 8009fc0:	e000      	b.n	8009fc4 <__cvt+0x40>
 8009fc2:	2303      	movs	r3, #3
 8009fc4:	aa07      	add	r2, sp, #28
 8009fc6:	9204      	str	r2, [sp, #16]
 8009fc8:	aa06      	add	r2, sp, #24
 8009fca:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009fce:	e9cd 3600 	strd	r3, r6, [sp]
 8009fd2:	4622      	mov	r2, r4
 8009fd4:	462b      	mov	r3, r5
 8009fd6:	f000 ff73 	bl	800aec0 <_dtoa_r>
 8009fda:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009fde:	4607      	mov	r7, r0
 8009fe0:	d119      	bne.n	800a016 <__cvt+0x92>
 8009fe2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009fe4:	07db      	lsls	r3, r3, #31
 8009fe6:	d50e      	bpl.n	800a006 <__cvt+0x82>
 8009fe8:	eb00 0906 	add.w	r9, r0, r6
 8009fec:	2200      	movs	r2, #0
 8009fee:	2300      	movs	r3, #0
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	4629      	mov	r1, r5
 8009ff4:	f7f6 fcf0 	bl	80009d8 <__aeabi_dcmpeq>
 8009ff8:	b108      	cbz	r0, 8009ffe <__cvt+0x7a>
 8009ffa:	f8cd 901c 	str.w	r9, [sp, #28]
 8009ffe:	2230      	movs	r2, #48	@ 0x30
 800a000:	9b07      	ldr	r3, [sp, #28]
 800a002:	454b      	cmp	r3, r9
 800a004:	d31e      	bcc.n	800a044 <__cvt+0xc0>
 800a006:	4638      	mov	r0, r7
 800a008:	9b07      	ldr	r3, [sp, #28]
 800a00a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a00c:	1bdb      	subs	r3, r3, r7
 800a00e:	6013      	str	r3, [r2, #0]
 800a010:	b008      	add	sp, #32
 800a012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a016:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a01a:	eb00 0906 	add.w	r9, r0, r6
 800a01e:	d1e5      	bne.n	8009fec <__cvt+0x68>
 800a020:	7803      	ldrb	r3, [r0, #0]
 800a022:	2b30      	cmp	r3, #48	@ 0x30
 800a024:	d10a      	bne.n	800a03c <__cvt+0xb8>
 800a026:	2200      	movs	r2, #0
 800a028:	2300      	movs	r3, #0
 800a02a:	4620      	mov	r0, r4
 800a02c:	4629      	mov	r1, r5
 800a02e:	f7f6 fcd3 	bl	80009d8 <__aeabi_dcmpeq>
 800a032:	b918      	cbnz	r0, 800a03c <__cvt+0xb8>
 800a034:	f1c6 0601 	rsb	r6, r6, #1
 800a038:	f8ca 6000 	str.w	r6, [sl]
 800a03c:	f8da 3000 	ldr.w	r3, [sl]
 800a040:	4499      	add	r9, r3
 800a042:	e7d3      	b.n	8009fec <__cvt+0x68>
 800a044:	1c59      	adds	r1, r3, #1
 800a046:	9107      	str	r1, [sp, #28]
 800a048:	701a      	strb	r2, [r3, #0]
 800a04a:	e7d9      	b.n	800a000 <__cvt+0x7c>

0800a04c <__exponent>:
 800a04c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a04e:	2900      	cmp	r1, #0
 800a050:	bfb6      	itet	lt
 800a052:	232d      	movlt	r3, #45	@ 0x2d
 800a054:	232b      	movge	r3, #43	@ 0x2b
 800a056:	4249      	neglt	r1, r1
 800a058:	2909      	cmp	r1, #9
 800a05a:	7002      	strb	r2, [r0, #0]
 800a05c:	7043      	strb	r3, [r0, #1]
 800a05e:	dd29      	ble.n	800a0b4 <__exponent+0x68>
 800a060:	f10d 0307 	add.w	r3, sp, #7
 800a064:	461d      	mov	r5, r3
 800a066:	270a      	movs	r7, #10
 800a068:	fbb1 f6f7 	udiv	r6, r1, r7
 800a06c:	461a      	mov	r2, r3
 800a06e:	fb07 1416 	mls	r4, r7, r6, r1
 800a072:	3430      	adds	r4, #48	@ 0x30
 800a074:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a078:	460c      	mov	r4, r1
 800a07a:	2c63      	cmp	r4, #99	@ 0x63
 800a07c:	4631      	mov	r1, r6
 800a07e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a082:	dcf1      	bgt.n	800a068 <__exponent+0x1c>
 800a084:	3130      	adds	r1, #48	@ 0x30
 800a086:	1e94      	subs	r4, r2, #2
 800a088:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a08c:	4623      	mov	r3, r4
 800a08e:	1c41      	adds	r1, r0, #1
 800a090:	42ab      	cmp	r3, r5
 800a092:	d30a      	bcc.n	800a0aa <__exponent+0x5e>
 800a094:	f10d 0309 	add.w	r3, sp, #9
 800a098:	1a9b      	subs	r3, r3, r2
 800a09a:	42ac      	cmp	r4, r5
 800a09c:	bf88      	it	hi
 800a09e:	2300      	movhi	r3, #0
 800a0a0:	3302      	adds	r3, #2
 800a0a2:	4403      	add	r3, r0
 800a0a4:	1a18      	subs	r0, r3, r0
 800a0a6:	b003      	add	sp, #12
 800a0a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0aa:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a0ae:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a0b2:	e7ed      	b.n	800a090 <__exponent+0x44>
 800a0b4:	2330      	movs	r3, #48	@ 0x30
 800a0b6:	3130      	adds	r1, #48	@ 0x30
 800a0b8:	7083      	strb	r3, [r0, #2]
 800a0ba:	70c1      	strb	r1, [r0, #3]
 800a0bc:	1d03      	adds	r3, r0, #4
 800a0be:	e7f1      	b.n	800a0a4 <__exponent+0x58>

0800a0c0 <_printf_float>:
 800a0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c4:	b091      	sub	sp, #68	@ 0x44
 800a0c6:	460c      	mov	r4, r1
 800a0c8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800a0cc:	4616      	mov	r6, r2
 800a0ce:	461f      	mov	r7, r3
 800a0d0:	4605      	mov	r5, r0
 800a0d2:	f000 fde5 	bl	800aca0 <_localeconv_r>
 800a0d6:	6803      	ldr	r3, [r0, #0]
 800a0d8:	4618      	mov	r0, r3
 800a0da:	9308      	str	r3, [sp, #32]
 800a0dc:	f7f6 f850 	bl	8000180 <strlen>
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	930e      	str	r3, [sp, #56]	@ 0x38
 800a0e4:	f8d8 3000 	ldr.w	r3, [r8]
 800a0e8:	9009      	str	r0, [sp, #36]	@ 0x24
 800a0ea:	3307      	adds	r3, #7
 800a0ec:	f023 0307 	bic.w	r3, r3, #7
 800a0f0:	f103 0208 	add.w	r2, r3, #8
 800a0f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a0f8:	f8d4 b000 	ldr.w	fp, [r4]
 800a0fc:	f8c8 2000 	str.w	r2, [r8]
 800a100:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a104:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a108:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a10a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a10e:	f04f 32ff 	mov.w	r2, #4294967295
 800a112:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a116:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a11a:	4b9c      	ldr	r3, [pc, #624]	@ (800a38c <_printf_float+0x2cc>)
 800a11c:	f7f6 fc8e 	bl	8000a3c <__aeabi_dcmpun>
 800a120:	bb70      	cbnz	r0, 800a180 <_printf_float+0xc0>
 800a122:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a126:	f04f 32ff 	mov.w	r2, #4294967295
 800a12a:	4b98      	ldr	r3, [pc, #608]	@ (800a38c <_printf_float+0x2cc>)
 800a12c:	f7f6 fc68 	bl	8000a00 <__aeabi_dcmple>
 800a130:	bb30      	cbnz	r0, 800a180 <_printf_float+0xc0>
 800a132:	2200      	movs	r2, #0
 800a134:	2300      	movs	r3, #0
 800a136:	4640      	mov	r0, r8
 800a138:	4649      	mov	r1, r9
 800a13a:	f7f6 fc57 	bl	80009ec <__aeabi_dcmplt>
 800a13e:	b110      	cbz	r0, 800a146 <_printf_float+0x86>
 800a140:	232d      	movs	r3, #45	@ 0x2d
 800a142:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a146:	4a92      	ldr	r2, [pc, #584]	@ (800a390 <_printf_float+0x2d0>)
 800a148:	4b92      	ldr	r3, [pc, #584]	@ (800a394 <_printf_float+0x2d4>)
 800a14a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a14e:	bf94      	ite	ls
 800a150:	4690      	movls	r8, r2
 800a152:	4698      	movhi	r8, r3
 800a154:	2303      	movs	r3, #3
 800a156:	f04f 0900 	mov.w	r9, #0
 800a15a:	6123      	str	r3, [r4, #16]
 800a15c:	f02b 0304 	bic.w	r3, fp, #4
 800a160:	6023      	str	r3, [r4, #0]
 800a162:	4633      	mov	r3, r6
 800a164:	4621      	mov	r1, r4
 800a166:	4628      	mov	r0, r5
 800a168:	9700      	str	r7, [sp, #0]
 800a16a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800a16c:	f000 f9d4 	bl	800a518 <_printf_common>
 800a170:	3001      	adds	r0, #1
 800a172:	f040 8090 	bne.w	800a296 <_printf_float+0x1d6>
 800a176:	f04f 30ff 	mov.w	r0, #4294967295
 800a17a:	b011      	add	sp, #68	@ 0x44
 800a17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a180:	4642      	mov	r2, r8
 800a182:	464b      	mov	r3, r9
 800a184:	4640      	mov	r0, r8
 800a186:	4649      	mov	r1, r9
 800a188:	f7f6 fc58 	bl	8000a3c <__aeabi_dcmpun>
 800a18c:	b148      	cbz	r0, 800a1a2 <_printf_float+0xe2>
 800a18e:	464b      	mov	r3, r9
 800a190:	2b00      	cmp	r3, #0
 800a192:	bfb8      	it	lt
 800a194:	232d      	movlt	r3, #45	@ 0x2d
 800a196:	4a80      	ldr	r2, [pc, #512]	@ (800a398 <_printf_float+0x2d8>)
 800a198:	bfb8      	it	lt
 800a19a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a19e:	4b7f      	ldr	r3, [pc, #508]	@ (800a39c <_printf_float+0x2dc>)
 800a1a0:	e7d3      	b.n	800a14a <_printf_float+0x8a>
 800a1a2:	6863      	ldr	r3, [r4, #4]
 800a1a4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800a1a8:	1c5a      	adds	r2, r3, #1
 800a1aa:	d13f      	bne.n	800a22c <_printf_float+0x16c>
 800a1ac:	2306      	movs	r3, #6
 800a1ae:	6063      	str	r3, [r4, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800a1b6:	6023      	str	r3, [r4, #0]
 800a1b8:	9206      	str	r2, [sp, #24]
 800a1ba:	aa0e      	add	r2, sp, #56	@ 0x38
 800a1bc:	e9cd a204 	strd	sl, r2, [sp, #16]
 800a1c0:	aa0d      	add	r2, sp, #52	@ 0x34
 800a1c2:	9203      	str	r2, [sp, #12]
 800a1c4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800a1c8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a1cc:	6863      	ldr	r3, [r4, #4]
 800a1ce:	4642      	mov	r2, r8
 800a1d0:	9300      	str	r3, [sp, #0]
 800a1d2:	4628      	mov	r0, r5
 800a1d4:	464b      	mov	r3, r9
 800a1d6:	910a      	str	r1, [sp, #40]	@ 0x28
 800a1d8:	f7ff fed4 	bl	8009f84 <__cvt>
 800a1dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a1de:	4680      	mov	r8, r0
 800a1e0:	2947      	cmp	r1, #71	@ 0x47
 800a1e2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a1e4:	d128      	bne.n	800a238 <_printf_float+0x178>
 800a1e6:	1cc8      	adds	r0, r1, #3
 800a1e8:	db02      	blt.n	800a1f0 <_printf_float+0x130>
 800a1ea:	6863      	ldr	r3, [r4, #4]
 800a1ec:	4299      	cmp	r1, r3
 800a1ee:	dd40      	ble.n	800a272 <_printf_float+0x1b2>
 800a1f0:	f1aa 0a02 	sub.w	sl, sl, #2
 800a1f4:	fa5f fa8a 	uxtb.w	sl, sl
 800a1f8:	4652      	mov	r2, sl
 800a1fa:	3901      	subs	r1, #1
 800a1fc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a200:	910d      	str	r1, [sp, #52]	@ 0x34
 800a202:	f7ff ff23 	bl	800a04c <__exponent>
 800a206:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a208:	4681      	mov	r9, r0
 800a20a:	1813      	adds	r3, r2, r0
 800a20c:	2a01      	cmp	r2, #1
 800a20e:	6123      	str	r3, [r4, #16]
 800a210:	dc02      	bgt.n	800a218 <_printf_float+0x158>
 800a212:	6822      	ldr	r2, [r4, #0]
 800a214:	07d2      	lsls	r2, r2, #31
 800a216:	d501      	bpl.n	800a21c <_printf_float+0x15c>
 800a218:	3301      	adds	r3, #1
 800a21a:	6123      	str	r3, [r4, #16]
 800a21c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800a220:	2b00      	cmp	r3, #0
 800a222:	d09e      	beq.n	800a162 <_printf_float+0xa2>
 800a224:	232d      	movs	r3, #45	@ 0x2d
 800a226:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a22a:	e79a      	b.n	800a162 <_printf_float+0xa2>
 800a22c:	2947      	cmp	r1, #71	@ 0x47
 800a22e:	d1bf      	bne.n	800a1b0 <_printf_float+0xf0>
 800a230:	2b00      	cmp	r3, #0
 800a232:	d1bd      	bne.n	800a1b0 <_printf_float+0xf0>
 800a234:	2301      	movs	r3, #1
 800a236:	e7ba      	b.n	800a1ae <_printf_float+0xee>
 800a238:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a23c:	d9dc      	bls.n	800a1f8 <_printf_float+0x138>
 800a23e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a242:	d118      	bne.n	800a276 <_printf_float+0x1b6>
 800a244:	2900      	cmp	r1, #0
 800a246:	6863      	ldr	r3, [r4, #4]
 800a248:	dd0b      	ble.n	800a262 <_printf_float+0x1a2>
 800a24a:	6121      	str	r1, [r4, #16]
 800a24c:	b913      	cbnz	r3, 800a254 <_printf_float+0x194>
 800a24e:	6822      	ldr	r2, [r4, #0]
 800a250:	07d0      	lsls	r0, r2, #31
 800a252:	d502      	bpl.n	800a25a <_printf_float+0x19a>
 800a254:	3301      	adds	r3, #1
 800a256:	440b      	add	r3, r1
 800a258:	6123      	str	r3, [r4, #16]
 800a25a:	f04f 0900 	mov.w	r9, #0
 800a25e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a260:	e7dc      	b.n	800a21c <_printf_float+0x15c>
 800a262:	b913      	cbnz	r3, 800a26a <_printf_float+0x1aa>
 800a264:	6822      	ldr	r2, [r4, #0]
 800a266:	07d2      	lsls	r2, r2, #31
 800a268:	d501      	bpl.n	800a26e <_printf_float+0x1ae>
 800a26a:	3302      	adds	r3, #2
 800a26c:	e7f4      	b.n	800a258 <_printf_float+0x198>
 800a26e:	2301      	movs	r3, #1
 800a270:	e7f2      	b.n	800a258 <_printf_float+0x198>
 800a272:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a276:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a278:	4299      	cmp	r1, r3
 800a27a:	db05      	blt.n	800a288 <_printf_float+0x1c8>
 800a27c:	6823      	ldr	r3, [r4, #0]
 800a27e:	6121      	str	r1, [r4, #16]
 800a280:	07d8      	lsls	r0, r3, #31
 800a282:	d5ea      	bpl.n	800a25a <_printf_float+0x19a>
 800a284:	1c4b      	adds	r3, r1, #1
 800a286:	e7e7      	b.n	800a258 <_printf_float+0x198>
 800a288:	2900      	cmp	r1, #0
 800a28a:	bfcc      	ite	gt
 800a28c:	2201      	movgt	r2, #1
 800a28e:	f1c1 0202 	rsble	r2, r1, #2
 800a292:	4413      	add	r3, r2
 800a294:	e7e0      	b.n	800a258 <_printf_float+0x198>
 800a296:	6823      	ldr	r3, [r4, #0]
 800a298:	055a      	lsls	r2, r3, #21
 800a29a:	d407      	bmi.n	800a2ac <_printf_float+0x1ec>
 800a29c:	6923      	ldr	r3, [r4, #16]
 800a29e:	4642      	mov	r2, r8
 800a2a0:	4631      	mov	r1, r6
 800a2a2:	4628      	mov	r0, r5
 800a2a4:	47b8      	blx	r7
 800a2a6:	3001      	adds	r0, #1
 800a2a8:	d12b      	bne.n	800a302 <_printf_float+0x242>
 800a2aa:	e764      	b.n	800a176 <_printf_float+0xb6>
 800a2ac:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a2b0:	f240 80dc 	bls.w	800a46c <_printf_float+0x3ac>
 800a2b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	f7f6 fb8c 	bl	80009d8 <__aeabi_dcmpeq>
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	d033      	beq.n	800a32c <_printf_float+0x26c>
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	4631      	mov	r1, r6
 800a2c8:	4628      	mov	r0, r5
 800a2ca:	4a35      	ldr	r2, [pc, #212]	@ (800a3a0 <_printf_float+0x2e0>)
 800a2cc:	47b8      	blx	r7
 800a2ce:	3001      	adds	r0, #1
 800a2d0:	f43f af51 	beq.w	800a176 <_printf_float+0xb6>
 800a2d4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800a2d8:	4543      	cmp	r3, r8
 800a2da:	db02      	blt.n	800a2e2 <_printf_float+0x222>
 800a2dc:	6823      	ldr	r3, [r4, #0]
 800a2de:	07d8      	lsls	r0, r3, #31
 800a2e0:	d50f      	bpl.n	800a302 <_printf_float+0x242>
 800a2e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a2e6:	4631      	mov	r1, r6
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	47b8      	blx	r7
 800a2ec:	3001      	adds	r0, #1
 800a2ee:	f43f af42 	beq.w	800a176 <_printf_float+0xb6>
 800a2f2:	f04f 0900 	mov.w	r9, #0
 800a2f6:	f108 38ff 	add.w	r8, r8, #4294967295
 800a2fa:	f104 0a1a 	add.w	sl, r4, #26
 800a2fe:	45c8      	cmp	r8, r9
 800a300:	dc09      	bgt.n	800a316 <_printf_float+0x256>
 800a302:	6823      	ldr	r3, [r4, #0]
 800a304:	079b      	lsls	r3, r3, #30
 800a306:	f100 8102 	bmi.w	800a50e <_printf_float+0x44e>
 800a30a:	68e0      	ldr	r0, [r4, #12]
 800a30c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a30e:	4298      	cmp	r0, r3
 800a310:	bfb8      	it	lt
 800a312:	4618      	movlt	r0, r3
 800a314:	e731      	b.n	800a17a <_printf_float+0xba>
 800a316:	2301      	movs	r3, #1
 800a318:	4652      	mov	r2, sl
 800a31a:	4631      	mov	r1, r6
 800a31c:	4628      	mov	r0, r5
 800a31e:	47b8      	blx	r7
 800a320:	3001      	adds	r0, #1
 800a322:	f43f af28 	beq.w	800a176 <_printf_float+0xb6>
 800a326:	f109 0901 	add.w	r9, r9, #1
 800a32a:	e7e8      	b.n	800a2fe <_printf_float+0x23e>
 800a32c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a32e:	2b00      	cmp	r3, #0
 800a330:	dc38      	bgt.n	800a3a4 <_printf_float+0x2e4>
 800a332:	2301      	movs	r3, #1
 800a334:	4631      	mov	r1, r6
 800a336:	4628      	mov	r0, r5
 800a338:	4a19      	ldr	r2, [pc, #100]	@ (800a3a0 <_printf_float+0x2e0>)
 800a33a:	47b8      	blx	r7
 800a33c:	3001      	adds	r0, #1
 800a33e:	f43f af1a 	beq.w	800a176 <_printf_float+0xb6>
 800a342:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800a346:	ea59 0303 	orrs.w	r3, r9, r3
 800a34a:	d102      	bne.n	800a352 <_printf_float+0x292>
 800a34c:	6823      	ldr	r3, [r4, #0]
 800a34e:	07d9      	lsls	r1, r3, #31
 800a350:	d5d7      	bpl.n	800a302 <_printf_float+0x242>
 800a352:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a356:	4631      	mov	r1, r6
 800a358:	4628      	mov	r0, r5
 800a35a:	47b8      	blx	r7
 800a35c:	3001      	adds	r0, #1
 800a35e:	f43f af0a 	beq.w	800a176 <_printf_float+0xb6>
 800a362:	f04f 0a00 	mov.w	sl, #0
 800a366:	f104 0b1a 	add.w	fp, r4, #26
 800a36a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a36c:	425b      	negs	r3, r3
 800a36e:	4553      	cmp	r3, sl
 800a370:	dc01      	bgt.n	800a376 <_printf_float+0x2b6>
 800a372:	464b      	mov	r3, r9
 800a374:	e793      	b.n	800a29e <_printf_float+0x1de>
 800a376:	2301      	movs	r3, #1
 800a378:	465a      	mov	r2, fp
 800a37a:	4631      	mov	r1, r6
 800a37c:	4628      	mov	r0, r5
 800a37e:	47b8      	blx	r7
 800a380:	3001      	adds	r0, #1
 800a382:	f43f aef8 	beq.w	800a176 <_printf_float+0xb6>
 800a386:	f10a 0a01 	add.w	sl, sl, #1
 800a38a:	e7ee      	b.n	800a36a <_printf_float+0x2aa>
 800a38c:	7fefffff 	.word	0x7fefffff
 800a390:	0800dc70 	.word	0x0800dc70
 800a394:	0800dc74 	.word	0x0800dc74
 800a398:	0800dc78 	.word	0x0800dc78
 800a39c:	0800dc7c 	.word	0x0800dc7c
 800a3a0:	0800dc80 	.word	0x0800dc80
 800a3a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a3a6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a3aa:	4553      	cmp	r3, sl
 800a3ac:	bfa8      	it	ge
 800a3ae:	4653      	movge	r3, sl
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	4699      	mov	r9, r3
 800a3b4:	dc36      	bgt.n	800a424 <_printf_float+0x364>
 800a3b6:	f04f 0b00 	mov.w	fp, #0
 800a3ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3be:	f104 021a 	add.w	r2, r4, #26
 800a3c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a3c4:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3c6:	eba3 0309 	sub.w	r3, r3, r9
 800a3ca:	455b      	cmp	r3, fp
 800a3cc:	dc31      	bgt.n	800a432 <_printf_float+0x372>
 800a3ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a3d0:	459a      	cmp	sl, r3
 800a3d2:	dc3a      	bgt.n	800a44a <_printf_float+0x38a>
 800a3d4:	6823      	ldr	r3, [r4, #0]
 800a3d6:	07da      	lsls	r2, r3, #31
 800a3d8:	d437      	bmi.n	800a44a <_printf_float+0x38a>
 800a3da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a3dc:	ebaa 0903 	sub.w	r9, sl, r3
 800a3e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3e2:	ebaa 0303 	sub.w	r3, sl, r3
 800a3e6:	4599      	cmp	r9, r3
 800a3e8:	bfa8      	it	ge
 800a3ea:	4699      	movge	r9, r3
 800a3ec:	f1b9 0f00 	cmp.w	r9, #0
 800a3f0:	dc33      	bgt.n	800a45a <_printf_float+0x39a>
 800a3f2:	f04f 0800 	mov.w	r8, #0
 800a3f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3fa:	f104 0b1a 	add.w	fp, r4, #26
 800a3fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a400:	ebaa 0303 	sub.w	r3, sl, r3
 800a404:	eba3 0309 	sub.w	r3, r3, r9
 800a408:	4543      	cmp	r3, r8
 800a40a:	f77f af7a 	ble.w	800a302 <_printf_float+0x242>
 800a40e:	2301      	movs	r3, #1
 800a410:	465a      	mov	r2, fp
 800a412:	4631      	mov	r1, r6
 800a414:	4628      	mov	r0, r5
 800a416:	47b8      	blx	r7
 800a418:	3001      	adds	r0, #1
 800a41a:	f43f aeac 	beq.w	800a176 <_printf_float+0xb6>
 800a41e:	f108 0801 	add.w	r8, r8, #1
 800a422:	e7ec      	b.n	800a3fe <_printf_float+0x33e>
 800a424:	4642      	mov	r2, r8
 800a426:	4631      	mov	r1, r6
 800a428:	4628      	mov	r0, r5
 800a42a:	47b8      	blx	r7
 800a42c:	3001      	adds	r0, #1
 800a42e:	d1c2      	bne.n	800a3b6 <_printf_float+0x2f6>
 800a430:	e6a1      	b.n	800a176 <_printf_float+0xb6>
 800a432:	2301      	movs	r3, #1
 800a434:	4631      	mov	r1, r6
 800a436:	4628      	mov	r0, r5
 800a438:	920a      	str	r2, [sp, #40]	@ 0x28
 800a43a:	47b8      	blx	r7
 800a43c:	3001      	adds	r0, #1
 800a43e:	f43f ae9a 	beq.w	800a176 <_printf_float+0xb6>
 800a442:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a444:	f10b 0b01 	add.w	fp, fp, #1
 800a448:	e7bb      	b.n	800a3c2 <_printf_float+0x302>
 800a44a:	4631      	mov	r1, r6
 800a44c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a450:	4628      	mov	r0, r5
 800a452:	47b8      	blx	r7
 800a454:	3001      	adds	r0, #1
 800a456:	d1c0      	bne.n	800a3da <_printf_float+0x31a>
 800a458:	e68d      	b.n	800a176 <_printf_float+0xb6>
 800a45a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a45c:	464b      	mov	r3, r9
 800a45e:	4631      	mov	r1, r6
 800a460:	4628      	mov	r0, r5
 800a462:	4442      	add	r2, r8
 800a464:	47b8      	blx	r7
 800a466:	3001      	adds	r0, #1
 800a468:	d1c3      	bne.n	800a3f2 <_printf_float+0x332>
 800a46a:	e684      	b.n	800a176 <_printf_float+0xb6>
 800a46c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a470:	f1ba 0f01 	cmp.w	sl, #1
 800a474:	dc01      	bgt.n	800a47a <_printf_float+0x3ba>
 800a476:	07db      	lsls	r3, r3, #31
 800a478:	d536      	bpl.n	800a4e8 <_printf_float+0x428>
 800a47a:	2301      	movs	r3, #1
 800a47c:	4642      	mov	r2, r8
 800a47e:	4631      	mov	r1, r6
 800a480:	4628      	mov	r0, r5
 800a482:	47b8      	blx	r7
 800a484:	3001      	adds	r0, #1
 800a486:	f43f ae76 	beq.w	800a176 <_printf_float+0xb6>
 800a48a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a48e:	4631      	mov	r1, r6
 800a490:	4628      	mov	r0, r5
 800a492:	47b8      	blx	r7
 800a494:	3001      	adds	r0, #1
 800a496:	f43f ae6e 	beq.w	800a176 <_printf_float+0xb6>
 800a49a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a49e:	2200      	movs	r2, #0
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a4a6:	f7f6 fa97 	bl	80009d8 <__aeabi_dcmpeq>
 800a4aa:	b9c0      	cbnz	r0, 800a4de <_printf_float+0x41e>
 800a4ac:	4653      	mov	r3, sl
 800a4ae:	f108 0201 	add.w	r2, r8, #1
 800a4b2:	4631      	mov	r1, r6
 800a4b4:	4628      	mov	r0, r5
 800a4b6:	47b8      	blx	r7
 800a4b8:	3001      	adds	r0, #1
 800a4ba:	d10c      	bne.n	800a4d6 <_printf_float+0x416>
 800a4bc:	e65b      	b.n	800a176 <_printf_float+0xb6>
 800a4be:	2301      	movs	r3, #1
 800a4c0:	465a      	mov	r2, fp
 800a4c2:	4631      	mov	r1, r6
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	47b8      	blx	r7
 800a4c8:	3001      	adds	r0, #1
 800a4ca:	f43f ae54 	beq.w	800a176 <_printf_float+0xb6>
 800a4ce:	f108 0801 	add.w	r8, r8, #1
 800a4d2:	45d0      	cmp	r8, sl
 800a4d4:	dbf3      	blt.n	800a4be <_printf_float+0x3fe>
 800a4d6:	464b      	mov	r3, r9
 800a4d8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a4dc:	e6e0      	b.n	800a2a0 <_printf_float+0x1e0>
 800a4de:	f04f 0800 	mov.w	r8, #0
 800a4e2:	f104 0b1a 	add.w	fp, r4, #26
 800a4e6:	e7f4      	b.n	800a4d2 <_printf_float+0x412>
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	4642      	mov	r2, r8
 800a4ec:	e7e1      	b.n	800a4b2 <_printf_float+0x3f2>
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	464a      	mov	r2, r9
 800a4f2:	4631      	mov	r1, r6
 800a4f4:	4628      	mov	r0, r5
 800a4f6:	47b8      	blx	r7
 800a4f8:	3001      	adds	r0, #1
 800a4fa:	f43f ae3c 	beq.w	800a176 <_printf_float+0xb6>
 800a4fe:	f108 0801 	add.w	r8, r8, #1
 800a502:	68e3      	ldr	r3, [r4, #12]
 800a504:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a506:	1a5b      	subs	r3, r3, r1
 800a508:	4543      	cmp	r3, r8
 800a50a:	dcf0      	bgt.n	800a4ee <_printf_float+0x42e>
 800a50c:	e6fd      	b.n	800a30a <_printf_float+0x24a>
 800a50e:	f04f 0800 	mov.w	r8, #0
 800a512:	f104 0919 	add.w	r9, r4, #25
 800a516:	e7f4      	b.n	800a502 <_printf_float+0x442>

0800a518 <_printf_common>:
 800a518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a51c:	4616      	mov	r6, r2
 800a51e:	4698      	mov	r8, r3
 800a520:	688a      	ldr	r2, [r1, #8]
 800a522:	690b      	ldr	r3, [r1, #16]
 800a524:	4607      	mov	r7, r0
 800a526:	4293      	cmp	r3, r2
 800a528:	bfb8      	it	lt
 800a52a:	4613      	movlt	r3, r2
 800a52c:	6033      	str	r3, [r6, #0]
 800a52e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a532:	460c      	mov	r4, r1
 800a534:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a538:	b10a      	cbz	r2, 800a53e <_printf_common+0x26>
 800a53a:	3301      	adds	r3, #1
 800a53c:	6033      	str	r3, [r6, #0]
 800a53e:	6823      	ldr	r3, [r4, #0]
 800a540:	0699      	lsls	r1, r3, #26
 800a542:	bf42      	ittt	mi
 800a544:	6833      	ldrmi	r3, [r6, #0]
 800a546:	3302      	addmi	r3, #2
 800a548:	6033      	strmi	r3, [r6, #0]
 800a54a:	6825      	ldr	r5, [r4, #0]
 800a54c:	f015 0506 	ands.w	r5, r5, #6
 800a550:	d106      	bne.n	800a560 <_printf_common+0x48>
 800a552:	f104 0a19 	add.w	sl, r4, #25
 800a556:	68e3      	ldr	r3, [r4, #12]
 800a558:	6832      	ldr	r2, [r6, #0]
 800a55a:	1a9b      	subs	r3, r3, r2
 800a55c:	42ab      	cmp	r3, r5
 800a55e:	dc2b      	bgt.n	800a5b8 <_printf_common+0xa0>
 800a560:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a564:	6822      	ldr	r2, [r4, #0]
 800a566:	3b00      	subs	r3, #0
 800a568:	bf18      	it	ne
 800a56a:	2301      	movne	r3, #1
 800a56c:	0692      	lsls	r2, r2, #26
 800a56e:	d430      	bmi.n	800a5d2 <_printf_common+0xba>
 800a570:	4641      	mov	r1, r8
 800a572:	4638      	mov	r0, r7
 800a574:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a578:	47c8      	blx	r9
 800a57a:	3001      	adds	r0, #1
 800a57c:	d023      	beq.n	800a5c6 <_printf_common+0xae>
 800a57e:	6823      	ldr	r3, [r4, #0]
 800a580:	6922      	ldr	r2, [r4, #16]
 800a582:	f003 0306 	and.w	r3, r3, #6
 800a586:	2b04      	cmp	r3, #4
 800a588:	bf14      	ite	ne
 800a58a:	2500      	movne	r5, #0
 800a58c:	6833      	ldreq	r3, [r6, #0]
 800a58e:	f04f 0600 	mov.w	r6, #0
 800a592:	bf08      	it	eq
 800a594:	68e5      	ldreq	r5, [r4, #12]
 800a596:	f104 041a 	add.w	r4, r4, #26
 800a59a:	bf08      	it	eq
 800a59c:	1aed      	subeq	r5, r5, r3
 800a59e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a5a2:	bf08      	it	eq
 800a5a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	bfc4      	itt	gt
 800a5ac:	1a9b      	subgt	r3, r3, r2
 800a5ae:	18ed      	addgt	r5, r5, r3
 800a5b0:	42b5      	cmp	r5, r6
 800a5b2:	d11a      	bne.n	800a5ea <_printf_common+0xd2>
 800a5b4:	2000      	movs	r0, #0
 800a5b6:	e008      	b.n	800a5ca <_printf_common+0xb2>
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	4652      	mov	r2, sl
 800a5bc:	4641      	mov	r1, r8
 800a5be:	4638      	mov	r0, r7
 800a5c0:	47c8      	blx	r9
 800a5c2:	3001      	adds	r0, #1
 800a5c4:	d103      	bne.n	800a5ce <_printf_common+0xb6>
 800a5c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ce:	3501      	adds	r5, #1
 800a5d0:	e7c1      	b.n	800a556 <_printf_common+0x3e>
 800a5d2:	2030      	movs	r0, #48	@ 0x30
 800a5d4:	18e1      	adds	r1, r4, r3
 800a5d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a5da:	1c5a      	adds	r2, r3, #1
 800a5dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a5e0:	4422      	add	r2, r4
 800a5e2:	3302      	adds	r3, #2
 800a5e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a5e8:	e7c2      	b.n	800a570 <_printf_common+0x58>
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	4622      	mov	r2, r4
 800a5ee:	4641      	mov	r1, r8
 800a5f0:	4638      	mov	r0, r7
 800a5f2:	47c8      	blx	r9
 800a5f4:	3001      	adds	r0, #1
 800a5f6:	d0e6      	beq.n	800a5c6 <_printf_common+0xae>
 800a5f8:	3601      	adds	r6, #1
 800a5fa:	e7d9      	b.n	800a5b0 <_printf_common+0x98>

0800a5fc <_printf_i>:
 800a5fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a600:	7e0f      	ldrb	r7, [r1, #24]
 800a602:	4691      	mov	r9, r2
 800a604:	2f78      	cmp	r7, #120	@ 0x78
 800a606:	4680      	mov	r8, r0
 800a608:	460c      	mov	r4, r1
 800a60a:	469a      	mov	sl, r3
 800a60c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a60e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a612:	d807      	bhi.n	800a624 <_printf_i+0x28>
 800a614:	2f62      	cmp	r7, #98	@ 0x62
 800a616:	d80a      	bhi.n	800a62e <_printf_i+0x32>
 800a618:	2f00      	cmp	r7, #0
 800a61a:	f000 80d3 	beq.w	800a7c4 <_printf_i+0x1c8>
 800a61e:	2f58      	cmp	r7, #88	@ 0x58
 800a620:	f000 80ba 	beq.w	800a798 <_printf_i+0x19c>
 800a624:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a628:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a62c:	e03a      	b.n	800a6a4 <_printf_i+0xa8>
 800a62e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a632:	2b15      	cmp	r3, #21
 800a634:	d8f6      	bhi.n	800a624 <_printf_i+0x28>
 800a636:	a101      	add	r1, pc, #4	@ (adr r1, 800a63c <_printf_i+0x40>)
 800a638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a63c:	0800a695 	.word	0x0800a695
 800a640:	0800a6a9 	.word	0x0800a6a9
 800a644:	0800a625 	.word	0x0800a625
 800a648:	0800a625 	.word	0x0800a625
 800a64c:	0800a625 	.word	0x0800a625
 800a650:	0800a625 	.word	0x0800a625
 800a654:	0800a6a9 	.word	0x0800a6a9
 800a658:	0800a625 	.word	0x0800a625
 800a65c:	0800a625 	.word	0x0800a625
 800a660:	0800a625 	.word	0x0800a625
 800a664:	0800a625 	.word	0x0800a625
 800a668:	0800a7ab 	.word	0x0800a7ab
 800a66c:	0800a6d3 	.word	0x0800a6d3
 800a670:	0800a765 	.word	0x0800a765
 800a674:	0800a625 	.word	0x0800a625
 800a678:	0800a625 	.word	0x0800a625
 800a67c:	0800a7cd 	.word	0x0800a7cd
 800a680:	0800a625 	.word	0x0800a625
 800a684:	0800a6d3 	.word	0x0800a6d3
 800a688:	0800a625 	.word	0x0800a625
 800a68c:	0800a625 	.word	0x0800a625
 800a690:	0800a76d 	.word	0x0800a76d
 800a694:	6833      	ldr	r3, [r6, #0]
 800a696:	1d1a      	adds	r2, r3, #4
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	6032      	str	r2, [r6, #0]
 800a69c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a6a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	e09e      	b.n	800a7e6 <_printf_i+0x1ea>
 800a6a8:	6833      	ldr	r3, [r6, #0]
 800a6aa:	6820      	ldr	r0, [r4, #0]
 800a6ac:	1d19      	adds	r1, r3, #4
 800a6ae:	6031      	str	r1, [r6, #0]
 800a6b0:	0606      	lsls	r6, r0, #24
 800a6b2:	d501      	bpl.n	800a6b8 <_printf_i+0xbc>
 800a6b4:	681d      	ldr	r5, [r3, #0]
 800a6b6:	e003      	b.n	800a6c0 <_printf_i+0xc4>
 800a6b8:	0645      	lsls	r5, r0, #25
 800a6ba:	d5fb      	bpl.n	800a6b4 <_printf_i+0xb8>
 800a6bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a6c0:	2d00      	cmp	r5, #0
 800a6c2:	da03      	bge.n	800a6cc <_printf_i+0xd0>
 800a6c4:	232d      	movs	r3, #45	@ 0x2d
 800a6c6:	426d      	negs	r5, r5
 800a6c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6cc:	230a      	movs	r3, #10
 800a6ce:	4859      	ldr	r0, [pc, #356]	@ (800a834 <_printf_i+0x238>)
 800a6d0:	e011      	b.n	800a6f6 <_printf_i+0xfa>
 800a6d2:	6821      	ldr	r1, [r4, #0]
 800a6d4:	6833      	ldr	r3, [r6, #0]
 800a6d6:	0608      	lsls	r0, r1, #24
 800a6d8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a6dc:	d402      	bmi.n	800a6e4 <_printf_i+0xe8>
 800a6de:	0649      	lsls	r1, r1, #25
 800a6e0:	bf48      	it	mi
 800a6e2:	b2ad      	uxthmi	r5, r5
 800a6e4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a6e6:	6033      	str	r3, [r6, #0]
 800a6e8:	bf14      	ite	ne
 800a6ea:	230a      	movne	r3, #10
 800a6ec:	2308      	moveq	r3, #8
 800a6ee:	4851      	ldr	r0, [pc, #324]	@ (800a834 <_printf_i+0x238>)
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a6f6:	6866      	ldr	r6, [r4, #4]
 800a6f8:	2e00      	cmp	r6, #0
 800a6fa:	bfa8      	it	ge
 800a6fc:	6821      	ldrge	r1, [r4, #0]
 800a6fe:	60a6      	str	r6, [r4, #8]
 800a700:	bfa4      	itt	ge
 800a702:	f021 0104 	bicge.w	r1, r1, #4
 800a706:	6021      	strge	r1, [r4, #0]
 800a708:	b90d      	cbnz	r5, 800a70e <_printf_i+0x112>
 800a70a:	2e00      	cmp	r6, #0
 800a70c:	d04b      	beq.n	800a7a6 <_printf_i+0x1aa>
 800a70e:	4616      	mov	r6, r2
 800a710:	fbb5 f1f3 	udiv	r1, r5, r3
 800a714:	fb03 5711 	mls	r7, r3, r1, r5
 800a718:	5dc7      	ldrb	r7, [r0, r7]
 800a71a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a71e:	462f      	mov	r7, r5
 800a720:	42bb      	cmp	r3, r7
 800a722:	460d      	mov	r5, r1
 800a724:	d9f4      	bls.n	800a710 <_printf_i+0x114>
 800a726:	2b08      	cmp	r3, #8
 800a728:	d10b      	bne.n	800a742 <_printf_i+0x146>
 800a72a:	6823      	ldr	r3, [r4, #0]
 800a72c:	07df      	lsls	r7, r3, #31
 800a72e:	d508      	bpl.n	800a742 <_printf_i+0x146>
 800a730:	6923      	ldr	r3, [r4, #16]
 800a732:	6861      	ldr	r1, [r4, #4]
 800a734:	4299      	cmp	r1, r3
 800a736:	bfde      	ittt	le
 800a738:	2330      	movle	r3, #48	@ 0x30
 800a73a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a73e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a742:	1b92      	subs	r2, r2, r6
 800a744:	6122      	str	r2, [r4, #16]
 800a746:	464b      	mov	r3, r9
 800a748:	4621      	mov	r1, r4
 800a74a:	4640      	mov	r0, r8
 800a74c:	f8cd a000 	str.w	sl, [sp]
 800a750:	aa03      	add	r2, sp, #12
 800a752:	f7ff fee1 	bl	800a518 <_printf_common>
 800a756:	3001      	adds	r0, #1
 800a758:	d14a      	bne.n	800a7f0 <_printf_i+0x1f4>
 800a75a:	f04f 30ff 	mov.w	r0, #4294967295
 800a75e:	b004      	add	sp, #16
 800a760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a764:	6823      	ldr	r3, [r4, #0]
 800a766:	f043 0320 	orr.w	r3, r3, #32
 800a76a:	6023      	str	r3, [r4, #0]
 800a76c:	2778      	movs	r7, #120	@ 0x78
 800a76e:	4832      	ldr	r0, [pc, #200]	@ (800a838 <_printf_i+0x23c>)
 800a770:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a774:	6823      	ldr	r3, [r4, #0]
 800a776:	6831      	ldr	r1, [r6, #0]
 800a778:	061f      	lsls	r7, r3, #24
 800a77a:	f851 5b04 	ldr.w	r5, [r1], #4
 800a77e:	d402      	bmi.n	800a786 <_printf_i+0x18a>
 800a780:	065f      	lsls	r7, r3, #25
 800a782:	bf48      	it	mi
 800a784:	b2ad      	uxthmi	r5, r5
 800a786:	6031      	str	r1, [r6, #0]
 800a788:	07d9      	lsls	r1, r3, #31
 800a78a:	bf44      	itt	mi
 800a78c:	f043 0320 	orrmi.w	r3, r3, #32
 800a790:	6023      	strmi	r3, [r4, #0]
 800a792:	b11d      	cbz	r5, 800a79c <_printf_i+0x1a0>
 800a794:	2310      	movs	r3, #16
 800a796:	e7ab      	b.n	800a6f0 <_printf_i+0xf4>
 800a798:	4826      	ldr	r0, [pc, #152]	@ (800a834 <_printf_i+0x238>)
 800a79a:	e7e9      	b.n	800a770 <_printf_i+0x174>
 800a79c:	6823      	ldr	r3, [r4, #0]
 800a79e:	f023 0320 	bic.w	r3, r3, #32
 800a7a2:	6023      	str	r3, [r4, #0]
 800a7a4:	e7f6      	b.n	800a794 <_printf_i+0x198>
 800a7a6:	4616      	mov	r6, r2
 800a7a8:	e7bd      	b.n	800a726 <_printf_i+0x12a>
 800a7aa:	6833      	ldr	r3, [r6, #0]
 800a7ac:	6825      	ldr	r5, [r4, #0]
 800a7ae:	1d18      	adds	r0, r3, #4
 800a7b0:	6961      	ldr	r1, [r4, #20]
 800a7b2:	6030      	str	r0, [r6, #0]
 800a7b4:	062e      	lsls	r6, r5, #24
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	d501      	bpl.n	800a7be <_printf_i+0x1c2>
 800a7ba:	6019      	str	r1, [r3, #0]
 800a7bc:	e002      	b.n	800a7c4 <_printf_i+0x1c8>
 800a7be:	0668      	lsls	r0, r5, #25
 800a7c0:	d5fb      	bpl.n	800a7ba <_printf_i+0x1be>
 800a7c2:	8019      	strh	r1, [r3, #0]
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	4616      	mov	r6, r2
 800a7c8:	6123      	str	r3, [r4, #16]
 800a7ca:	e7bc      	b.n	800a746 <_printf_i+0x14a>
 800a7cc:	6833      	ldr	r3, [r6, #0]
 800a7ce:	2100      	movs	r1, #0
 800a7d0:	1d1a      	adds	r2, r3, #4
 800a7d2:	6032      	str	r2, [r6, #0]
 800a7d4:	681e      	ldr	r6, [r3, #0]
 800a7d6:	6862      	ldr	r2, [r4, #4]
 800a7d8:	4630      	mov	r0, r6
 800a7da:	f000 fad8 	bl	800ad8e <memchr>
 800a7de:	b108      	cbz	r0, 800a7e4 <_printf_i+0x1e8>
 800a7e0:	1b80      	subs	r0, r0, r6
 800a7e2:	6060      	str	r0, [r4, #4]
 800a7e4:	6863      	ldr	r3, [r4, #4]
 800a7e6:	6123      	str	r3, [r4, #16]
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7ee:	e7aa      	b.n	800a746 <_printf_i+0x14a>
 800a7f0:	4632      	mov	r2, r6
 800a7f2:	4649      	mov	r1, r9
 800a7f4:	4640      	mov	r0, r8
 800a7f6:	6923      	ldr	r3, [r4, #16]
 800a7f8:	47d0      	blx	sl
 800a7fa:	3001      	adds	r0, #1
 800a7fc:	d0ad      	beq.n	800a75a <_printf_i+0x15e>
 800a7fe:	6823      	ldr	r3, [r4, #0]
 800a800:	079b      	lsls	r3, r3, #30
 800a802:	d413      	bmi.n	800a82c <_printf_i+0x230>
 800a804:	68e0      	ldr	r0, [r4, #12]
 800a806:	9b03      	ldr	r3, [sp, #12]
 800a808:	4298      	cmp	r0, r3
 800a80a:	bfb8      	it	lt
 800a80c:	4618      	movlt	r0, r3
 800a80e:	e7a6      	b.n	800a75e <_printf_i+0x162>
 800a810:	2301      	movs	r3, #1
 800a812:	4632      	mov	r2, r6
 800a814:	4649      	mov	r1, r9
 800a816:	4640      	mov	r0, r8
 800a818:	47d0      	blx	sl
 800a81a:	3001      	adds	r0, #1
 800a81c:	d09d      	beq.n	800a75a <_printf_i+0x15e>
 800a81e:	3501      	adds	r5, #1
 800a820:	68e3      	ldr	r3, [r4, #12]
 800a822:	9903      	ldr	r1, [sp, #12]
 800a824:	1a5b      	subs	r3, r3, r1
 800a826:	42ab      	cmp	r3, r5
 800a828:	dcf2      	bgt.n	800a810 <_printf_i+0x214>
 800a82a:	e7eb      	b.n	800a804 <_printf_i+0x208>
 800a82c:	2500      	movs	r5, #0
 800a82e:	f104 0619 	add.w	r6, r4, #25
 800a832:	e7f5      	b.n	800a820 <_printf_i+0x224>
 800a834:	0800dc82 	.word	0x0800dc82
 800a838:	0800dc93 	.word	0x0800dc93

0800a83c <std>:
 800a83c:	2300      	movs	r3, #0
 800a83e:	b510      	push	{r4, lr}
 800a840:	4604      	mov	r4, r0
 800a842:	e9c0 3300 	strd	r3, r3, [r0]
 800a846:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a84a:	6083      	str	r3, [r0, #8]
 800a84c:	8181      	strh	r1, [r0, #12]
 800a84e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a850:	81c2      	strh	r2, [r0, #14]
 800a852:	6183      	str	r3, [r0, #24]
 800a854:	4619      	mov	r1, r3
 800a856:	2208      	movs	r2, #8
 800a858:	305c      	adds	r0, #92	@ 0x5c
 800a85a:	f000 fa19 	bl	800ac90 <memset>
 800a85e:	4b0d      	ldr	r3, [pc, #52]	@ (800a894 <std+0x58>)
 800a860:	6224      	str	r4, [r4, #32]
 800a862:	6263      	str	r3, [r4, #36]	@ 0x24
 800a864:	4b0c      	ldr	r3, [pc, #48]	@ (800a898 <std+0x5c>)
 800a866:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a868:	4b0c      	ldr	r3, [pc, #48]	@ (800a89c <std+0x60>)
 800a86a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a86c:	4b0c      	ldr	r3, [pc, #48]	@ (800a8a0 <std+0x64>)
 800a86e:	6323      	str	r3, [r4, #48]	@ 0x30
 800a870:	4b0c      	ldr	r3, [pc, #48]	@ (800a8a4 <std+0x68>)
 800a872:	429c      	cmp	r4, r3
 800a874:	d006      	beq.n	800a884 <std+0x48>
 800a876:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a87a:	4294      	cmp	r4, r2
 800a87c:	d002      	beq.n	800a884 <std+0x48>
 800a87e:	33d0      	adds	r3, #208	@ 0xd0
 800a880:	429c      	cmp	r4, r3
 800a882:	d105      	bne.n	800a890 <std+0x54>
 800a884:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a88c:	f000 ba7c 	b.w	800ad88 <__retarget_lock_init_recursive>
 800a890:	bd10      	pop	{r4, pc}
 800a892:	bf00      	nop
 800a894:	0800aae1 	.word	0x0800aae1
 800a898:	0800ab03 	.word	0x0800ab03
 800a89c:	0800ab3b 	.word	0x0800ab3b
 800a8a0:	0800ab5f 	.word	0x0800ab5f
 800a8a4:	2000056c 	.word	0x2000056c

0800a8a8 <stdio_exit_handler>:
 800a8a8:	4a02      	ldr	r2, [pc, #8]	@ (800a8b4 <stdio_exit_handler+0xc>)
 800a8aa:	4903      	ldr	r1, [pc, #12]	@ (800a8b8 <stdio_exit_handler+0x10>)
 800a8ac:	4803      	ldr	r0, [pc, #12]	@ (800a8bc <stdio_exit_handler+0x14>)
 800a8ae:	f000 b869 	b.w	800a984 <_fwalk_sglue>
 800a8b2:	bf00      	nop
 800a8b4:	200000d4 	.word	0x200000d4
 800a8b8:	0800c97d 	.word	0x0800c97d
 800a8bc:	200000e4 	.word	0x200000e4

0800a8c0 <cleanup_stdio>:
 800a8c0:	6841      	ldr	r1, [r0, #4]
 800a8c2:	4b0c      	ldr	r3, [pc, #48]	@ (800a8f4 <cleanup_stdio+0x34>)
 800a8c4:	b510      	push	{r4, lr}
 800a8c6:	4299      	cmp	r1, r3
 800a8c8:	4604      	mov	r4, r0
 800a8ca:	d001      	beq.n	800a8d0 <cleanup_stdio+0x10>
 800a8cc:	f002 f856 	bl	800c97c <_fflush_r>
 800a8d0:	68a1      	ldr	r1, [r4, #8]
 800a8d2:	4b09      	ldr	r3, [pc, #36]	@ (800a8f8 <cleanup_stdio+0x38>)
 800a8d4:	4299      	cmp	r1, r3
 800a8d6:	d002      	beq.n	800a8de <cleanup_stdio+0x1e>
 800a8d8:	4620      	mov	r0, r4
 800a8da:	f002 f84f 	bl	800c97c <_fflush_r>
 800a8de:	68e1      	ldr	r1, [r4, #12]
 800a8e0:	4b06      	ldr	r3, [pc, #24]	@ (800a8fc <cleanup_stdio+0x3c>)
 800a8e2:	4299      	cmp	r1, r3
 800a8e4:	d004      	beq.n	800a8f0 <cleanup_stdio+0x30>
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8ec:	f002 b846 	b.w	800c97c <_fflush_r>
 800a8f0:	bd10      	pop	{r4, pc}
 800a8f2:	bf00      	nop
 800a8f4:	2000056c 	.word	0x2000056c
 800a8f8:	200005d4 	.word	0x200005d4
 800a8fc:	2000063c 	.word	0x2000063c

0800a900 <global_stdio_init.part.0>:
 800a900:	b510      	push	{r4, lr}
 800a902:	4b0b      	ldr	r3, [pc, #44]	@ (800a930 <global_stdio_init.part.0+0x30>)
 800a904:	4c0b      	ldr	r4, [pc, #44]	@ (800a934 <global_stdio_init.part.0+0x34>)
 800a906:	4a0c      	ldr	r2, [pc, #48]	@ (800a938 <global_stdio_init.part.0+0x38>)
 800a908:	4620      	mov	r0, r4
 800a90a:	601a      	str	r2, [r3, #0]
 800a90c:	2104      	movs	r1, #4
 800a90e:	2200      	movs	r2, #0
 800a910:	f7ff ff94 	bl	800a83c <std>
 800a914:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a918:	2201      	movs	r2, #1
 800a91a:	2109      	movs	r1, #9
 800a91c:	f7ff ff8e 	bl	800a83c <std>
 800a920:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a924:	2202      	movs	r2, #2
 800a926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a92a:	2112      	movs	r1, #18
 800a92c:	f7ff bf86 	b.w	800a83c <std>
 800a930:	200006a4 	.word	0x200006a4
 800a934:	2000056c 	.word	0x2000056c
 800a938:	0800a8a9 	.word	0x0800a8a9

0800a93c <__sfp_lock_acquire>:
 800a93c:	4801      	ldr	r0, [pc, #4]	@ (800a944 <__sfp_lock_acquire+0x8>)
 800a93e:	f000 ba24 	b.w	800ad8a <__retarget_lock_acquire_recursive>
 800a942:	bf00      	nop
 800a944:	200006ad 	.word	0x200006ad

0800a948 <__sfp_lock_release>:
 800a948:	4801      	ldr	r0, [pc, #4]	@ (800a950 <__sfp_lock_release+0x8>)
 800a94a:	f000 ba1f 	b.w	800ad8c <__retarget_lock_release_recursive>
 800a94e:	bf00      	nop
 800a950:	200006ad 	.word	0x200006ad

0800a954 <__sinit>:
 800a954:	b510      	push	{r4, lr}
 800a956:	4604      	mov	r4, r0
 800a958:	f7ff fff0 	bl	800a93c <__sfp_lock_acquire>
 800a95c:	6a23      	ldr	r3, [r4, #32]
 800a95e:	b11b      	cbz	r3, 800a968 <__sinit+0x14>
 800a960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a964:	f7ff bff0 	b.w	800a948 <__sfp_lock_release>
 800a968:	4b04      	ldr	r3, [pc, #16]	@ (800a97c <__sinit+0x28>)
 800a96a:	6223      	str	r3, [r4, #32]
 800a96c:	4b04      	ldr	r3, [pc, #16]	@ (800a980 <__sinit+0x2c>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d1f5      	bne.n	800a960 <__sinit+0xc>
 800a974:	f7ff ffc4 	bl	800a900 <global_stdio_init.part.0>
 800a978:	e7f2      	b.n	800a960 <__sinit+0xc>
 800a97a:	bf00      	nop
 800a97c:	0800a8c1 	.word	0x0800a8c1
 800a980:	200006a4 	.word	0x200006a4

0800a984 <_fwalk_sglue>:
 800a984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a988:	4607      	mov	r7, r0
 800a98a:	4688      	mov	r8, r1
 800a98c:	4614      	mov	r4, r2
 800a98e:	2600      	movs	r6, #0
 800a990:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a994:	f1b9 0901 	subs.w	r9, r9, #1
 800a998:	d505      	bpl.n	800a9a6 <_fwalk_sglue+0x22>
 800a99a:	6824      	ldr	r4, [r4, #0]
 800a99c:	2c00      	cmp	r4, #0
 800a99e:	d1f7      	bne.n	800a990 <_fwalk_sglue+0xc>
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9a6:	89ab      	ldrh	r3, [r5, #12]
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d907      	bls.n	800a9bc <_fwalk_sglue+0x38>
 800a9ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	d003      	beq.n	800a9bc <_fwalk_sglue+0x38>
 800a9b4:	4629      	mov	r1, r5
 800a9b6:	4638      	mov	r0, r7
 800a9b8:	47c0      	blx	r8
 800a9ba:	4306      	orrs	r6, r0
 800a9bc:	3568      	adds	r5, #104	@ 0x68
 800a9be:	e7e9      	b.n	800a994 <_fwalk_sglue+0x10>

0800a9c0 <iprintf>:
 800a9c0:	b40f      	push	{r0, r1, r2, r3}
 800a9c2:	b507      	push	{r0, r1, r2, lr}
 800a9c4:	4906      	ldr	r1, [pc, #24]	@ (800a9e0 <iprintf+0x20>)
 800a9c6:	ab04      	add	r3, sp, #16
 800a9c8:	6808      	ldr	r0, [r1, #0]
 800a9ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9ce:	6881      	ldr	r1, [r0, #8]
 800a9d0:	9301      	str	r3, [sp, #4]
 800a9d2:	f001 fe3b 	bl	800c64c <_vfiprintf_r>
 800a9d6:	b003      	add	sp, #12
 800a9d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9dc:	b004      	add	sp, #16
 800a9de:	4770      	bx	lr
 800a9e0:	200000e0 	.word	0x200000e0

0800a9e4 <_puts_r>:
 800a9e4:	6a03      	ldr	r3, [r0, #32]
 800a9e6:	b570      	push	{r4, r5, r6, lr}
 800a9e8:	4605      	mov	r5, r0
 800a9ea:	460e      	mov	r6, r1
 800a9ec:	6884      	ldr	r4, [r0, #8]
 800a9ee:	b90b      	cbnz	r3, 800a9f4 <_puts_r+0x10>
 800a9f0:	f7ff ffb0 	bl	800a954 <__sinit>
 800a9f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9f6:	07db      	lsls	r3, r3, #31
 800a9f8:	d405      	bmi.n	800aa06 <_puts_r+0x22>
 800a9fa:	89a3      	ldrh	r3, [r4, #12]
 800a9fc:	0598      	lsls	r0, r3, #22
 800a9fe:	d402      	bmi.n	800aa06 <_puts_r+0x22>
 800aa00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa02:	f000 f9c2 	bl	800ad8a <__retarget_lock_acquire_recursive>
 800aa06:	89a3      	ldrh	r3, [r4, #12]
 800aa08:	0719      	lsls	r1, r3, #28
 800aa0a:	d502      	bpl.n	800aa12 <_puts_r+0x2e>
 800aa0c:	6923      	ldr	r3, [r4, #16]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d135      	bne.n	800aa7e <_puts_r+0x9a>
 800aa12:	4621      	mov	r1, r4
 800aa14:	4628      	mov	r0, r5
 800aa16:	f000 f8e5 	bl	800abe4 <__swsetup_r>
 800aa1a:	b380      	cbz	r0, 800aa7e <_puts_r+0x9a>
 800aa1c:	f04f 35ff 	mov.w	r5, #4294967295
 800aa20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa22:	07da      	lsls	r2, r3, #31
 800aa24:	d405      	bmi.n	800aa32 <_puts_r+0x4e>
 800aa26:	89a3      	ldrh	r3, [r4, #12]
 800aa28:	059b      	lsls	r3, r3, #22
 800aa2a:	d402      	bmi.n	800aa32 <_puts_r+0x4e>
 800aa2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa2e:	f000 f9ad 	bl	800ad8c <__retarget_lock_release_recursive>
 800aa32:	4628      	mov	r0, r5
 800aa34:	bd70      	pop	{r4, r5, r6, pc}
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	da04      	bge.n	800aa44 <_puts_r+0x60>
 800aa3a:	69a2      	ldr	r2, [r4, #24]
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	dc17      	bgt.n	800aa70 <_puts_r+0x8c>
 800aa40:	290a      	cmp	r1, #10
 800aa42:	d015      	beq.n	800aa70 <_puts_r+0x8c>
 800aa44:	6823      	ldr	r3, [r4, #0]
 800aa46:	1c5a      	adds	r2, r3, #1
 800aa48:	6022      	str	r2, [r4, #0]
 800aa4a:	7019      	strb	r1, [r3, #0]
 800aa4c:	68a3      	ldr	r3, [r4, #8]
 800aa4e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aa52:	3b01      	subs	r3, #1
 800aa54:	60a3      	str	r3, [r4, #8]
 800aa56:	2900      	cmp	r1, #0
 800aa58:	d1ed      	bne.n	800aa36 <_puts_r+0x52>
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	da11      	bge.n	800aa82 <_puts_r+0x9e>
 800aa5e:	4622      	mov	r2, r4
 800aa60:	210a      	movs	r1, #10
 800aa62:	4628      	mov	r0, r5
 800aa64:	f000 f87f 	bl	800ab66 <__swbuf_r>
 800aa68:	3001      	adds	r0, #1
 800aa6a:	d0d7      	beq.n	800aa1c <_puts_r+0x38>
 800aa6c:	250a      	movs	r5, #10
 800aa6e:	e7d7      	b.n	800aa20 <_puts_r+0x3c>
 800aa70:	4622      	mov	r2, r4
 800aa72:	4628      	mov	r0, r5
 800aa74:	f000 f877 	bl	800ab66 <__swbuf_r>
 800aa78:	3001      	adds	r0, #1
 800aa7a:	d1e7      	bne.n	800aa4c <_puts_r+0x68>
 800aa7c:	e7ce      	b.n	800aa1c <_puts_r+0x38>
 800aa7e:	3e01      	subs	r6, #1
 800aa80:	e7e4      	b.n	800aa4c <_puts_r+0x68>
 800aa82:	6823      	ldr	r3, [r4, #0]
 800aa84:	1c5a      	adds	r2, r3, #1
 800aa86:	6022      	str	r2, [r4, #0]
 800aa88:	220a      	movs	r2, #10
 800aa8a:	701a      	strb	r2, [r3, #0]
 800aa8c:	e7ee      	b.n	800aa6c <_puts_r+0x88>
	...

0800aa90 <puts>:
 800aa90:	4b02      	ldr	r3, [pc, #8]	@ (800aa9c <puts+0xc>)
 800aa92:	4601      	mov	r1, r0
 800aa94:	6818      	ldr	r0, [r3, #0]
 800aa96:	f7ff bfa5 	b.w	800a9e4 <_puts_r>
 800aa9a:	bf00      	nop
 800aa9c:	200000e0 	.word	0x200000e0

0800aaa0 <siprintf>:
 800aaa0:	b40e      	push	{r1, r2, r3}
 800aaa2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800aaa6:	b500      	push	{lr}
 800aaa8:	b09c      	sub	sp, #112	@ 0x70
 800aaaa:	ab1d      	add	r3, sp, #116	@ 0x74
 800aaac:	9002      	str	r0, [sp, #8]
 800aaae:	9006      	str	r0, [sp, #24]
 800aab0:	9107      	str	r1, [sp, #28]
 800aab2:	9104      	str	r1, [sp, #16]
 800aab4:	4808      	ldr	r0, [pc, #32]	@ (800aad8 <siprintf+0x38>)
 800aab6:	4909      	ldr	r1, [pc, #36]	@ (800aadc <siprintf+0x3c>)
 800aab8:	f853 2b04 	ldr.w	r2, [r3], #4
 800aabc:	9105      	str	r1, [sp, #20]
 800aabe:	6800      	ldr	r0, [r0, #0]
 800aac0:	a902      	add	r1, sp, #8
 800aac2:	9301      	str	r3, [sp, #4]
 800aac4:	f001 fc9e 	bl	800c404 <_svfiprintf_r>
 800aac8:	2200      	movs	r2, #0
 800aaca:	9b02      	ldr	r3, [sp, #8]
 800aacc:	701a      	strb	r2, [r3, #0]
 800aace:	b01c      	add	sp, #112	@ 0x70
 800aad0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aad4:	b003      	add	sp, #12
 800aad6:	4770      	bx	lr
 800aad8:	200000e0 	.word	0x200000e0
 800aadc:	ffff0208 	.word	0xffff0208

0800aae0 <__sread>:
 800aae0:	b510      	push	{r4, lr}
 800aae2:	460c      	mov	r4, r1
 800aae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aae8:	f000 f900 	bl	800acec <_read_r>
 800aaec:	2800      	cmp	r0, #0
 800aaee:	bfab      	itete	ge
 800aaf0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aaf2:	89a3      	ldrhlt	r3, [r4, #12]
 800aaf4:	181b      	addge	r3, r3, r0
 800aaf6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aafa:	bfac      	ite	ge
 800aafc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aafe:	81a3      	strhlt	r3, [r4, #12]
 800ab00:	bd10      	pop	{r4, pc}

0800ab02 <__swrite>:
 800ab02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab06:	461f      	mov	r7, r3
 800ab08:	898b      	ldrh	r3, [r1, #12]
 800ab0a:	4605      	mov	r5, r0
 800ab0c:	05db      	lsls	r3, r3, #23
 800ab0e:	460c      	mov	r4, r1
 800ab10:	4616      	mov	r6, r2
 800ab12:	d505      	bpl.n	800ab20 <__swrite+0x1e>
 800ab14:	2302      	movs	r3, #2
 800ab16:	2200      	movs	r2, #0
 800ab18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab1c:	f000 f8d4 	bl	800acc8 <_lseek_r>
 800ab20:	89a3      	ldrh	r3, [r4, #12]
 800ab22:	4632      	mov	r2, r6
 800ab24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ab28:	81a3      	strh	r3, [r4, #12]
 800ab2a:	4628      	mov	r0, r5
 800ab2c:	463b      	mov	r3, r7
 800ab2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab36:	f000 b8eb 	b.w	800ad10 <_write_r>

0800ab3a <__sseek>:
 800ab3a:	b510      	push	{r4, lr}
 800ab3c:	460c      	mov	r4, r1
 800ab3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab42:	f000 f8c1 	bl	800acc8 <_lseek_r>
 800ab46:	1c43      	adds	r3, r0, #1
 800ab48:	89a3      	ldrh	r3, [r4, #12]
 800ab4a:	bf15      	itete	ne
 800ab4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ab4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ab52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ab56:	81a3      	strheq	r3, [r4, #12]
 800ab58:	bf18      	it	ne
 800ab5a:	81a3      	strhne	r3, [r4, #12]
 800ab5c:	bd10      	pop	{r4, pc}

0800ab5e <__sclose>:
 800ab5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab62:	f000 b8a1 	b.w	800aca8 <_close_r>

0800ab66 <__swbuf_r>:
 800ab66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab68:	460e      	mov	r6, r1
 800ab6a:	4614      	mov	r4, r2
 800ab6c:	4605      	mov	r5, r0
 800ab6e:	b118      	cbz	r0, 800ab78 <__swbuf_r+0x12>
 800ab70:	6a03      	ldr	r3, [r0, #32]
 800ab72:	b90b      	cbnz	r3, 800ab78 <__swbuf_r+0x12>
 800ab74:	f7ff feee 	bl	800a954 <__sinit>
 800ab78:	69a3      	ldr	r3, [r4, #24]
 800ab7a:	60a3      	str	r3, [r4, #8]
 800ab7c:	89a3      	ldrh	r3, [r4, #12]
 800ab7e:	071a      	lsls	r2, r3, #28
 800ab80:	d501      	bpl.n	800ab86 <__swbuf_r+0x20>
 800ab82:	6923      	ldr	r3, [r4, #16]
 800ab84:	b943      	cbnz	r3, 800ab98 <__swbuf_r+0x32>
 800ab86:	4621      	mov	r1, r4
 800ab88:	4628      	mov	r0, r5
 800ab8a:	f000 f82b 	bl	800abe4 <__swsetup_r>
 800ab8e:	b118      	cbz	r0, 800ab98 <__swbuf_r+0x32>
 800ab90:	f04f 37ff 	mov.w	r7, #4294967295
 800ab94:	4638      	mov	r0, r7
 800ab96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab98:	6823      	ldr	r3, [r4, #0]
 800ab9a:	6922      	ldr	r2, [r4, #16]
 800ab9c:	b2f6      	uxtb	r6, r6
 800ab9e:	1a98      	subs	r0, r3, r2
 800aba0:	6963      	ldr	r3, [r4, #20]
 800aba2:	4637      	mov	r7, r6
 800aba4:	4283      	cmp	r3, r0
 800aba6:	dc05      	bgt.n	800abb4 <__swbuf_r+0x4e>
 800aba8:	4621      	mov	r1, r4
 800abaa:	4628      	mov	r0, r5
 800abac:	f001 fee6 	bl	800c97c <_fflush_r>
 800abb0:	2800      	cmp	r0, #0
 800abb2:	d1ed      	bne.n	800ab90 <__swbuf_r+0x2a>
 800abb4:	68a3      	ldr	r3, [r4, #8]
 800abb6:	3b01      	subs	r3, #1
 800abb8:	60a3      	str	r3, [r4, #8]
 800abba:	6823      	ldr	r3, [r4, #0]
 800abbc:	1c5a      	adds	r2, r3, #1
 800abbe:	6022      	str	r2, [r4, #0]
 800abc0:	701e      	strb	r6, [r3, #0]
 800abc2:	6962      	ldr	r2, [r4, #20]
 800abc4:	1c43      	adds	r3, r0, #1
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d004      	beq.n	800abd4 <__swbuf_r+0x6e>
 800abca:	89a3      	ldrh	r3, [r4, #12]
 800abcc:	07db      	lsls	r3, r3, #31
 800abce:	d5e1      	bpl.n	800ab94 <__swbuf_r+0x2e>
 800abd0:	2e0a      	cmp	r6, #10
 800abd2:	d1df      	bne.n	800ab94 <__swbuf_r+0x2e>
 800abd4:	4621      	mov	r1, r4
 800abd6:	4628      	mov	r0, r5
 800abd8:	f001 fed0 	bl	800c97c <_fflush_r>
 800abdc:	2800      	cmp	r0, #0
 800abde:	d0d9      	beq.n	800ab94 <__swbuf_r+0x2e>
 800abe0:	e7d6      	b.n	800ab90 <__swbuf_r+0x2a>
	...

0800abe4 <__swsetup_r>:
 800abe4:	b538      	push	{r3, r4, r5, lr}
 800abe6:	4b29      	ldr	r3, [pc, #164]	@ (800ac8c <__swsetup_r+0xa8>)
 800abe8:	4605      	mov	r5, r0
 800abea:	6818      	ldr	r0, [r3, #0]
 800abec:	460c      	mov	r4, r1
 800abee:	b118      	cbz	r0, 800abf8 <__swsetup_r+0x14>
 800abf0:	6a03      	ldr	r3, [r0, #32]
 800abf2:	b90b      	cbnz	r3, 800abf8 <__swsetup_r+0x14>
 800abf4:	f7ff feae 	bl	800a954 <__sinit>
 800abf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abfc:	0719      	lsls	r1, r3, #28
 800abfe:	d422      	bmi.n	800ac46 <__swsetup_r+0x62>
 800ac00:	06da      	lsls	r2, r3, #27
 800ac02:	d407      	bmi.n	800ac14 <__swsetup_r+0x30>
 800ac04:	2209      	movs	r2, #9
 800ac06:	602a      	str	r2, [r5, #0]
 800ac08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac10:	81a3      	strh	r3, [r4, #12]
 800ac12:	e033      	b.n	800ac7c <__swsetup_r+0x98>
 800ac14:	0758      	lsls	r0, r3, #29
 800ac16:	d512      	bpl.n	800ac3e <__swsetup_r+0x5a>
 800ac18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac1a:	b141      	cbz	r1, 800ac2e <__swsetup_r+0x4a>
 800ac1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac20:	4299      	cmp	r1, r3
 800ac22:	d002      	beq.n	800ac2a <__swsetup_r+0x46>
 800ac24:	4628      	mov	r0, r5
 800ac26:	f000 ff13 	bl	800ba50 <_free_r>
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac2e:	89a3      	ldrh	r3, [r4, #12]
 800ac30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ac34:	81a3      	strh	r3, [r4, #12]
 800ac36:	2300      	movs	r3, #0
 800ac38:	6063      	str	r3, [r4, #4]
 800ac3a:	6923      	ldr	r3, [r4, #16]
 800ac3c:	6023      	str	r3, [r4, #0]
 800ac3e:	89a3      	ldrh	r3, [r4, #12]
 800ac40:	f043 0308 	orr.w	r3, r3, #8
 800ac44:	81a3      	strh	r3, [r4, #12]
 800ac46:	6923      	ldr	r3, [r4, #16]
 800ac48:	b94b      	cbnz	r3, 800ac5e <__swsetup_r+0x7a>
 800ac4a:	89a3      	ldrh	r3, [r4, #12]
 800ac4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ac50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac54:	d003      	beq.n	800ac5e <__swsetup_r+0x7a>
 800ac56:	4621      	mov	r1, r4
 800ac58:	4628      	mov	r0, r5
 800ac5a:	f001 fedc 	bl	800ca16 <__smakebuf_r>
 800ac5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac62:	f013 0201 	ands.w	r2, r3, #1
 800ac66:	d00a      	beq.n	800ac7e <__swsetup_r+0x9a>
 800ac68:	2200      	movs	r2, #0
 800ac6a:	60a2      	str	r2, [r4, #8]
 800ac6c:	6962      	ldr	r2, [r4, #20]
 800ac6e:	4252      	negs	r2, r2
 800ac70:	61a2      	str	r2, [r4, #24]
 800ac72:	6922      	ldr	r2, [r4, #16]
 800ac74:	b942      	cbnz	r2, 800ac88 <__swsetup_r+0xa4>
 800ac76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ac7a:	d1c5      	bne.n	800ac08 <__swsetup_r+0x24>
 800ac7c:	bd38      	pop	{r3, r4, r5, pc}
 800ac7e:	0799      	lsls	r1, r3, #30
 800ac80:	bf58      	it	pl
 800ac82:	6962      	ldrpl	r2, [r4, #20]
 800ac84:	60a2      	str	r2, [r4, #8]
 800ac86:	e7f4      	b.n	800ac72 <__swsetup_r+0x8e>
 800ac88:	2000      	movs	r0, #0
 800ac8a:	e7f7      	b.n	800ac7c <__swsetup_r+0x98>
 800ac8c:	200000e0 	.word	0x200000e0

0800ac90 <memset>:
 800ac90:	4603      	mov	r3, r0
 800ac92:	4402      	add	r2, r0
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d100      	bne.n	800ac9a <memset+0xa>
 800ac98:	4770      	bx	lr
 800ac9a:	f803 1b01 	strb.w	r1, [r3], #1
 800ac9e:	e7f9      	b.n	800ac94 <memset+0x4>

0800aca0 <_localeconv_r>:
 800aca0:	4800      	ldr	r0, [pc, #0]	@ (800aca4 <_localeconv_r+0x4>)
 800aca2:	4770      	bx	lr
 800aca4:	20000220 	.word	0x20000220

0800aca8 <_close_r>:
 800aca8:	b538      	push	{r3, r4, r5, lr}
 800acaa:	2300      	movs	r3, #0
 800acac:	4d05      	ldr	r5, [pc, #20]	@ (800acc4 <_close_r+0x1c>)
 800acae:	4604      	mov	r4, r0
 800acb0:	4608      	mov	r0, r1
 800acb2:	602b      	str	r3, [r5, #0]
 800acb4:	f7f7 ffc3 	bl	8002c3e <_close>
 800acb8:	1c43      	adds	r3, r0, #1
 800acba:	d102      	bne.n	800acc2 <_close_r+0x1a>
 800acbc:	682b      	ldr	r3, [r5, #0]
 800acbe:	b103      	cbz	r3, 800acc2 <_close_r+0x1a>
 800acc0:	6023      	str	r3, [r4, #0]
 800acc2:	bd38      	pop	{r3, r4, r5, pc}
 800acc4:	200006a8 	.word	0x200006a8

0800acc8 <_lseek_r>:
 800acc8:	b538      	push	{r3, r4, r5, lr}
 800acca:	4604      	mov	r4, r0
 800accc:	4608      	mov	r0, r1
 800acce:	4611      	mov	r1, r2
 800acd0:	2200      	movs	r2, #0
 800acd2:	4d05      	ldr	r5, [pc, #20]	@ (800ace8 <_lseek_r+0x20>)
 800acd4:	602a      	str	r2, [r5, #0]
 800acd6:	461a      	mov	r2, r3
 800acd8:	f7f7 ffd5 	bl	8002c86 <_lseek>
 800acdc:	1c43      	adds	r3, r0, #1
 800acde:	d102      	bne.n	800ace6 <_lseek_r+0x1e>
 800ace0:	682b      	ldr	r3, [r5, #0]
 800ace2:	b103      	cbz	r3, 800ace6 <_lseek_r+0x1e>
 800ace4:	6023      	str	r3, [r4, #0]
 800ace6:	bd38      	pop	{r3, r4, r5, pc}
 800ace8:	200006a8 	.word	0x200006a8

0800acec <_read_r>:
 800acec:	b538      	push	{r3, r4, r5, lr}
 800acee:	4604      	mov	r4, r0
 800acf0:	4608      	mov	r0, r1
 800acf2:	4611      	mov	r1, r2
 800acf4:	2200      	movs	r2, #0
 800acf6:	4d05      	ldr	r5, [pc, #20]	@ (800ad0c <_read_r+0x20>)
 800acf8:	602a      	str	r2, [r5, #0]
 800acfa:	461a      	mov	r2, r3
 800acfc:	f7f7 ff66 	bl	8002bcc <_read>
 800ad00:	1c43      	adds	r3, r0, #1
 800ad02:	d102      	bne.n	800ad0a <_read_r+0x1e>
 800ad04:	682b      	ldr	r3, [r5, #0]
 800ad06:	b103      	cbz	r3, 800ad0a <_read_r+0x1e>
 800ad08:	6023      	str	r3, [r4, #0]
 800ad0a:	bd38      	pop	{r3, r4, r5, pc}
 800ad0c:	200006a8 	.word	0x200006a8

0800ad10 <_write_r>:
 800ad10:	b538      	push	{r3, r4, r5, lr}
 800ad12:	4604      	mov	r4, r0
 800ad14:	4608      	mov	r0, r1
 800ad16:	4611      	mov	r1, r2
 800ad18:	2200      	movs	r2, #0
 800ad1a:	4d05      	ldr	r5, [pc, #20]	@ (800ad30 <_write_r+0x20>)
 800ad1c:	602a      	str	r2, [r5, #0]
 800ad1e:	461a      	mov	r2, r3
 800ad20:	f7f7 ff71 	bl	8002c06 <_write>
 800ad24:	1c43      	adds	r3, r0, #1
 800ad26:	d102      	bne.n	800ad2e <_write_r+0x1e>
 800ad28:	682b      	ldr	r3, [r5, #0]
 800ad2a:	b103      	cbz	r3, 800ad2e <_write_r+0x1e>
 800ad2c:	6023      	str	r3, [r4, #0]
 800ad2e:	bd38      	pop	{r3, r4, r5, pc}
 800ad30:	200006a8 	.word	0x200006a8

0800ad34 <__errno>:
 800ad34:	4b01      	ldr	r3, [pc, #4]	@ (800ad3c <__errno+0x8>)
 800ad36:	6818      	ldr	r0, [r3, #0]
 800ad38:	4770      	bx	lr
 800ad3a:	bf00      	nop
 800ad3c:	200000e0 	.word	0x200000e0

0800ad40 <__libc_init_array>:
 800ad40:	b570      	push	{r4, r5, r6, lr}
 800ad42:	2600      	movs	r6, #0
 800ad44:	4d0c      	ldr	r5, [pc, #48]	@ (800ad78 <__libc_init_array+0x38>)
 800ad46:	4c0d      	ldr	r4, [pc, #52]	@ (800ad7c <__libc_init_array+0x3c>)
 800ad48:	1b64      	subs	r4, r4, r5
 800ad4a:	10a4      	asrs	r4, r4, #2
 800ad4c:	42a6      	cmp	r6, r4
 800ad4e:	d109      	bne.n	800ad64 <__libc_init_array+0x24>
 800ad50:	f002 ff1e 	bl	800db90 <_init>
 800ad54:	2600      	movs	r6, #0
 800ad56:	4d0a      	ldr	r5, [pc, #40]	@ (800ad80 <__libc_init_array+0x40>)
 800ad58:	4c0a      	ldr	r4, [pc, #40]	@ (800ad84 <__libc_init_array+0x44>)
 800ad5a:	1b64      	subs	r4, r4, r5
 800ad5c:	10a4      	asrs	r4, r4, #2
 800ad5e:	42a6      	cmp	r6, r4
 800ad60:	d105      	bne.n	800ad6e <__libc_init_array+0x2e>
 800ad62:	bd70      	pop	{r4, r5, r6, pc}
 800ad64:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad68:	4798      	blx	r3
 800ad6a:	3601      	adds	r6, #1
 800ad6c:	e7ee      	b.n	800ad4c <__libc_init_array+0xc>
 800ad6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad72:	4798      	blx	r3
 800ad74:	3601      	adds	r6, #1
 800ad76:	e7f2      	b.n	800ad5e <__libc_init_array+0x1e>
 800ad78:	0800e018 	.word	0x0800e018
 800ad7c:	0800e018 	.word	0x0800e018
 800ad80:	0800e018 	.word	0x0800e018
 800ad84:	0800e01c 	.word	0x0800e01c

0800ad88 <__retarget_lock_init_recursive>:
 800ad88:	4770      	bx	lr

0800ad8a <__retarget_lock_acquire_recursive>:
 800ad8a:	4770      	bx	lr

0800ad8c <__retarget_lock_release_recursive>:
 800ad8c:	4770      	bx	lr

0800ad8e <memchr>:
 800ad8e:	4603      	mov	r3, r0
 800ad90:	b510      	push	{r4, lr}
 800ad92:	b2c9      	uxtb	r1, r1
 800ad94:	4402      	add	r2, r0
 800ad96:	4293      	cmp	r3, r2
 800ad98:	4618      	mov	r0, r3
 800ad9a:	d101      	bne.n	800ada0 <memchr+0x12>
 800ad9c:	2000      	movs	r0, #0
 800ad9e:	e003      	b.n	800ada8 <memchr+0x1a>
 800ada0:	7804      	ldrb	r4, [r0, #0]
 800ada2:	3301      	adds	r3, #1
 800ada4:	428c      	cmp	r4, r1
 800ada6:	d1f6      	bne.n	800ad96 <memchr+0x8>
 800ada8:	bd10      	pop	{r4, pc}

0800adaa <quorem>:
 800adaa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adae:	6903      	ldr	r3, [r0, #16]
 800adb0:	690c      	ldr	r4, [r1, #16]
 800adb2:	4607      	mov	r7, r0
 800adb4:	42a3      	cmp	r3, r4
 800adb6:	db7e      	blt.n	800aeb6 <quorem+0x10c>
 800adb8:	3c01      	subs	r4, #1
 800adba:	00a3      	lsls	r3, r4, #2
 800adbc:	f100 0514 	add.w	r5, r0, #20
 800adc0:	f101 0814 	add.w	r8, r1, #20
 800adc4:	9300      	str	r3, [sp, #0]
 800adc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800adca:	9301      	str	r3, [sp, #4]
 800adcc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800add0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800add4:	3301      	adds	r3, #1
 800add6:	429a      	cmp	r2, r3
 800add8:	fbb2 f6f3 	udiv	r6, r2, r3
 800addc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ade0:	d32e      	bcc.n	800ae40 <quorem+0x96>
 800ade2:	f04f 0a00 	mov.w	sl, #0
 800ade6:	46c4      	mov	ip, r8
 800ade8:	46ae      	mov	lr, r5
 800adea:	46d3      	mov	fp, sl
 800adec:	f85c 3b04 	ldr.w	r3, [ip], #4
 800adf0:	b298      	uxth	r0, r3
 800adf2:	fb06 a000 	mla	r0, r6, r0, sl
 800adf6:	0c1b      	lsrs	r3, r3, #16
 800adf8:	0c02      	lsrs	r2, r0, #16
 800adfa:	fb06 2303 	mla	r3, r6, r3, r2
 800adfe:	f8de 2000 	ldr.w	r2, [lr]
 800ae02:	b280      	uxth	r0, r0
 800ae04:	b292      	uxth	r2, r2
 800ae06:	1a12      	subs	r2, r2, r0
 800ae08:	445a      	add	r2, fp
 800ae0a:	f8de 0000 	ldr.w	r0, [lr]
 800ae0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ae18:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ae1c:	b292      	uxth	r2, r2
 800ae1e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ae22:	45e1      	cmp	r9, ip
 800ae24:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ae28:	f84e 2b04 	str.w	r2, [lr], #4
 800ae2c:	d2de      	bcs.n	800adec <quorem+0x42>
 800ae2e:	9b00      	ldr	r3, [sp, #0]
 800ae30:	58eb      	ldr	r3, [r5, r3]
 800ae32:	b92b      	cbnz	r3, 800ae40 <quorem+0x96>
 800ae34:	9b01      	ldr	r3, [sp, #4]
 800ae36:	3b04      	subs	r3, #4
 800ae38:	429d      	cmp	r5, r3
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	d32f      	bcc.n	800ae9e <quorem+0xf4>
 800ae3e:	613c      	str	r4, [r7, #16]
 800ae40:	4638      	mov	r0, r7
 800ae42:	f001 f97b 	bl	800c13c <__mcmp>
 800ae46:	2800      	cmp	r0, #0
 800ae48:	db25      	blt.n	800ae96 <quorem+0xec>
 800ae4a:	4629      	mov	r1, r5
 800ae4c:	2000      	movs	r0, #0
 800ae4e:	f858 2b04 	ldr.w	r2, [r8], #4
 800ae52:	f8d1 c000 	ldr.w	ip, [r1]
 800ae56:	fa1f fe82 	uxth.w	lr, r2
 800ae5a:	fa1f f38c 	uxth.w	r3, ip
 800ae5e:	eba3 030e 	sub.w	r3, r3, lr
 800ae62:	4403      	add	r3, r0
 800ae64:	0c12      	lsrs	r2, r2, #16
 800ae66:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ae6a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ae6e:	b29b      	uxth	r3, r3
 800ae70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae74:	45c1      	cmp	r9, r8
 800ae76:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ae7a:	f841 3b04 	str.w	r3, [r1], #4
 800ae7e:	d2e6      	bcs.n	800ae4e <quorem+0xa4>
 800ae80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae88:	b922      	cbnz	r2, 800ae94 <quorem+0xea>
 800ae8a:	3b04      	subs	r3, #4
 800ae8c:	429d      	cmp	r5, r3
 800ae8e:	461a      	mov	r2, r3
 800ae90:	d30b      	bcc.n	800aeaa <quorem+0x100>
 800ae92:	613c      	str	r4, [r7, #16]
 800ae94:	3601      	adds	r6, #1
 800ae96:	4630      	mov	r0, r6
 800ae98:	b003      	add	sp, #12
 800ae9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae9e:	6812      	ldr	r2, [r2, #0]
 800aea0:	3b04      	subs	r3, #4
 800aea2:	2a00      	cmp	r2, #0
 800aea4:	d1cb      	bne.n	800ae3e <quorem+0x94>
 800aea6:	3c01      	subs	r4, #1
 800aea8:	e7c6      	b.n	800ae38 <quorem+0x8e>
 800aeaa:	6812      	ldr	r2, [r2, #0]
 800aeac:	3b04      	subs	r3, #4
 800aeae:	2a00      	cmp	r2, #0
 800aeb0:	d1ef      	bne.n	800ae92 <quorem+0xe8>
 800aeb2:	3c01      	subs	r4, #1
 800aeb4:	e7ea      	b.n	800ae8c <quorem+0xe2>
 800aeb6:	2000      	movs	r0, #0
 800aeb8:	e7ee      	b.n	800ae98 <quorem+0xee>
 800aeba:	0000      	movs	r0, r0
 800aebc:	0000      	movs	r0, r0
	...

0800aec0 <_dtoa_r>:
 800aec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec4:	4614      	mov	r4, r2
 800aec6:	461d      	mov	r5, r3
 800aec8:	69c7      	ldr	r7, [r0, #28]
 800aeca:	b097      	sub	sp, #92	@ 0x5c
 800aecc:	4683      	mov	fp, r0
 800aece:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800aed2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800aed4:	b97f      	cbnz	r7, 800aef6 <_dtoa_r+0x36>
 800aed6:	2010      	movs	r0, #16
 800aed8:	f000 fe02 	bl	800bae0 <malloc>
 800aedc:	4602      	mov	r2, r0
 800aede:	f8cb 001c 	str.w	r0, [fp, #28]
 800aee2:	b920      	cbnz	r0, 800aeee <_dtoa_r+0x2e>
 800aee4:	21ef      	movs	r1, #239	@ 0xef
 800aee6:	4ba8      	ldr	r3, [pc, #672]	@ (800b188 <_dtoa_r+0x2c8>)
 800aee8:	48a8      	ldr	r0, [pc, #672]	@ (800b18c <_dtoa_r+0x2cc>)
 800aeea:	f001 fe2b 	bl	800cb44 <__assert_func>
 800aeee:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800aef2:	6007      	str	r7, [r0, #0]
 800aef4:	60c7      	str	r7, [r0, #12]
 800aef6:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aefa:	6819      	ldr	r1, [r3, #0]
 800aefc:	b159      	cbz	r1, 800af16 <_dtoa_r+0x56>
 800aefe:	685a      	ldr	r2, [r3, #4]
 800af00:	2301      	movs	r3, #1
 800af02:	4093      	lsls	r3, r2
 800af04:	604a      	str	r2, [r1, #4]
 800af06:	608b      	str	r3, [r1, #8]
 800af08:	4658      	mov	r0, fp
 800af0a:	f000 fedf 	bl	800bccc <_Bfree>
 800af0e:	2200      	movs	r2, #0
 800af10:	f8db 301c 	ldr.w	r3, [fp, #28]
 800af14:	601a      	str	r2, [r3, #0]
 800af16:	1e2b      	subs	r3, r5, #0
 800af18:	bfaf      	iteee	ge
 800af1a:	2300      	movge	r3, #0
 800af1c:	2201      	movlt	r2, #1
 800af1e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800af22:	9303      	strlt	r3, [sp, #12]
 800af24:	bfa8      	it	ge
 800af26:	6033      	strge	r3, [r6, #0]
 800af28:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800af2c:	4b98      	ldr	r3, [pc, #608]	@ (800b190 <_dtoa_r+0x2d0>)
 800af2e:	bfb8      	it	lt
 800af30:	6032      	strlt	r2, [r6, #0]
 800af32:	ea33 0308 	bics.w	r3, r3, r8
 800af36:	d112      	bne.n	800af5e <_dtoa_r+0x9e>
 800af38:	f242 730f 	movw	r3, #9999	@ 0x270f
 800af3c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800af3e:	6013      	str	r3, [r2, #0]
 800af40:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800af44:	4323      	orrs	r3, r4
 800af46:	f000 8550 	beq.w	800b9ea <_dtoa_r+0xb2a>
 800af4a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800af4c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800b194 <_dtoa_r+0x2d4>
 800af50:	2b00      	cmp	r3, #0
 800af52:	f000 8552 	beq.w	800b9fa <_dtoa_r+0xb3a>
 800af56:	f10a 0303 	add.w	r3, sl, #3
 800af5a:	f000 bd4c 	b.w	800b9f6 <_dtoa_r+0xb36>
 800af5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af62:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800af66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af6a:	2200      	movs	r2, #0
 800af6c:	2300      	movs	r3, #0
 800af6e:	f7f5 fd33 	bl	80009d8 <__aeabi_dcmpeq>
 800af72:	4607      	mov	r7, r0
 800af74:	b158      	cbz	r0, 800af8e <_dtoa_r+0xce>
 800af76:	2301      	movs	r3, #1
 800af78:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800af7a:	6013      	str	r3, [r2, #0]
 800af7c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800af7e:	b113      	cbz	r3, 800af86 <_dtoa_r+0xc6>
 800af80:	4b85      	ldr	r3, [pc, #532]	@ (800b198 <_dtoa_r+0x2d8>)
 800af82:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800af84:	6013      	str	r3, [r2, #0]
 800af86:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800b19c <_dtoa_r+0x2dc>
 800af8a:	f000 bd36 	b.w	800b9fa <_dtoa_r+0xb3a>
 800af8e:	ab14      	add	r3, sp, #80	@ 0x50
 800af90:	9301      	str	r3, [sp, #4]
 800af92:	ab15      	add	r3, sp, #84	@ 0x54
 800af94:	9300      	str	r3, [sp, #0]
 800af96:	4658      	mov	r0, fp
 800af98:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800af9c:	f001 f97e 	bl	800c29c <__d2b>
 800afa0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800afa4:	4681      	mov	r9, r0
 800afa6:	2e00      	cmp	r6, #0
 800afa8:	d077      	beq.n	800b09a <_dtoa_r+0x1da>
 800afaa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800afae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800afb0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800afb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afb8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800afbc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800afc0:	9712      	str	r7, [sp, #72]	@ 0x48
 800afc2:	4619      	mov	r1, r3
 800afc4:	2200      	movs	r2, #0
 800afc6:	4b76      	ldr	r3, [pc, #472]	@ (800b1a0 <_dtoa_r+0x2e0>)
 800afc8:	f7f5 f8e6 	bl	8000198 <__aeabi_dsub>
 800afcc:	a368      	add	r3, pc, #416	@ (adr r3, 800b170 <_dtoa_r+0x2b0>)
 800afce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd2:	f7f5 fa99 	bl	8000508 <__aeabi_dmul>
 800afd6:	a368      	add	r3, pc, #416	@ (adr r3, 800b178 <_dtoa_r+0x2b8>)
 800afd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afdc:	f7f5 f8de 	bl	800019c <__adddf3>
 800afe0:	4604      	mov	r4, r0
 800afe2:	4630      	mov	r0, r6
 800afe4:	460d      	mov	r5, r1
 800afe6:	f7f5 fa25 	bl	8000434 <__aeabi_i2d>
 800afea:	a365      	add	r3, pc, #404	@ (adr r3, 800b180 <_dtoa_r+0x2c0>)
 800afec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff0:	f7f5 fa8a 	bl	8000508 <__aeabi_dmul>
 800aff4:	4602      	mov	r2, r0
 800aff6:	460b      	mov	r3, r1
 800aff8:	4620      	mov	r0, r4
 800affa:	4629      	mov	r1, r5
 800affc:	f7f5 f8ce 	bl	800019c <__adddf3>
 800b000:	4604      	mov	r4, r0
 800b002:	460d      	mov	r5, r1
 800b004:	f7f5 fd30 	bl	8000a68 <__aeabi_d2iz>
 800b008:	2200      	movs	r2, #0
 800b00a:	4607      	mov	r7, r0
 800b00c:	2300      	movs	r3, #0
 800b00e:	4620      	mov	r0, r4
 800b010:	4629      	mov	r1, r5
 800b012:	f7f5 fceb 	bl	80009ec <__aeabi_dcmplt>
 800b016:	b140      	cbz	r0, 800b02a <_dtoa_r+0x16a>
 800b018:	4638      	mov	r0, r7
 800b01a:	f7f5 fa0b 	bl	8000434 <__aeabi_i2d>
 800b01e:	4622      	mov	r2, r4
 800b020:	462b      	mov	r3, r5
 800b022:	f7f5 fcd9 	bl	80009d8 <__aeabi_dcmpeq>
 800b026:	b900      	cbnz	r0, 800b02a <_dtoa_r+0x16a>
 800b028:	3f01      	subs	r7, #1
 800b02a:	2f16      	cmp	r7, #22
 800b02c:	d853      	bhi.n	800b0d6 <_dtoa_r+0x216>
 800b02e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b032:	4b5c      	ldr	r3, [pc, #368]	@ (800b1a4 <_dtoa_r+0x2e4>)
 800b034:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03c:	f7f5 fcd6 	bl	80009ec <__aeabi_dcmplt>
 800b040:	2800      	cmp	r0, #0
 800b042:	d04a      	beq.n	800b0da <_dtoa_r+0x21a>
 800b044:	2300      	movs	r3, #0
 800b046:	3f01      	subs	r7, #1
 800b048:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b04a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b04c:	1b9b      	subs	r3, r3, r6
 800b04e:	1e5a      	subs	r2, r3, #1
 800b050:	bf46      	itte	mi
 800b052:	f1c3 0801 	rsbmi	r8, r3, #1
 800b056:	2300      	movmi	r3, #0
 800b058:	f04f 0800 	movpl.w	r8, #0
 800b05c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b05e:	bf48      	it	mi
 800b060:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800b062:	2f00      	cmp	r7, #0
 800b064:	db3b      	blt.n	800b0de <_dtoa_r+0x21e>
 800b066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b068:	970e      	str	r7, [sp, #56]	@ 0x38
 800b06a:	443b      	add	r3, r7
 800b06c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b06e:	2300      	movs	r3, #0
 800b070:	930a      	str	r3, [sp, #40]	@ 0x28
 800b072:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b074:	2b09      	cmp	r3, #9
 800b076:	d866      	bhi.n	800b146 <_dtoa_r+0x286>
 800b078:	2b05      	cmp	r3, #5
 800b07a:	bfc4      	itt	gt
 800b07c:	3b04      	subgt	r3, #4
 800b07e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800b080:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b082:	bfc8      	it	gt
 800b084:	2400      	movgt	r4, #0
 800b086:	f1a3 0302 	sub.w	r3, r3, #2
 800b08a:	bfd8      	it	le
 800b08c:	2401      	movle	r4, #1
 800b08e:	2b03      	cmp	r3, #3
 800b090:	d864      	bhi.n	800b15c <_dtoa_r+0x29c>
 800b092:	e8df f003 	tbb	[pc, r3]
 800b096:	382b      	.short	0x382b
 800b098:	5636      	.short	0x5636
 800b09a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b09e:	441e      	add	r6, r3
 800b0a0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b0a4:	2b20      	cmp	r3, #32
 800b0a6:	bfc1      	itttt	gt
 800b0a8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b0ac:	fa08 f803 	lslgt.w	r8, r8, r3
 800b0b0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b0b4:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b0b8:	bfd6      	itet	le
 800b0ba:	f1c3 0320 	rsble	r3, r3, #32
 800b0be:	ea48 0003 	orrgt.w	r0, r8, r3
 800b0c2:	fa04 f003 	lslle.w	r0, r4, r3
 800b0c6:	f7f5 f9a5 	bl	8000414 <__aeabi_ui2d>
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b0d0:	3e01      	subs	r6, #1
 800b0d2:	9212      	str	r2, [sp, #72]	@ 0x48
 800b0d4:	e775      	b.n	800afc2 <_dtoa_r+0x102>
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	e7b6      	b.n	800b048 <_dtoa_r+0x188>
 800b0da:	900f      	str	r0, [sp, #60]	@ 0x3c
 800b0dc:	e7b5      	b.n	800b04a <_dtoa_r+0x18a>
 800b0de:	427b      	negs	r3, r7
 800b0e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	eba8 0807 	sub.w	r8, r8, r7
 800b0e8:	930e      	str	r3, [sp, #56]	@ 0x38
 800b0ea:	e7c2      	b.n	800b072 <_dtoa_r+0x1b2>
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b0f0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	dc35      	bgt.n	800b162 <_dtoa_r+0x2a2>
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b0fe:	9221      	str	r2, [sp, #132]	@ 0x84
 800b100:	e00b      	b.n	800b11a <_dtoa_r+0x25a>
 800b102:	2301      	movs	r3, #1
 800b104:	e7f3      	b.n	800b0ee <_dtoa_r+0x22e>
 800b106:	2300      	movs	r3, #0
 800b108:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b10a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b10c:	18fb      	adds	r3, r7, r3
 800b10e:	9308      	str	r3, [sp, #32]
 800b110:	3301      	adds	r3, #1
 800b112:	2b01      	cmp	r3, #1
 800b114:	9307      	str	r3, [sp, #28]
 800b116:	bfb8      	it	lt
 800b118:	2301      	movlt	r3, #1
 800b11a:	2100      	movs	r1, #0
 800b11c:	2204      	movs	r2, #4
 800b11e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b122:	f102 0514 	add.w	r5, r2, #20
 800b126:	429d      	cmp	r5, r3
 800b128:	d91f      	bls.n	800b16a <_dtoa_r+0x2aa>
 800b12a:	6041      	str	r1, [r0, #4]
 800b12c:	4658      	mov	r0, fp
 800b12e:	f000 fd8d 	bl	800bc4c <_Balloc>
 800b132:	4682      	mov	sl, r0
 800b134:	2800      	cmp	r0, #0
 800b136:	d139      	bne.n	800b1ac <_dtoa_r+0x2ec>
 800b138:	4602      	mov	r2, r0
 800b13a:	f240 11af 	movw	r1, #431	@ 0x1af
 800b13e:	4b1a      	ldr	r3, [pc, #104]	@ (800b1a8 <_dtoa_r+0x2e8>)
 800b140:	e6d2      	b.n	800aee8 <_dtoa_r+0x28>
 800b142:	2301      	movs	r3, #1
 800b144:	e7e0      	b.n	800b108 <_dtoa_r+0x248>
 800b146:	2401      	movs	r4, #1
 800b148:	2300      	movs	r3, #0
 800b14a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b14c:	9320      	str	r3, [sp, #128]	@ 0x80
 800b14e:	f04f 33ff 	mov.w	r3, #4294967295
 800b152:	2200      	movs	r2, #0
 800b154:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b158:	2312      	movs	r3, #18
 800b15a:	e7d0      	b.n	800b0fe <_dtoa_r+0x23e>
 800b15c:	2301      	movs	r3, #1
 800b15e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b160:	e7f5      	b.n	800b14e <_dtoa_r+0x28e>
 800b162:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b164:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b168:	e7d7      	b.n	800b11a <_dtoa_r+0x25a>
 800b16a:	3101      	adds	r1, #1
 800b16c:	0052      	lsls	r2, r2, #1
 800b16e:	e7d8      	b.n	800b122 <_dtoa_r+0x262>
 800b170:	636f4361 	.word	0x636f4361
 800b174:	3fd287a7 	.word	0x3fd287a7
 800b178:	8b60c8b3 	.word	0x8b60c8b3
 800b17c:	3fc68a28 	.word	0x3fc68a28
 800b180:	509f79fb 	.word	0x509f79fb
 800b184:	3fd34413 	.word	0x3fd34413
 800b188:	0800dcb1 	.word	0x0800dcb1
 800b18c:	0800dcc8 	.word	0x0800dcc8
 800b190:	7ff00000 	.word	0x7ff00000
 800b194:	0800dcad 	.word	0x0800dcad
 800b198:	0800dc81 	.word	0x0800dc81
 800b19c:	0800dc80 	.word	0x0800dc80
 800b1a0:	3ff80000 	.word	0x3ff80000
 800b1a4:	0800ddc0 	.word	0x0800ddc0
 800b1a8:	0800dd20 	.word	0x0800dd20
 800b1ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b1b0:	6018      	str	r0, [r3, #0]
 800b1b2:	9b07      	ldr	r3, [sp, #28]
 800b1b4:	2b0e      	cmp	r3, #14
 800b1b6:	f200 80a4 	bhi.w	800b302 <_dtoa_r+0x442>
 800b1ba:	2c00      	cmp	r4, #0
 800b1bc:	f000 80a1 	beq.w	800b302 <_dtoa_r+0x442>
 800b1c0:	2f00      	cmp	r7, #0
 800b1c2:	dd33      	ble.n	800b22c <_dtoa_r+0x36c>
 800b1c4:	4b86      	ldr	r3, [pc, #536]	@ (800b3e0 <_dtoa_r+0x520>)
 800b1c6:	f007 020f 	and.w	r2, r7, #15
 800b1ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1ce:	05f8      	lsls	r0, r7, #23
 800b1d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b1d4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b1d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b1dc:	d516      	bpl.n	800b20c <_dtoa_r+0x34c>
 800b1de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b1e2:	4b80      	ldr	r3, [pc, #512]	@ (800b3e4 <_dtoa_r+0x524>)
 800b1e4:	2603      	movs	r6, #3
 800b1e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b1ea:	f7f5 fab7 	bl	800075c <__aeabi_ddiv>
 800b1ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1f2:	f004 040f 	and.w	r4, r4, #15
 800b1f6:	4d7b      	ldr	r5, [pc, #492]	@ (800b3e4 <_dtoa_r+0x524>)
 800b1f8:	b954      	cbnz	r4, 800b210 <_dtoa_r+0x350>
 800b1fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b202:	f7f5 faab 	bl	800075c <__aeabi_ddiv>
 800b206:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b20a:	e028      	b.n	800b25e <_dtoa_r+0x39e>
 800b20c:	2602      	movs	r6, #2
 800b20e:	e7f2      	b.n	800b1f6 <_dtoa_r+0x336>
 800b210:	07e1      	lsls	r1, r4, #31
 800b212:	d508      	bpl.n	800b226 <_dtoa_r+0x366>
 800b214:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b218:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b21c:	f7f5 f974 	bl	8000508 <__aeabi_dmul>
 800b220:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b224:	3601      	adds	r6, #1
 800b226:	1064      	asrs	r4, r4, #1
 800b228:	3508      	adds	r5, #8
 800b22a:	e7e5      	b.n	800b1f8 <_dtoa_r+0x338>
 800b22c:	f000 80d2 	beq.w	800b3d4 <_dtoa_r+0x514>
 800b230:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b234:	427c      	negs	r4, r7
 800b236:	4b6a      	ldr	r3, [pc, #424]	@ (800b3e0 <_dtoa_r+0x520>)
 800b238:	f004 020f 	and.w	r2, r4, #15
 800b23c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b244:	f7f5 f960 	bl	8000508 <__aeabi_dmul>
 800b248:	2602      	movs	r6, #2
 800b24a:	2300      	movs	r3, #0
 800b24c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b250:	4d64      	ldr	r5, [pc, #400]	@ (800b3e4 <_dtoa_r+0x524>)
 800b252:	1124      	asrs	r4, r4, #4
 800b254:	2c00      	cmp	r4, #0
 800b256:	f040 80b2 	bne.w	800b3be <_dtoa_r+0x4fe>
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d1d3      	bne.n	800b206 <_dtoa_r+0x346>
 800b25e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b262:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b264:	2b00      	cmp	r3, #0
 800b266:	f000 80b7 	beq.w	800b3d8 <_dtoa_r+0x518>
 800b26a:	2200      	movs	r2, #0
 800b26c:	4620      	mov	r0, r4
 800b26e:	4629      	mov	r1, r5
 800b270:	4b5d      	ldr	r3, [pc, #372]	@ (800b3e8 <_dtoa_r+0x528>)
 800b272:	f7f5 fbbb 	bl	80009ec <__aeabi_dcmplt>
 800b276:	2800      	cmp	r0, #0
 800b278:	f000 80ae 	beq.w	800b3d8 <_dtoa_r+0x518>
 800b27c:	9b07      	ldr	r3, [sp, #28]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	f000 80aa 	beq.w	800b3d8 <_dtoa_r+0x518>
 800b284:	9b08      	ldr	r3, [sp, #32]
 800b286:	2b00      	cmp	r3, #0
 800b288:	dd37      	ble.n	800b2fa <_dtoa_r+0x43a>
 800b28a:	1e7b      	subs	r3, r7, #1
 800b28c:	4620      	mov	r0, r4
 800b28e:	9304      	str	r3, [sp, #16]
 800b290:	2200      	movs	r2, #0
 800b292:	4629      	mov	r1, r5
 800b294:	4b55      	ldr	r3, [pc, #340]	@ (800b3ec <_dtoa_r+0x52c>)
 800b296:	f7f5 f937 	bl	8000508 <__aeabi_dmul>
 800b29a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b29e:	9c08      	ldr	r4, [sp, #32]
 800b2a0:	3601      	adds	r6, #1
 800b2a2:	4630      	mov	r0, r6
 800b2a4:	f7f5 f8c6 	bl	8000434 <__aeabi_i2d>
 800b2a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b2ac:	f7f5 f92c 	bl	8000508 <__aeabi_dmul>
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	4b4f      	ldr	r3, [pc, #316]	@ (800b3f0 <_dtoa_r+0x530>)
 800b2b4:	f7f4 ff72 	bl	800019c <__adddf3>
 800b2b8:	4605      	mov	r5, r0
 800b2ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b2be:	2c00      	cmp	r4, #0
 800b2c0:	f040 809a 	bne.w	800b3f8 <_dtoa_r+0x538>
 800b2c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	4b4a      	ldr	r3, [pc, #296]	@ (800b3f4 <_dtoa_r+0x534>)
 800b2cc:	f7f4 ff64 	bl	8000198 <__aeabi_dsub>
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	460b      	mov	r3, r1
 800b2d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b2d8:	462a      	mov	r2, r5
 800b2da:	4633      	mov	r3, r6
 800b2dc:	f7f5 fba4 	bl	8000a28 <__aeabi_dcmpgt>
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	f040 828e 	bne.w	800b802 <_dtoa_r+0x942>
 800b2e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2ea:	462a      	mov	r2, r5
 800b2ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b2f0:	f7f5 fb7c 	bl	80009ec <__aeabi_dcmplt>
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	f040 8127 	bne.w	800b548 <_dtoa_r+0x688>
 800b2fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b2fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b302:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b304:	2b00      	cmp	r3, #0
 800b306:	f2c0 8163 	blt.w	800b5d0 <_dtoa_r+0x710>
 800b30a:	2f0e      	cmp	r7, #14
 800b30c:	f300 8160 	bgt.w	800b5d0 <_dtoa_r+0x710>
 800b310:	4b33      	ldr	r3, [pc, #204]	@ (800b3e0 <_dtoa_r+0x520>)
 800b312:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b316:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b31a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b31e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b320:	2b00      	cmp	r3, #0
 800b322:	da03      	bge.n	800b32c <_dtoa_r+0x46c>
 800b324:	9b07      	ldr	r3, [sp, #28]
 800b326:	2b00      	cmp	r3, #0
 800b328:	f340 8100 	ble.w	800b52c <_dtoa_r+0x66c>
 800b32c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b330:	4656      	mov	r6, sl
 800b332:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b336:	4620      	mov	r0, r4
 800b338:	4629      	mov	r1, r5
 800b33a:	f7f5 fa0f 	bl	800075c <__aeabi_ddiv>
 800b33e:	f7f5 fb93 	bl	8000a68 <__aeabi_d2iz>
 800b342:	4680      	mov	r8, r0
 800b344:	f7f5 f876 	bl	8000434 <__aeabi_i2d>
 800b348:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b34c:	f7f5 f8dc 	bl	8000508 <__aeabi_dmul>
 800b350:	4602      	mov	r2, r0
 800b352:	460b      	mov	r3, r1
 800b354:	4620      	mov	r0, r4
 800b356:	4629      	mov	r1, r5
 800b358:	f7f4 ff1e 	bl	8000198 <__aeabi_dsub>
 800b35c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b360:	9d07      	ldr	r5, [sp, #28]
 800b362:	f806 4b01 	strb.w	r4, [r6], #1
 800b366:	eba6 040a 	sub.w	r4, r6, sl
 800b36a:	42a5      	cmp	r5, r4
 800b36c:	4602      	mov	r2, r0
 800b36e:	460b      	mov	r3, r1
 800b370:	f040 8116 	bne.w	800b5a0 <_dtoa_r+0x6e0>
 800b374:	f7f4 ff12 	bl	800019c <__adddf3>
 800b378:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b37c:	4604      	mov	r4, r0
 800b37e:	460d      	mov	r5, r1
 800b380:	f7f5 fb52 	bl	8000a28 <__aeabi_dcmpgt>
 800b384:	2800      	cmp	r0, #0
 800b386:	f040 80f8 	bne.w	800b57a <_dtoa_r+0x6ba>
 800b38a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b38e:	4620      	mov	r0, r4
 800b390:	4629      	mov	r1, r5
 800b392:	f7f5 fb21 	bl	80009d8 <__aeabi_dcmpeq>
 800b396:	b118      	cbz	r0, 800b3a0 <_dtoa_r+0x4e0>
 800b398:	f018 0f01 	tst.w	r8, #1
 800b39c:	f040 80ed 	bne.w	800b57a <_dtoa_r+0x6ba>
 800b3a0:	4649      	mov	r1, r9
 800b3a2:	4658      	mov	r0, fp
 800b3a4:	f000 fc92 	bl	800bccc <_Bfree>
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	7033      	strb	r3, [r6, #0]
 800b3ac:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b3ae:	3701      	adds	r7, #1
 800b3b0:	601f      	str	r7, [r3, #0]
 800b3b2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	f000 8320 	beq.w	800b9fa <_dtoa_r+0xb3a>
 800b3ba:	601e      	str	r6, [r3, #0]
 800b3bc:	e31d      	b.n	800b9fa <_dtoa_r+0xb3a>
 800b3be:	07e2      	lsls	r2, r4, #31
 800b3c0:	d505      	bpl.n	800b3ce <_dtoa_r+0x50e>
 800b3c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b3c6:	f7f5 f89f 	bl	8000508 <__aeabi_dmul>
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	3601      	adds	r6, #1
 800b3ce:	1064      	asrs	r4, r4, #1
 800b3d0:	3508      	adds	r5, #8
 800b3d2:	e73f      	b.n	800b254 <_dtoa_r+0x394>
 800b3d4:	2602      	movs	r6, #2
 800b3d6:	e742      	b.n	800b25e <_dtoa_r+0x39e>
 800b3d8:	9c07      	ldr	r4, [sp, #28]
 800b3da:	9704      	str	r7, [sp, #16]
 800b3dc:	e761      	b.n	800b2a2 <_dtoa_r+0x3e2>
 800b3de:	bf00      	nop
 800b3e0:	0800ddc0 	.word	0x0800ddc0
 800b3e4:	0800dd98 	.word	0x0800dd98
 800b3e8:	3ff00000 	.word	0x3ff00000
 800b3ec:	40240000 	.word	0x40240000
 800b3f0:	401c0000 	.word	0x401c0000
 800b3f4:	40140000 	.word	0x40140000
 800b3f8:	4b70      	ldr	r3, [pc, #448]	@ (800b5bc <_dtoa_r+0x6fc>)
 800b3fa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b3fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b400:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b404:	4454      	add	r4, sl
 800b406:	2900      	cmp	r1, #0
 800b408:	d045      	beq.n	800b496 <_dtoa_r+0x5d6>
 800b40a:	2000      	movs	r0, #0
 800b40c:	496c      	ldr	r1, [pc, #432]	@ (800b5c0 <_dtoa_r+0x700>)
 800b40e:	f7f5 f9a5 	bl	800075c <__aeabi_ddiv>
 800b412:	4633      	mov	r3, r6
 800b414:	462a      	mov	r2, r5
 800b416:	f7f4 febf 	bl	8000198 <__aeabi_dsub>
 800b41a:	4656      	mov	r6, sl
 800b41c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b420:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b424:	f7f5 fb20 	bl	8000a68 <__aeabi_d2iz>
 800b428:	4605      	mov	r5, r0
 800b42a:	f7f5 f803 	bl	8000434 <__aeabi_i2d>
 800b42e:	4602      	mov	r2, r0
 800b430:	460b      	mov	r3, r1
 800b432:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b436:	f7f4 feaf 	bl	8000198 <__aeabi_dsub>
 800b43a:	4602      	mov	r2, r0
 800b43c:	460b      	mov	r3, r1
 800b43e:	3530      	adds	r5, #48	@ 0x30
 800b440:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b444:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b448:	f806 5b01 	strb.w	r5, [r6], #1
 800b44c:	f7f5 face 	bl	80009ec <__aeabi_dcmplt>
 800b450:	2800      	cmp	r0, #0
 800b452:	d163      	bne.n	800b51c <_dtoa_r+0x65c>
 800b454:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b458:	2000      	movs	r0, #0
 800b45a:	495a      	ldr	r1, [pc, #360]	@ (800b5c4 <_dtoa_r+0x704>)
 800b45c:	f7f4 fe9c 	bl	8000198 <__aeabi_dsub>
 800b460:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b464:	f7f5 fac2 	bl	80009ec <__aeabi_dcmplt>
 800b468:	2800      	cmp	r0, #0
 800b46a:	f040 8087 	bne.w	800b57c <_dtoa_r+0x6bc>
 800b46e:	42a6      	cmp	r6, r4
 800b470:	f43f af43 	beq.w	800b2fa <_dtoa_r+0x43a>
 800b474:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b478:	2200      	movs	r2, #0
 800b47a:	4b53      	ldr	r3, [pc, #332]	@ (800b5c8 <_dtoa_r+0x708>)
 800b47c:	f7f5 f844 	bl	8000508 <__aeabi_dmul>
 800b480:	2200      	movs	r2, #0
 800b482:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b486:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b48a:	4b4f      	ldr	r3, [pc, #316]	@ (800b5c8 <_dtoa_r+0x708>)
 800b48c:	f7f5 f83c 	bl	8000508 <__aeabi_dmul>
 800b490:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b494:	e7c4      	b.n	800b420 <_dtoa_r+0x560>
 800b496:	4631      	mov	r1, r6
 800b498:	4628      	mov	r0, r5
 800b49a:	f7f5 f835 	bl	8000508 <__aeabi_dmul>
 800b49e:	4656      	mov	r6, sl
 800b4a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b4a4:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b4a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4aa:	f7f5 fadd 	bl	8000a68 <__aeabi_d2iz>
 800b4ae:	4605      	mov	r5, r0
 800b4b0:	f7f4 ffc0 	bl	8000434 <__aeabi_i2d>
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	460b      	mov	r3, r1
 800b4b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4bc:	f7f4 fe6c 	bl	8000198 <__aeabi_dsub>
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	460b      	mov	r3, r1
 800b4c4:	3530      	adds	r5, #48	@ 0x30
 800b4c6:	f806 5b01 	strb.w	r5, [r6], #1
 800b4ca:	42a6      	cmp	r6, r4
 800b4cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b4d0:	f04f 0200 	mov.w	r2, #0
 800b4d4:	d124      	bne.n	800b520 <_dtoa_r+0x660>
 800b4d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b4da:	4b39      	ldr	r3, [pc, #228]	@ (800b5c0 <_dtoa_r+0x700>)
 800b4dc:	f7f4 fe5e 	bl	800019c <__adddf3>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	460b      	mov	r3, r1
 800b4e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4e8:	f7f5 fa9e 	bl	8000a28 <__aeabi_dcmpgt>
 800b4ec:	2800      	cmp	r0, #0
 800b4ee:	d145      	bne.n	800b57c <_dtoa_r+0x6bc>
 800b4f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b4f4:	2000      	movs	r0, #0
 800b4f6:	4932      	ldr	r1, [pc, #200]	@ (800b5c0 <_dtoa_r+0x700>)
 800b4f8:	f7f4 fe4e 	bl	8000198 <__aeabi_dsub>
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	460b      	mov	r3, r1
 800b500:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b504:	f7f5 fa72 	bl	80009ec <__aeabi_dcmplt>
 800b508:	2800      	cmp	r0, #0
 800b50a:	f43f aef6 	beq.w	800b2fa <_dtoa_r+0x43a>
 800b50e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b510:	1e73      	subs	r3, r6, #1
 800b512:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b514:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b518:	2b30      	cmp	r3, #48	@ 0x30
 800b51a:	d0f8      	beq.n	800b50e <_dtoa_r+0x64e>
 800b51c:	9f04      	ldr	r7, [sp, #16]
 800b51e:	e73f      	b.n	800b3a0 <_dtoa_r+0x4e0>
 800b520:	4b29      	ldr	r3, [pc, #164]	@ (800b5c8 <_dtoa_r+0x708>)
 800b522:	f7f4 fff1 	bl	8000508 <__aeabi_dmul>
 800b526:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b52a:	e7bc      	b.n	800b4a6 <_dtoa_r+0x5e6>
 800b52c:	d10c      	bne.n	800b548 <_dtoa_r+0x688>
 800b52e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b532:	2200      	movs	r2, #0
 800b534:	4b25      	ldr	r3, [pc, #148]	@ (800b5cc <_dtoa_r+0x70c>)
 800b536:	f7f4 ffe7 	bl	8000508 <__aeabi_dmul>
 800b53a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b53e:	f7f5 fa69 	bl	8000a14 <__aeabi_dcmpge>
 800b542:	2800      	cmp	r0, #0
 800b544:	f000 815b 	beq.w	800b7fe <_dtoa_r+0x93e>
 800b548:	2400      	movs	r4, #0
 800b54a:	4625      	mov	r5, r4
 800b54c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b54e:	4656      	mov	r6, sl
 800b550:	43db      	mvns	r3, r3
 800b552:	9304      	str	r3, [sp, #16]
 800b554:	2700      	movs	r7, #0
 800b556:	4621      	mov	r1, r4
 800b558:	4658      	mov	r0, fp
 800b55a:	f000 fbb7 	bl	800bccc <_Bfree>
 800b55e:	2d00      	cmp	r5, #0
 800b560:	d0dc      	beq.n	800b51c <_dtoa_r+0x65c>
 800b562:	b12f      	cbz	r7, 800b570 <_dtoa_r+0x6b0>
 800b564:	42af      	cmp	r7, r5
 800b566:	d003      	beq.n	800b570 <_dtoa_r+0x6b0>
 800b568:	4639      	mov	r1, r7
 800b56a:	4658      	mov	r0, fp
 800b56c:	f000 fbae 	bl	800bccc <_Bfree>
 800b570:	4629      	mov	r1, r5
 800b572:	4658      	mov	r0, fp
 800b574:	f000 fbaa 	bl	800bccc <_Bfree>
 800b578:	e7d0      	b.n	800b51c <_dtoa_r+0x65c>
 800b57a:	9704      	str	r7, [sp, #16]
 800b57c:	4633      	mov	r3, r6
 800b57e:	461e      	mov	r6, r3
 800b580:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b584:	2a39      	cmp	r2, #57	@ 0x39
 800b586:	d107      	bne.n	800b598 <_dtoa_r+0x6d8>
 800b588:	459a      	cmp	sl, r3
 800b58a:	d1f8      	bne.n	800b57e <_dtoa_r+0x6be>
 800b58c:	9a04      	ldr	r2, [sp, #16]
 800b58e:	3201      	adds	r2, #1
 800b590:	9204      	str	r2, [sp, #16]
 800b592:	2230      	movs	r2, #48	@ 0x30
 800b594:	f88a 2000 	strb.w	r2, [sl]
 800b598:	781a      	ldrb	r2, [r3, #0]
 800b59a:	3201      	adds	r2, #1
 800b59c:	701a      	strb	r2, [r3, #0]
 800b59e:	e7bd      	b.n	800b51c <_dtoa_r+0x65c>
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	4b09      	ldr	r3, [pc, #36]	@ (800b5c8 <_dtoa_r+0x708>)
 800b5a4:	f7f4 ffb0 	bl	8000508 <__aeabi_dmul>
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	4604      	mov	r4, r0
 800b5ae:	460d      	mov	r5, r1
 800b5b0:	f7f5 fa12 	bl	80009d8 <__aeabi_dcmpeq>
 800b5b4:	2800      	cmp	r0, #0
 800b5b6:	f43f aebc 	beq.w	800b332 <_dtoa_r+0x472>
 800b5ba:	e6f1      	b.n	800b3a0 <_dtoa_r+0x4e0>
 800b5bc:	0800ddc0 	.word	0x0800ddc0
 800b5c0:	3fe00000 	.word	0x3fe00000
 800b5c4:	3ff00000 	.word	0x3ff00000
 800b5c8:	40240000 	.word	0x40240000
 800b5cc:	40140000 	.word	0x40140000
 800b5d0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b5d2:	2a00      	cmp	r2, #0
 800b5d4:	f000 80db 	beq.w	800b78e <_dtoa_r+0x8ce>
 800b5d8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b5da:	2a01      	cmp	r2, #1
 800b5dc:	f300 80bf 	bgt.w	800b75e <_dtoa_r+0x89e>
 800b5e0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b5e2:	2a00      	cmp	r2, #0
 800b5e4:	f000 80b7 	beq.w	800b756 <_dtoa_r+0x896>
 800b5e8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b5ec:	4646      	mov	r6, r8
 800b5ee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b5f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5f2:	2101      	movs	r1, #1
 800b5f4:	441a      	add	r2, r3
 800b5f6:	4658      	mov	r0, fp
 800b5f8:	4498      	add	r8, r3
 800b5fa:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5fc:	f000 fc1a 	bl	800be34 <__i2b>
 800b600:	4605      	mov	r5, r0
 800b602:	b15e      	cbz	r6, 800b61c <_dtoa_r+0x75c>
 800b604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b606:	2b00      	cmp	r3, #0
 800b608:	dd08      	ble.n	800b61c <_dtoa_r+0x75c>
 800b60a:	42b3      	cmp	r3, r6
 800b60c:	bfa8      	it	ge
 800b60e:	4633      	movge	r3, r6
 800b610:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b612:	eba8 0803 	sub.w	r8, r8, r3
 800b616:	1af6      	subs	r6, r6, r3
 800b618:	1ad3      	subs	r3, r2, r3
 800b61a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b61c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b61e:	b1f3      	cbz	r3, 800b65e <_dtoa_r+0x79e>
 800b620:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b622:	2b00      	cmp	r3, #0
 800b624:	f000 80b7 	beq.w	800b796 <_dtoa_r+0x8d6>
 800b628:	b18c      	cbz	r4, 800b64e <_dtoa_r+0x78e>
 800b62a:	4629      	mov	r1, r5
 800b62c:	4622      	mov	r2, r4
 800b62e:	4658      	mov	r0, fp
 800b630:	f000 fcbe 	bl	800bfb0 <__pow5mult>
 800b634:	464a      	mov	r2, r9
 800b636:	4601      	mov	r1, r0
 800b638:	4605      	mov	r5, r0
 800b63a:	4658      	mov	r0, fp
 800b63c:	f000 fc10 	bl	800be60 <__multiply>
 800b640:	4649      	mov	r1, r9
 800b642:	9004      	str	r0, [sp, #16]
 800b644:	4658      	mov	r0, fp
 800b646:	f000 fb41 	bl	800bccc <_Bfree>
 800b64a:	9b04      	ldr	r3, [sp, #16]
 800b64c:	4699      	mov	r9, r3
 800b64e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b650:	1b1a      	subs	r2, r3, r4
 800b652:	d004      	beq.n	800b65e <_dtoa_r+0x79e>
 800b654:	4649      	mov	r1, r9
 800b656:	4658      	mov	r0, fp
 800b658:	f000 fcaa 	bl	800bfb0 <__pow5mult>
 800b65c:	4681      	mov	r9, r0
 800b65e:	2101      	movs	r1, #1
 800b660:	4658      	mov	r0, fp
 800b662:	f000 fbe7 	bl	800be34 <__i2b>
 800b666:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b668:	4604      	mov	r4, r0
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	f000 81c9 	beq.w	800ba02 <_dtoa_r+0xb42>
 800b670:	461a      	mov	r2, r3
 800b672:	4601      	mov	r1, r0
 800b674:	4658      	mov	r0, fp
 800b676:	f000 fc9b 	bl	800bfb0 <__pow5mult>
 800b67a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b67c:	4604      	mov	r4, r0
 800b67e:	2b01      	cmp	r3, #1
 800b680:	f300 808f 	bgt.w	800b7a2 <_dtoa_r+0x8e2>
 800b684:	9b02      	ldr	r3, [sp, #8]
 800b686:	2b00      	cmp	r3, #0
 800b688:	f040 8087 	bne.w	800b79a <_dtoa_r+0x8da>
 800b68c:	9b03      	ldr	r3, [sp, #12]
 800b68e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b692:	2b00      	cmp	r3, #0
 800b694:	f040 8083 	bne.w	800b79e <_dtoa_r+0x8de>
 800b698:	9b03      	ldr	r3, [sp, #12]
 800b69a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b69e:	0d1b      	lsrs	r3, r3, #20
 800b6a0:	051b      	lsls	r3, r3, #20
 800b6a2:	b12b      	cbz	r3, 800b6b0 <_dtoa_r+0x7f0>
 800b6a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6a6:	f108 0801 	add.w	r8, r8, #1
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b6b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	f000 81aa 	beq.w	800ba0e <_dtoa_r+0xb4e>
 800b6ba:	6923      	ldr	r3, [r4, #16]
 800b6bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b6c0:	6918      	ldr	r0, [r3, #16]
 800b6c2:	f000 fb6b 	bl	800bd9c <__hi0bits>
 800b6c6:	f1c0 0020 	rsb	r0, r0, #32
 800b6ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6cc:	4418      	add	r0, r3
 800b6ce:	f010 001f 	ands.w	r0, r0, #31
 800b6d2:	d071      	beq.n	800b7b8 <_dtoa_r+0x8f8>
 800b6d4:	f1c0 0320 	rsb	r3, r0, #32
 800b6d8:	2b04      	cmp	r3, #4
 800b6da:	dd65      	ble.n	800b7a8 <_dtoa_r+0x8e8>
 800b6dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6de:	f1c0 001c 	rsb	r0, r0, #28
 800b6e2:	4403      	add	r3, r0
 800b6e4:	4480      	add	r8, r0
 800b6e6:	4406      	add	r6, r0
 800b6e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6ea:	f1b8 0f00 	cmp.w	r8, #0
 800b6ee:	dd05      	ble.n	800b6fc <_dtoa_r+0x83c>
 800b6f0:	4649      	mov	r1, r9
 800b6f2:	4642      	mov	r2, r8
 800b6f4:	4658      	mov	r0, fp
 800b6f6:	f000 fcb5 	bl	800c064 <__lshift>
 800b6fa:	4681      	mov	r9, r0
 800b6fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	dd05      	ble.n	800b70e <_dtoa_r+0x84e>
 800b702:	4621      	mov	r1, r4
 800b704:	461a      	mov	r2, r3
 800b706:	4658      	mov	r0, fp
 800b708:	f000 fcac 	bl	800c064 <__lshift>
 800b70c:	4604      	mov	r4, r0
 800b70e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b710:	2b00      	cmp	r3, #0
 800b712:	d053      	beq.n	800b7bc <_dtoa_r+0x8fc>
 800b714:	4621      	mov	r1, r4
 800b716:	4648      	mov	r0, r9
 800b718:	f000 fd10 	bl	800c13c <__mcmp>
 800b71c:	2800      	cmp	r0, #0
 800b71e:	da4d      	bge.n	800b7bc <_dtoa_r+0x8fc>
 800b720:	1e7b      	subs	r3, r7, #1
 800b722:	4649      	mov	r1, r9
 800b724:	9304      	str	r3, [sp, #16]
 800b726:	220a      	movs	r2, #10
 800b728:	2300      	movs	r3, #0
 800b72a:	4658      	mov	r0, fp
 800b72c:	f000 faf0 	bl	800bd10 <__multadd>
 800b730:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b732:	4681      	mov	r9, r0
 800b734:	2b00      	cmp	r3, #0
 800b736:	f000 816c 	beq.w	800ba12 <_dtoa_r+0xb52>
 800b73a:	2300      	movs	r3, #0
 800b73c:	4629      	mov	r1, r5
 800b73e:	220a      	movs	r2, #10
 800b740:	4658      	mov	r0, fp
 800b742:	f000 fae5 	bl	800bd10 <__multadd>
 800b746:	9b08      	ldr	r3, [sp, #32]
 800b748:	4605      	mov	r5, r0
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	dc61      	bgt.n	800b812 <_dtoa_r+0x952>
 800b74e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b750:	2b02      	cmp	r3, #2
 800b752:	dc3b      	bgt.n	800b7cc <_dtoa_r+0x90c>
 800b754:	e05d      	b.n	800b812 <_dtoa_r+0x952>
 800b756:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b758:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b75c:	e746      	b.n	800b5ec <_dtoa_r+0x72c>
 800b75e:	9b07      	ldr	r3, [sp, #28]
 800b760:	1e5c      	subs	r4, r3, #1
 800b762:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b764:	42a3      	cmp	r3, r4
 800b766:	bfbf      	itttt	lt
 800b768:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b76a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800b76c:	1ae3      	sublt	r3, r4, r3
 800b76e:	18d2      	addlt	r2, r2, r3
 800b770:	bfa8      	it	ge
 800b772:	1b1c      	subge	r4, r3, r4
 800b774:	9b07      	ldr	r3, [sp, #28]
 800b776:	bfbe      	ittt	lt
 800b778:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b77a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800b77c:	2400      	movlt	r4, #0
 800b77e:	2b00      	cmp	r3, #0
 800b780:	bfb5      	itete	lt
 800b782:	eba8 0603 	sublt.w	r6, r8, r3
 800b786:	4646      	movge	r6, r8
 800b788:	2300      	movlt	r3, #0
 800b78a:	9b07      	ldrge	r3, [sp, #28]
 800b78c:	e730      	b.n	800b5f0 <_dtoa_r+0x730>
 800b78e:	4646      	mov	r6, r8
 800b790:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b792:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b794:	e735      	b.n	800b602 <_dtoa_r+0x742>
 800b796:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b798:	e75c      	b.n	800b654 <_dtoa_r+0x794>
 800b79a:	2300      	movs	r3, #0
 800b79c:	e788      	b.n	800b6b0 <_dtoa_r+0x7f0>
 800b79e:	9b02      	ldr	r3, [sp, #8]
 800b7a0:	e786      	b.n	800b6b0 <_dtoa_r+0x7f0>
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7a6:	e788      	b.n	800b6ba <_dtoa_r+0x7fa>
 800b7a8:	d09f      	beq.n	800b6ea <_dtoa_r+0x82a>
 800b7aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7ac:	331c      	adds	r3, #28
 800b7ae:	441a      	add	r2, r3
 800b7b0:	4498      	add	r8, r3
 800b7b2:	441e      	add	r6, r3
 800b7b4:	9209      	str	r2, [sp, #36]	@ 0x24
 800b7b6:	e798      	b.n	800b6ea <_dtoa_r+0x82a>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	e7f6      	b.n	800b7aa <_dtoa_r+0x8ea>
 800b7bc:	9b07      	ldr	r3, [sp, #28]
 800b7be:	9704      	str	r7, [sp, #16]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	dc20      	bgt.n	800b806 <_dtoa_r+0x946>
 800b7c4:	9308      	str	r3, [sp, #32]
 800b7c6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b7c8:	2b02      	cmp	r3, #2
 800b7ca:	dd1e      	ble.n	800b80a <_dtoa_r+0x94a>
 800b7cc:	9b08      	ldr	r3, [sp, #32]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	f47f aebc 	bne.w	800b54c <_dtoa_r+0x68c>
 800b7d4:	4621      	mov	r1, r4
 800b7d6:	2205      	movs	r2, #5
 800b7d8:	4658      	mov	r0, fp
 800b7da:	f000 fa99 	bl	800bd10 <__multadd>
 800b7de:	4601      	mov	r1, r0
 800b7e0:	4604      	mov	r4, r0
 800b7e2:	4648      	mov	r0, r9
 800b7e4:	f000 fcaa 	bl	800c13c <__mcmp>
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	f77f aeaf 	ble.w	800b54c <_dtoa_r+0x68c>
 800b7ee:	2331      	movs	r3, #49	@ 0x31
 800b7f0:	4656      	mov	r6, sl
 800b7f2:	f806 3b01 	strb.w	r3, [r6], #1
 800b7f6:	9b04      	ldr	r3, [sp, #16]
 800b7f8:	3301      	adds	r3, #1
 800b7fa:	9304      	str	r3, [sp, #16]
 800b7fc:	e6aa      	b.n	800b554 <_dtoa_r+0x694>
 800b7fe:	9c07      	ldr	r4, [sp, #28]
 800b800:	9704      	str	r7, [sp, #16]
 800b802:	4625      	mov	r5, r4
 800b804:	e7f3      	b.n	800b7ee <_dtoa_r+0x92e>
 800b806:	9b07      	ldr	r3, [sp, #28]
 800b808:	9308      	str	r3, [sp, #32]
 800b80a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	f000 8104 	beq.w	800ba1a <_dtoa_r+0xb5a>
 800b812:	2e00      	cmp	r6, #0
 800b814:	dd05      	ble.n	800b822 <_dtoa_r+0x962>
 800b816:	4629      	mov	r1, r5
 800b818:	4632      	mov	r2, r6
 800b81a:	4658      	mov	r0, fp
 800b81c:	f000 fc22 	bl	800c064 <__lshift>
 800b820:	4605      	mov	r5, r0
 800b822:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b824:	2b00      	cmp	r3, #0
 800b826:	d05a      	beq.n	800b8de <_dtoa_r+0xa1e>
 800b828:	4658      	mov	r0, fp
 800b82a:	6869      	ldr	r1, [r5, #4]
 800b82c:	f000 fa0e 	bl	800bc4c <_Balloc>
 800b830:	4606      	mov	r6, r0
 800b832:	b928      	cbnz	r0, 800b840 <_dtoa_r+0x980>
 800b834:	4602      	mov	r2, r0
 800b836:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b83a:	4b83      	ldr	r3, [pc, #524]	@ (800ba48 <_dtoa_r+0xb88>)
 800b83c:	f7ff bb54 	b.w	800aee8 <_dtoa_r+0x28>
 800b840:	692a      	ldr	r2, [r5, #16]
 800b842:	f105 010c 	add.w	r1, r5, #12
 800b846:	3202      	adds	r2, #2
 800b848:	0092      	lsls	r2, r2, #2
 800b84a:	300c      	adds	r0, #12
 800b84c:	f001 f96c 	bl	800cb28 <memcpy>
 800b850:	2201      	movs	r2, #1
 800b852:	4631      	mov	r1, r6
 800b854:	4658      	mov	r0, fp
 800b856:	f000 fc05 	bl	800c064 <__lshift>
 800b85a:	462f      	mov	r7, r5
 800b85c:	4605      	mov	r5, r0
 800b85e:	f10a 0301 	add.w	r3, sl, #1
 800b862:	9307      	str	r3, [sp, #28]
 800b864:	9b08      	ldr	r3, [sp, #32]
 800b866:	4453      	add	r3, sl
 800b868:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b86a:	9b02      	ldr	r3, [sp, #8]
 800b86c:	f003 0301 	and.w	r3, r3, #1
 800b870:	930a      	str	r3, [sp, #40]	@ 0x28
 800b872:	9b07      	ldr	r3, [sp, #28]
 800b874:	4621      	mov	r1, r4
 800b876:	3b01      	subs	r3, #1
 800b878:	4648      	mov	r0, r9
 800b87a:	9302      	str	r3, [sp, #8]
 800b87c:	f7ff fa95 	bl	800adaa <quorem>
 800b880:	4639      	mov	r1, r7
 800b882:	9008      	str	r0, [sp, #32]
 800b884:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b888:	4648      	mov	r0, r9
 800b88a:	f000 fc57 	bl	800c13c <__mcmp>
 800b88e:	462a      	mov	r2, r5
 800b890:	9009      	str	r0, [sp, #36]	@ 0x24
 800b892:	4621      	mov	r1, r4
 800b894:	4658      	mov	r0, fp
 800b896:	f000 fc6d 	bl	800c174 <__mdiff>
 800b89a:	68c2      	ldr	r2, [r0, #12]
 800b89c:	4606      	mov	r6, r0
 800b89e:	bb02      	cbnz	r2, 800b8e2 <_dtoa_r+0xa22>
 800b8a0:	4601      	mov	r1, r0
 800b8a2:	4648      	mov	r0, r9
 800b8a4:	f000 fc4a 	bl	800c13c <__mcmp>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	4631      	mov	r1, r6
 800b8ac:	4658      	mov	r0, fp
 800b8ae:	920c      	str	r2, [sp, #48]	@ 0x30
 800b8b0:	f000 fa0c 	bl	800bccc <_Bfree>
 800b8b4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b8b6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b8b8:	9e07      	ldr	r6, [sp, #28]
 800b8ba:	ea43 0102 	orr.w	r1, r3, r2
 800b8be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8c0:	4319      	orrs	r1, r3
 800b8c2:	d110      	bne.n	800b8e6 <_dtoa_r+0xa26>
 800b8c4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b8c8:	d029      	beq.n	800b91e <_dtoa_r+0xa5e>
 800b8ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	dd02      	ble.n	800b8d6 <_dtoa_r+0xa16>
 800b8d0:	9b08      	ldr	r3, [sp, #32]
 800b8d2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b8d6:	9b02      	ldr	r3, [sp, #8]
 800b8d8:	f883 8000 	strb.w	r8, [r3]
 800b8dc:	e63b      	b.n	800b556 <_dtoa_r+0x696>
 800b8de:	4628      	mov	r0, r5
 800b8e0:	e7bb      	b.n	800b85a <_dtoa_r+0x99a>
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	e7e1      	b.n	800b8aa <_dtoa_r+0x9ea>
 800b8e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	db04      	blt.n	800b8f6 <_dtoa_r+0xa36>
 800b8ec:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800b8ee:	430b      	orrs	r3, r1
 800b8f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b8f2:	430b      	orrs	r3, r1
 800b8f4:	d120      	bne.n	800b938 <_dtoa_r+0xa78>
 800b8f6:	2a00      	cmp	r2, #0
 800b8f8:	dded      	ble.n	800b8d6 <_dtoa_r+0xa16>
 800b8fa:	4649      	mov	r1, r9
 800b8fc:	2201      	movs	r2, #1
 800b8fe:	4658      	mov	r0, fp
 800b900:	f000 fbb0 	bl	800c064 <__lshift>
 800b904:	4621      	mov	r1, r4
 800b906:	4681      	mov	r9, r0
 800b908:	f000 fc18 	bl	800c13c <__mcmp>
 800b90c:	2800      	cmp	r0, #0
 800b90e:	dc03      	bgt.n	800b918 <_dtoa_r+0xa58>
 800b910:	d1e1      	bne.n	800b8d6 <_dtoa_r+0xa16>
 800b912:	f018 0f01 	tst.w	r8, #1
 800b916:	d0de      	beq.n	800b8d6 <_dtoa_r+0xa16>
 800b918:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b91c:	d1d8      	bne.n	800b8d0 <_dtoa_r+0xa10>
 800b91e:	2339      	movs	r3, #57	@ 0x39
 800b920:	9a02      	ldr	r2, [sp, #8]
 800b922:	7013      	strb	r3, [r2, #0]
 800b924:	4633      	mov	r3, r6
 800b926:	461e      	mov	r6, r3
 800b928:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b92c:	3b01      	subs	r3, #1
 800b92e:	2a39      	cmp	r2, #57	@ 0x39
 800b930:	d052      	beq.n	800b9d8 <_dtoa_r+0xb18>
 800b932:	3201      	adds	r2, #1
 800b934:	701a      	strb	r2, [r3, #0]
 800b936:	e60e      	b.n	800b556 <_dtoa_r+0x696>
 800b938:	2a00      	cmp	r2, #0
 800b93a:	dd07      	ble.n	800b94c <_dtoa_r+0xa8c>
 800b93c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b940:	d0ed      	beq.n	800b91e <_dtoa_r+0xa5e>
 800b942:	9a02      	ldr	r2, [sp, #8]
 800b944:	f108 0301 	add.w	r3, r8, #1
 800b948:	7013      	strb	r3, [r2, #0]
 800b94a:	e604      	b.n	800b556 <_dtoa_r+0x696>
 800b94c:	9b07      	ldr	r3, [sp, #28]
 800b94e:	9a07      	ldr	r2, [sp, #28]
 800b950:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b954:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b956:	4293      	cmp	r3, r2
 800b958:	d028      	beq.n	800b9ac <_dtoa_r+0xaec>
 800b95a:	4649      	mov	r1, r9
 800b95c:	2300      	movs	r3, #0
 800b95e:	220a      	movs	r2, #10
 800b960:	4658      	mov	r0, fp
 800b962:	f000 f9d5 	bl	800bd10 <__multadd>
 800b966:	42af      	cmp	r7, r5
 800b968:	4681      	mov	r9, r0
 800b96a:	f04f 0300 	mov.w	r3, #0
 800b96e:	f04f 020a 	mov.w	r2, #10
 800b972:	4639      	mov	r1, r7
 800b974:	4658      	mov	r0, fp
 800b976:	d107      	bne.n	800b988 <_dtoa_r+0xac8>
 800b978:	f000 f9ca 	bl	800bd10 <__multadd>
 800b97c:	4607      	mov	r7, r0
 800b97e:	4605      	mov	r5, r0
 800b980:	9b07      	ldr	r3, [sp, #28]
 800b982:	3301      	adds	r3, #1
 800b984:	9307      	str	r3, [sp, #28]
 800b986:	e774      	b.n	800b872 <_dtoa_r+0x9b2>
 800b988:	f000 f9c2 	bl	800bd10 <__multadd>
 800b98c:	4629      	mov	r1, r5
 800b98e:	4607      	mov	r7, r0
 800b990:	2300      	movs	r3, #0
 800b992:	220a      	movs	r2, #10
 800b994:	4658      	mov	r0, fp
 800b996:	f000 f9bb 	bl	800bd10 <__multadd>
 800b99a:	4605      	mov	r5, r0
 800b99c:	e7f0      	b.n	800b980 <_dtoa_r+0xac0>
 800b99e:	9b08      	ldr	r3, [sp, #32]
 800b9a0:	2700      	movs	r7, #0
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	bfcc      	ite	gt
 800b9a6:	461e      	movgt	r6, r3
 800b9a8:	2601      	movle	r6, #1
 800b9aa:	4456      	add	r6, sl
 800b9ac:	4649      	mov	r1, r9
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	4658      	mov	r0, fp
 800b9b2:	f000 fb57 	bl	800c064 <__lshift>
 800b9b6:	4621      	mov	r1, r4
 800b9b8:	4681      	mov	r9, r0
 800b9ba:	f000 fbbf 	bl	800c13c <__mcmp>
 800b9be:	2800      	cmp	r0, #0
 800b9c0:	dcb0      	bgt.n	800b924 <_dtoa_r+0xa64>
 800b9c2:	d102      	bne.n	800b9ca <_dtoa_r+0xb0a>
 800b9c4:	f018 0f01 	tst.w	r8, #1
 800b9c8:	d1ac      	bne.n	800b924 <_dtoa_r+0xa64>
 800b9ca:	4633      	mov	r3, r6
 800b9cc:	461e      	mov	r6, r3
 800b9ce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9d2:	2a30      	cmp	r2, #48	@ 0x30
 800b9d4:	d0fa      	beq.n	800b9cc <_dtoa_r+0xb0c>
 800b9d6:	e5be      	b.n	800b556 <_dtoa_r+0x696>
 800b9d8:	459a      	cmp	sl, r3
 800b9da:	d1a4      	bne.n	800b926 <_dtoa_r+0xa66>
 800b9dc:	9b04      	ldr	r3, [sp, #16]
 800b9de:	3301      	adds	r3, #1
 800b9e0:	9304      	str	r3, [sp, #16]
 800b9e2:	2331      	movs	r3, #49	@ 0x31
 800b9e4:	f88a 3000 	strb.w	r3, [sl]
 800b9e8:	e5b5      	b.n	800b556 <_dtoa_r+0x696>
 800b9ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b9ec:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ba4c <_dtoa_r+0xb8c>
 800b9f0:	b11b      	cbz	r3, 800b9fa <_dtoa_r+0xb3a>
 800b9f2:	f10a 0308 	add.w	r3, sl, #8
 800b9f6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b9f8:	6013      	str	r3, [r2, #0]
 800b9fa:	4650      	mov	r0, sl
 800b9fc:	b017      	add	sp, #92	@ 0x5c
 800b9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba02:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	f77f ae3d 	ble.w	800b684 <_dtoa_r+0x7c4>
 800ba0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba0c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba0e:	2001      	movs	r0, #1
 800ba10:	e65b      	b.n	800b6ca <_dtoa_r+0x80a>
 800ba12:	9b08      	ldr	r3, [sp, #32]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	f77f aed6 	ble.w	800b7c6 <_dtoa_r+0x906>
 800ba1a:	4656      	mov	r6, sl
 800ba1c:	4621      	mov	r1, r4
 800ba1e:	4648      	mov	r0, r9
 800ba20:	f7ff f9c3 	bl	800adaa <quorem>
 800ba24:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ba28:	9b08      	ldr	r3, [sp, #32]
 800ba2a:	f806 8b01 	strb.w	r8, [r6], #1
 800ba2e:	eba6 020a 	sub.w	r2, r6, sl
 800ba32:	4293      	cmp	r3, r2
 800ba34:	ddb3      	ble.n	800b99e <_dtoa_r+0xade>
 800ba36:	4649      	mov	r1, r9
 800ba38:	2300      	movs	r3, #0
 800ba3a:	220a      	movs	r2, #10
 800ba3c:	4658      	mov	r0, fp
 800ba3e:	f000 f967 	bl	800bd10 <__multadd>
 800ba42:	4681      	mov	r9, r0
 800ba44:	e7ea      	b.n	800ba1c <_dtoa_r+0xb5c>
 800ba46:	bf00      	nop
 800ba48:	0800dd20 	.word	0x0800dd20
 800ba4c:	0800dca4 	.word	0x0800dca4

0800ba50 <_free_r>:
 800ba50:	b538      	push	{r3, r4, r5, lr}
 800ba52:	4605      	mov	r5, r0
 800ba54:	2900      	cmp	r1, #0
 800ba56:	d040      	beq.n	800bada <_free_r+0x8a>
 800ba58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba5c:	1f0c      	subs	r4, r1, #4
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	bfb8      	it	lt
 800ba62:	18e4      	addlt	r4, r4, r3
 800ba64:	f000 f8e6 	bl	800bc34 <__malloc_lock>
 800ba68:	4a1c      	ldr	r2, [pc, #112]	@ (800badc <_free_r+0x8c>)
 800ba6a:	6813      	ldr	r3, [r2, #0]
 800ba6c:	b933      	cbnz	r3, 800ba7c <_free_r+0x2c>
 800ba6e:	6063      	str	r3, [r4, #4]
 800ba70:	6014      	str	r4, [r2, #0]
 800ba72:	4628      	mov	r0, r5
 800ba74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba78:	f000 b8e2 	b.w	800bc40 <__malloc_unlock>
 800ba7c:	42a3      	cmp	r3, r4
 800ba7e:	d908      	bls.n	800ba92 <_free_r+0x42>
 800ba80:	6820      	ldr	r0, [r4, #0]
 800ba82:	1821      	adds	r1, r4, r0
 800ba84:	428b      	cmp	r3, r1
 800ba86:	bf01      	itttt	eq
 800ba88:	6819      	ldreq	r1, [r3, #0]
 800ba8a:	685b      	ldreq	r3, [r3, #4]
 800ba8c:	1809      	addeq	r1, r1, r0
 800ba8e:	6021      	streq	r1, [r4, #0]
 800ba90:	e7ed      	b.n	800ba6e <_free_r+0x1e>
 800ba92:	461a      	mov	r2, r3
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	b10b      	cbz	r3, 800ba9c <_free_r+0x4c>
 800ba98:	42a3      	cmp	r3, r4
 800ba9a:	d9fa      	bls.n	800ba92 <_free_r+0x42>
 800ba9c:	6811      	ldr	r1, [r2, #0]
 800ba9e:	1850      	adds	r0, r2, r1
 800baa0:	42a0      	cmp	r0, r4
 800baa2:	d10b      	bne.n	800babc <_free_r+0x6c>
 800baa4:	6820      	ldr	r0, [r4, #0]
 800baa6:	4401      	add	r1, r0
 800baa8:	1850      	adds	r0, r2, r1
 800baaa:	4283      	cmp	r3, r0
 800baac:	6011      	str	r1, [r2, #0]
 800baae:	d1e0      	bne.n	800ba72 <_free_r+0x22>
 800bab0:	6818      	ldr	r0, [r3, #0]
 800bab2:	685b      	ldr	r3, [r3, #4]
 800bab4:	4408      	add	r0, r1
 800bab6:	6010      	str	r0, [r2, #0]
 800bab8:	6053      	str	r3, [r2, #4]
 800baba:	e7da      	b.n	800ba72 <_free_r+0x22>
 800babc:	d902      	bls.n	800bac4 <_free_r+0x74>
 800babe:	230c      	movs	r3, #12
 800bac0:	602b      	str	r3, [r5, #0]
 800bac2:	e7d6      	b.n	800ba72 <_free_r+0x22>
 800bac4:	6820      	ldr	r0, [r4, #0]
 800bac6:	1821      	adds	r1, r4, r0
 800bac8:	428b      	cmp	r3, r1
 800baca:	bf01      	itttt	eq
 800bacc:	6819      	ldreq	r1, [r3, #0]
 800bace:	685b      	ldreq	r3, [r3, #4]
 800bad0:	1809      	addeq	r1, r1, r0
 800bad2:	6021      	streq	r1, [r4, #0]
 800bad4:	6063      	str	r3, [r4, #4]
 800bad6:	6054      	str	r4, [r2, #4]
 800bad8:	e7cb      	b.n	800ba72 <_free_r+0x22>
 800bada:	bd38      	pop	{r3, r4, r5, pc}
 800badc:	200006b4 	.word	0x200006b4

0800bae0 <malloc>:
 800bae0:	4b02      	ldr	r3, [pc, #8]	@ (800baec <malloc+0xc>)
 800bae2:	4601      	mov	r1, r0
 800bae4:	6818      	ldr	r0, [r3, #0]
 800bae6:	f000 b825 	b.w	800bb34 <_malloc_r>
 800baea:	bf00      	nop
 800baec:	200000e0 	.word	0x200000e0

0800baf0 <sbrk_aligned>:
 800baf0:	b570      	push	{r4, r5, r6, lr}
 800baf2:	4e0f      	ldr	r6, [pc, #60]	@ (800bb30 <sbrk_aligned+0x40>)
 800baf4:	460c      	mov	r4, r1
 800baf6:	6831      	ldr	r1, [r6, #0]
 800baf8:	4605      	mov	r5, r0
 800bafa:	b911      	cbnz	r1, 800bb02 <sbrk_aligned+0x12>
 800bafc:	f001 f804 	bl	800cb08 <_sbrk_r>
 800bb00:	6030      	str	r0, [r6, #0]
 800bb02:	4621      	mov	r1, r4
 800bb04:	4628      	mov	r0, r5
 800bb06:	f000 ffff 	bl	800cb08 <_sbrk_r>
 800bb0a:	1c43      	adds	r3, r0, #1
 800bb0c:	d103      	bne.n	800bb16 <sbrk_aligned+0x26>
 800bb0e:	f04f 34ff 	mov.w	r4, #4294967295
 800bb12:	4620      	mov	r0, r4
 800bb14:	bd70      	pop	{r4, r5, r6, pc}
 800bb16:	1cc4      	adds	r4, r0, #3
 800bb18:	f024 0403 	bic.w	r4, r4, #3
 800bb1c:	42a0      	cmp	r0, r4
 800bb1e:	d0f8      	beq.n	800bb12 <sbrk_aligned+0x22>
 800bb20:	1a21      	subs	r1, r4, r0
 800bb22:	4628      	mov	r0, r5
 800bb24:	f000 fff0 	bl	800cb08 <_sbrk_r>
 800bb28:	3001      	adds	r0, #1
 800bb2a:	d1f2      	bne.n	800bb12 <sbrk_aligned+0x22>
 800bb2c:	e7ef      	b.n	800bb0e <sbrk_aligned+0x1e>
 800bb2e:	bf00      	nop
 800bb30:	200006b0 	.word	0x200006b0

0800bb34 <_malloc_r>:
 800bb34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb38:	1ccd      	adds	r5, r1, #3
 800bb3a:	f025 0503 	bic.w	r5, r5, #3
 800bb3e:	3508      	adds	r5, #8
 800bb40:	2d0c      	cmp	r5, #12
 800bb42:	bf38      	it	cc
 800bb44:	250c      	movcc	r5, #12
 800bb46:	2d00      	cmp	r5, #0
 800bb48:	4606      	mov	r6, r0
 800bb4a:	db01      	blt.n	800bb50 <_malloc_r+0x1c>
 800bb4c:	42a9      	cmp	r1, r5
 800bb4e:	d904      	bls.n	800bb5a <_malloc_r+0x26>
 800bb50:	230c      	movs	r3, #12
 800bb52:	6033      	str	r3, [r6, #0]
 800bb54:	2000      	movs	r0, #0
 800bb56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bc30 <_malloc_r+0xfc>
 800bb5e:	f000 f869 	bl	800bc34 <__malloc_lock>
 800bb62:	f8d8 3000 	ldr.w	r3, [r8]
 800bb66:	461c      	mov	r4, r3
 800bb68:	bb44      	cbnz	r4, 800bbbc <_malloc_r+0x88>
 800bb6a:	4629      	mov	r1, r5
 800bb6c:	4630      	mov	r0, r6
 800bb6e:	f7ff ffbf 	bl	800baf0 <sbrk_aligned>
 800bb72:	1c43      	adds	r3, r0, #1
 800bb74:	4604      	mov	r4, r0
 800bb76:	d158      	bne.n	800bc2a <_malloc_r+0xf6>
 800bb78:	f8d8 4000 	ldr.w	r4, [r8]
 800bb7c:	4627      	mov	r7, r4
 800bb7e:	2f00      	cmp	r7, #0
 800bb80:	d143      	bne.n	800bc0a <_malloc_r+0xd6>
 800bb82:	2c00      	cmp	r4, #0
 800bb84:	d04b      	beq.n	800bc1e <_malloc_r+0xea>
 800bb86:	6823      	ldr	r3, [r4, #0]
 800bb88:	4639      	mov	r1, r7
 800bb8a:	4630      	mov	r0, r6
 800bb8c:	eb04 0903 	add.w	r9, r4, r3
 800bb90:	f000 ffba 	bl	800cb08 <_sbrk_r>
 800bb94:	4581      	cmp	r9, r0
 800bb96:	d142      	bne.n	800bc1e <_malloc_r+0xea>
 800bb98:	6821      	ldr	r1, [r4, #0]
 800bb9a:	4630      	mov	r0, r6
 800bb9c:	1a6d      	subs	r5, r5, r1
 800bb9e:	4629      	mov	r1, r5
 800bba0:	f7ff ffa6 	bl	800baf0 <sbrk_aligned>
 800bba4:	3001      	adds	r0, #1
 800bba6:	d03a      	beq.n	800bc1e <_malloc_r+0xea>
 800bba8:	6823      	ldr	r3, [r4, #0]
 800bbaa:	442b      	add	r3, r5
 800bbac:	6023      	str	r3, [r4, #0]
 800bbae:	f8d8 3000 	ldr.w	r3, [r8]
 800bbb2:	685a      	ldr	r2, [r3, #4]
 800bbb4:	bb62      	cbnz	r2, 800bc10 <_malloc_r+0xdc>
 800bbb6:	f8c8 7000 	str.w	r7, [r8]
 800bbba:	e00f      	b.n	800bbdc <_malloc_r+0xa8>
 800bbbc:	6822      	ldr	r2, [r4, #0]
 800bbbe:	1b52      	subs	r2, r2, r5
 800bbc0:	d420      	bmi.n	800bc04 <_malloc_r+0xd0>
 800bbc2:	2a0b      	cmp	r2, #11
 800bbc4:	d917      	bls.n	800bbf6 <_malloc_r+0xc2>
 800bbc6:	1961      	adds	r1, r4, r5
 800bbc8:	42a3      	cmp	r3, r4
 800bbca:	6025      	str	r5, [r4, #0]
 800bbcc:	bf18      	it	ne
 800bbce:	6059      	strne	r1, [r3, #4]
 800bbd0:	6863      	ldr	r3, [r4, #4]
 800bbd2:	bf08      	it	eq
 800bbd4:	f8c8 1000 	streq.w	r1, [r8]
 800bbd8:	5162      	str	r2, [r4, r5]
 800bbda:	604b      	str	r3, [r1, #4]
 800bbdc:	4630      	mov	r0, r6
 800bbde:	f000 f82f 	bl	800bc40 <__malloc_unlock>
 800bbe2:	f104 000b 	add.w	r0, r4, #11
 800bbe6:	1d23      	adds	r3, r4, #4
 800bbe8:	f020 0007 	bic.w	r0, r0, #7
 800bbec:	1ac2      	subs	r2, r0, r3
 800bbee:	bf1c      	itt	ne
 800bbf0:	1a1b      	subne	r3, r3, r0
 800bbf2:	50a3      	strne	r3, [r4, r2]
 800bbf4:	e7af      	b.n	800bb56 <_malloc_r+0x22>
 800bbf6:	6862      	ldr	r2, [r4, #4]
 800bbf8:	42a3      	cmp	r3, r4
 800bbfa:	bf0c      	ite	eq
 800bbfc:	f8c8 2000 	streq.w	r2, [r8]
 800bc00:	605a      	strne	r2, [r3, #4]
 800bc02:	e7eb      	b.n	800bbdc <_malloc_r+0xa8>
 800bc04:	4623      	mov	r3, r4
 800bc06:	6864      	ldr	r4, [r4, #4]
 800bc08:	e7ae      	b.n	800bb68 <_malloc_r+0x34>
 800bc0a:	463c      	mov	r4, r7
 800bc0c:	687f      	ldr	r7, [r7, #4]
 800bc0e:	e7b6      	b.n	800bb7e <_malloc_r+0x4a>
 800bc10:	461a      	mov	r2, r3
 800bc12:	685b      	ldr	r3, [r3, #4]
 800bc14:	42a3      	cmp	r3, r4
 800bc16:	d1fb      	bne.n	800bc10 <_malloc_r+0xdc>
 800bc18:	2300      	movs	r3, #0
 800bc1a:	6053      	str	r3, [r2, #4]
 800bc1c:	e7de      	b.n	800bbdc <_malloc_r+0xa8>
 800bc1e:	230c      	movs	r3, #12
 800bc20:	4630      	mov	r0, r6
 800bc22:	6033      	str	r3, [r6, #0]
 800bc24:	f000 f80c 	bl	800bc40 <__malloc_unlock>
 800bc28:	e794      	b.n	800bb54 <_malloc_r+0x20>
 800bc2a:	6005      	str	r5, [r0, #0]
 800bc2c:	e7d6      	b.n	800bbdc <_malloc_r+0xa8>
 800bc2e:	bf00      	nop
 800bc30:	200006b4 	.word	0x200006b4

0800bc34 <__malloc_lock>:
 800bc34:	4801      	ldr	r0, [pc, #4]	@ (800bc3c <__malloc_lock+0x8>)
 800bc36:	f7ff b8a8 	b.w	800ad8a <__retarget_lock_acquire_recursive>
 800bc3a:	bf00      	nop
 800bc3c:	200006ac 	.word	0x200006ac

0800bc40 <__malloc_unlock>:
 800bc40:	4801      	ldr	r0, [pc, #4]	@ (800bc48 <__malloc_unlock+0x8>)
 800bc42:	f7ff b8a3 	b.w	800ad8c <__retarget_lock_release_recursive>
 800bc46:	bf00      	nop
 800bc48:	200006ac 	.word	0x200006ac

0800bc4c <_Balloc>:
 800bc4c:	b570      	push	{r4, r5, r6, lr}
 800bc4e:	69c6      	ldr	r6, [r0, #28]
 800bc50:	4604      	mov	r4, r0
 800bc52:	460d      	mov	r5, r1
 800bc54:	b976      	cbnz	r6, 800bc74 <_Balloc+0x28>
 800bc56:	2010      	movs	r0, #16
 800bc58:	f7ff ff42 	bl	800bae0 <malloc>
 800bc5c:	4602      	mov	r2, r0
 800bc5e:	61e0      	str	r0, [r4, #28]
 800bc60:	b920      	cbnz	r0, 800bc6c <_Balloc+0x20>
 800bc62:	216b      	movs	r1, #107	@ 0x6b
 800bc64:	4b17      	ldr	r3, [pc, #92]	@ (800bcc4 <_Balloc+0x78>)
 800bc66:	4818      	ldr	r0, [pc, #96]	@ (800bcc8 <_Balloc+0x7c>)
 800bc68:	f000 ff6c 	bl	800cb44 <__assert_func>
 800bc6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc70:	6006      	str	r6, [r0, #0]
 800bc72:	60c6      	str	r6, [r0, #12]
 800bc74:	69e6      	ldr	r6, [r4, #28]
 800bc76:	68f3      	ldr	r3, [r6, #12]
 800bc78:	b183      	cbz	r3, 800bc9c <_Balloc+0x50>
 800bc7a:	69e3      	ldr	r3, [r4, #28]
 800bc7c:	68db      	ldr	r3, [r3, #12]
 800bc7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bc82:	b9b8      	cbnz	r0, 800bcb4 <_Balloc+0x68>
 800bc84:	2101      	movs	r1, #1
 800bc86:	fa01 f605 	lsl.w	r6, r1, r5
 800bc8a:	1d72      	adds	r2, r6, #5
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	0092      	lsls	r2, r2, #2
 800bc90:	f000 ff76 	bl	800cb80 <_calloc_r>
 800bc94:	b160      	cbz	r0, 800bcb0 <_Balloc+0x64>
 800bc96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bc9a:	e00e      	b.n	800bcba <_Balloc+0x6e>
 800bc9c:	2221      	movs	r2, #33	@ 0x21
 800bc9e:	2104      	movs	r1, #4
 800bca0:	4620      	mov	r0, r4
 800bca2:	f000 ff6d 	bl	800cb80 <_calloc_r>
 800bca6:	69e3      	ldr	r3, [r4, #28]
 800bca8:	60f0      	str	r0, [r6, #12]
 800bcaa:	68db      	ldr	r3, [r3, #12]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d1e4      	bne.n	800bc7a <_Balloc+0x2e>
 800bcb0:	2000      	movs	r0, #0
 800bcb2:	bd70      	pop	{r4, r5, r6, pc}
 800bcb4:	6802      	ldr	r2, [r0, #0]
 800bcb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bcba:	2300      	movs	r3, #0
 800bcbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bcc0:	e7f7      	b.n	800bcb2 <_Balloc+0x66>
 800bcc2:	bf00      	nop
 800bcc4:	0800dcb1 	.word	0x0800dcb1
 800bcc8:	0800dd31 	.word	0x0800dd31

0800bccc <_Bfree>:
 800bccc:	b570      	push	{r4, r5, r6, lr}
 800bcce:	69c6      	ldr	r6, [r0, #28]
 800bcd0:	4605      	mov	r5, r0
 800bcd2:	460c      	mov	r4, r1
 800bcd4:	b976      	cbnz	r6, 800bcf4 <_Bfree+0x28>
 800bcd6:	2010      	movs	r0, #16
 800bcd8:	f7ff ff02 	bl	800bae0 <malloc>
 800bcdc:	4602      	mov	r2, r0
 800bcde:	61e8      	str	r0, [r5, #28]
 800bce0:	b920      	cbnz	r0, 800bcec <_Bfree+0x20>
 800bce2:	218f      	movs	r1, #143	@ 0x8f
 800bce4:	4b08      	ldr	r3, [pc, #32]	@ (800bd08 <_Bfree+0x3c>)
 800bce6:	4809      	ldr	r0, [pc, #36]	@ (800bd0c <_Bfree+0x40>)
 800bce8:	f000 ff2c 	bl	800cb44 <__assert_func>
 800bcec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bcf0:	6006      	str	r6, [r0, #0]
 800bcf2:	60c6      	str	r6, [r0, #12]
 800bcf4:	b13c      	cbz	r4, 800bd06 <_Bfree+0x3a>
 800bcf6:	69eb      	ldr	r3, [r5, #28]
 800bcf8:	6862      	ldr	r2, [r4, #4]
 800bcfa:	68db      	ldr	r3, [r3, #12]
 800bcfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd00:	6021      	str	r1, [r4, #0]
 800bd02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bd06:	bd70      	pop	{r4, r5, r6, pc}
 800bd08:	0800dcb1 	.word	0x0800dcb1
 800bd0c:	0800dd31 	.word	0x0800dd31

0800bd10 <__multadd>:
 800bd10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd14:	4607      	mov	r7, r0
 800bd16:	460c      	mov	r4, r1
 800bd18:	461e      	mov	r6, r3
 800bd1a:	2000      	movs	r0, #0
 800bd1c:	690d      	ldr	r5, [r1, #16]
 800bd1e:	f101 0c14 	add.w	ip, r1, #20
 800bd22:	f8dc 3000 	ldr.w	r3, [ip]
 800bd26:	3001      	adds	r0, #1
 800bd28:	b299      	uxth	r1, r3
 800bd2a:	fb02 6101 	mla	r1, r2, r1, r6
 800bd2e:	0c1e      	lsrs	r6, r3, #16
 800bd30:	0c0b      	lsrs	r3, r1, #16
 800bd32:	fb02 3306 	mla	r3, r2, r6, r3
 800bd36:	b289      	uxth	r1, r1
 800bd38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bd3c:	4285      	cmp	r5, r0
 800bd3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bd42:	f84c 1b04 	str.w	r1, [ip], #4
 800bd46:	dcec      	bgt.n	800bd22 <__multadd+0x12>
 800bd48:	b30e      	cbz	r6, 800bd8e <__multadd+0x7e>
 800bd4a:	68a3      	ldr	r3, [r4, #8]
 800bd4c:	42ab      	cmp	r3, r5
 800bd4e:	dc19      	bgt.n	800bd84 <__multadd+0x74>
 800bd50:	6861      	ldr	r1, [r4, #4]
 800bd52:	4638      	mov	r0, r7
 800bd54:	3101      	adds	r1, #1
 800bd56:	f7ff ff79 	bl	800bc4c <_Balloc>
 800bd5a:	4680      	mov	r8, r0
 800bd5c:	b928      	cbnz	r0, 800bd6a <__multadd+0x5a>
 800bd5e:	4602      	mov	r2, r0
 800bd60:	21ba      	movs	r1, #186	@ 0xba
 800bd62:	4b0c      	ldr	r3, [pc, #48]	@ (800bd94 <__multadd+0x84>)
 800bd64:	480c      	ldr	r0, [pc, #48]	@ (800bd98 <__multadd+0x88>)
 800bd66:	f000 feed 	bl	800cb44 <__assert_func>
 800bd6a:	6922      	ldr	r2, [r4, #16]
 800bd6c:	f104 010c 	add.w	r1, r4, #12
 800bd70:	3202      	adds	r2, #2
 800bd72:	0092      	lsls	r2, r2, #2
 800bd74:	300c      	adds	r0, #12
 800bd76:	f000 fed7 	bl	800cb28 <memcpy>
 800bd7a:	4621      	mov	r1, r4
 800bd7c:	4638      	mov	r0, r7
 800bd7e:	f7ff ffa5 	bl	800bccc <_Bfree>
 800bd82:	4644      	mov	r4, r8
 800bd84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bd88:	3501      	adds	r5, #1
 800bd8a:	615e      	str	r6, [r3, #20]
 800bd8c:	6125      	str	r5, [r4, #16]
 800bd8e:	4620      	mov	r0, r4
 800bd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd94:	0800dd20 	.word	0x0800dd20
 800bd98:	0800dd31 	.word	0x0800dd31

0800bd9c <__hi0bits>:
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bda2:	bf3a      	itte	cc
 800bda4:	0403      	lslcc	r3, r0, #16
 800bda6:	2010      	movcc	r0, #16
 800bda8:	2000      	movcs	r0, #0
 800bdaa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bdae:	bf3c      	itt	cc
 800bdb0:	021b      	lslcc	r3, r3, #8
 800bdb2:	3008      	addcc	r0, #8
 800bdb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bdb8:	bf3c      	itt	cc
 800bdba:	011b      	lslcc	r3, r3, #4
 800bdbc:	3004      	addcc	r0, #4
 800bdbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bdc2:	bf3c      	itt	cc
 800bdc4:	009b      	lslcc	r3, r3, #2
 800bdc6:	3002      	addcc	r0, #2
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	db05      	blt.n	800bdd8 <__hi0bits+0x3c>
 800bdcc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bdd0:	f100 0001 	add.w	r0, r0, #1
 800bdd4:	bf08      	it	eq
 800bdd6:	2020      	moveq	r0, #32
 800bdd8:	4770      	bx	lr

0800bdda <__lo0bits>:
 800bdda:	6803      	ldr	r3, [r0, #0]
 800bddc:	4602      	mov	r2, r0
 800bdde:	f013 0007 	ands.w	r0, r3, #7
 800bde2:	d00b      	beq.n	800bdfc <__lo0bits+0x22>
 800bde4:	07d9      	lsls	r1, r3, #31
 800bde6:	d421      	bmi.n	800be2c <__lo0bits+0x52>
 800bde8:	0798      	lsls	r0, r3, #30
 800bdea:	bf49      	itett	mi
 800bdec:	085b      	lsrmi	r3, r3, #1
 800bdee:	089b      	lsrpl	r3, r3, #2
 800bdf0:	2001      	movmi	r0, #1
 800bdf2:	6013      	strmi	r3, [r2, #0]
 800bdf4:	bf5c      	itt	pl
 800bdf6:	2002      	movpl	r0, #2
 800bdf8:	6013      	strpl	r3, [r2, #0]
 800bdfa:	4770      	bx	lr
 800bdfc:	b299      	uxth	r1, r3
 800bdfe:	b909      	cbnz	r1, 800be04 <__lo0bits+0x2a>
 800be00:	2010      	movs	r0, #16
 800be02:	0c1b      	lsrs	r3, r3, #16
 800be04:	b2d9      	uxtb	r1, r3
 800be06:	b909      	cbnz	r1, 800be0c <__lo0bits+0x32>
 800be08:	3008      	adds	r0, #8
 800be0a:	0a1b      	lsrs	r3, r3, #8
 800be0c:	0719      	lsls	r1, r3, #28
 800be0e:	bf04      	itt	eq
 800be10:	091b      	lsreq	r3, r3, #4
 800be12:	3004      	addeq	r0, #4
 800be14:	0799      	lsls	r1, r3, #30
 800be16:	bf04      	itt	eq
 800be18:	089b      	lsreq	r3, r3, #2
 800be1a:	3002      	addeq	r0, #2
 800be1c:	07d9      	lsls	r1, r3, #31
 800be1e:	d403      	bmi.n	800be28 <__lo0bits+0x4e>
 800be20:	085b      	lsrs	r3, r3, #1
 800be22:	f100 0001 	add.w	r0, r0, #1
 800be26:	d003      	beq.n	800be30 <__lo0bits+0x56>
 800be28:	6013      	str	r3, [r2, #0]
 800be2a:	4770      	bx	lr
 800be2c:	2000      	movs	r0, #0
 800be2e:	4770      	bx	lr
 800be30:	2020      	movs	r0, #32
 800be32:	4770      	bx	lr

0800be34 <__i2b>:
 800be34:	b510      	push	{r4, lr}
 800be36:	460c      	mov	r4, r1
 800be38:	2101      	movs	r1, #1
 800be3a:	f7ff ff07 	bl	800bc4c <_Balloc>
 800be3e:	4602      	mov	r2, r0
 800be40:	b928      	cbnz	r0, 800be4e <__i2b+0x1a>
 800be42:	f240 1145 	movw	r1, #325	@ 0x145
 800be46:	4b04      	ldr	r3, [pc, #16]	@ (800be58 <__i2b+0x24>)
 800be48:	4804      	ldr	r0, [pc, #16]	@ (800be5c <__i2b+0x28>)
 800be4a:	f000 fe7b 	bl	800cb44 <__assert_func>
 800be4e:	2301      	movs	r3, #1
 800be50:	6144      	str	r4, [r0, #20]
 800be52:	6103      	str	r3, [r0, #16]
 800be54:	bd10      	pop	{r4, pc}
 800be56:	bf00      	nop
 800be58:	0800dd20 	.word	0x0800dd20
 800be5c:	0800dd31 	.word	0x0800dd31

0800be60 <__multiply>:
 800be60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be64:	4614      	mov	r4, r2
 800be66:	690a      	ldr	r2, [r1, #16]
 800be68:	6923      	ldr	r3, [r4, #16]
 800be6a:	460f      	mov	r7, r1
 800be6c:	429a      	cmp	r2, r3
 800be6e:	bfa2      	ittt	ge
 800be70:	4623      	movge	r3, r4
 800be72:	460c      	movge	r4, r1
 800be74:	461f      	movge	r7, r3
 800be76:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800be7a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800be7e:	68a3      	ldr	r3, [r4, #8]
 800be80:	6861      	ldr	r1, [r4, #4]
 800be82:	eb0a 0609 	add.w	r6, sl, r9
 800be86:	42b3      	cmp	r3, r6
 800be88:	b085      	sub	sp, #20
 800be8a:	bfb8      	it	lt
 800be8c:	3101      	addlt	r1, #1
 800be8e:	f7ff fedd 	bl	800bc4c <_Balloc>
 800be92:	b930      	cbnz	r0, 800bea2 <__multiply+0x42>
 800be94:	4602      	mov	r2, r0
 800be96:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800be9a:	4b43      	ldr	r3, [pc, #268]	@ (800bfa8 <__multiply+0x148>)
 800be9c:	4843      	ldr	r0, [pc, #268]	@ (800bfac <__multiply+0x14c>)
 800be9e:	f000 fe51 	bl	800cb44 <__assert_func>
 800bea2:	f100 0514 	add.w	r5, r0, #20
 800bea6:	462b      	mov	r3, r5
 800bea8:	2200      	movs	r2, #0
 800beaa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800beae:	4543      	cmp	r3, r8
 800beb0:	d321      	bcc.n	800bef6 <__multiply+0x96>
 800beb2:	f107 0114 	add.w	r1, r7, #20
 800beb6:	f104 0214 	add.w	r2, r4, #20
 800beba:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bebe:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bec2:	9302      	str	r3, [sp, #8]
 800bec4:	1b13      	subs	r3, r2, r4
 800bec6:	3b15      	subs	r3, #21
 800bec8:	f023 0303 	bic.w	r3, r3, #3
 800becc:	3304      	adds	r3, #4
 800bece:	f104 0715 	add.w	r7, r4, #21
 800bed2:	42ba      	cmp	r2, r7
 800bed4:	bf38      	it	cc
 800bed6:	2304      	movcc	r3, #4
 800bed8:	9301      	str	r3, [sp, #4]
 800beda:	9b02      	ldr	r3, [sp, #8]
 800bedc:	9103      	str	r1, [sp, #12]
 800bede:	428b      	cmp	r3, r1
 800bee0:	d80c      	bhi.n	800befc <__multiply+0x9c>
 800bee2:	2e00      	cmp	r6, #0
 800bee4:	dd03      	ble.n	800beee <__multiply+0x8e>
 800bee6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800beea:	2b00      	cmp	r3, #0
 800beec:	d05a      	beq.n	800bfa4 <__multiply+0x144>
 800beee:	6106      	str	r6, [r0, #16]
 800bef0:	b005      	add	sp, #20
 800bef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bef6:	f843 2b04 	str.w	r2, [r3], #4
 800befa:	e7d8      	b.n	800beae <__multiply+0x4e>
 800befc:	f8b1 a000 	ldrh.w	sl, [r1]
 800bf00:	f1ba 0f00 	cmp.w	sl, #0
 800bf04:	d023      	beq.n	800bf4e <__multiply+0xee>
 800bf06:	46a9      	mov	r9, r5
 800bf08:	f04f 0c00 	mov.w	ip, #0
 800bf0c:	f104 0e14 	add.w	lr, r4, #20
 800bf10:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bf14:	f8d9 3000 	ldr.w	r3, [r9]
 800bf18:	fa1f fb87 	uxth.w	fp, r7
 800bf1c:	b29b      	uxth	r3, r3
 800bf1e:	fb0a 330b 	mla	r3, sl, fp, r3
 800bf22:	4463      	add	r3, ip
 800bf24:	f8d9 c000 	ldr.w	ip, [r9]
 800bf28:	0c3f      	lsrs	r7, r7, #16
 800bf2a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800bf2e:	fb0a c707 	mla	r7, sl, r7, ip
 800bf32:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bf3c:	4572      	cmp	r2, lr
 800bf3e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bf42:	f849 3b04 	str.w	r3, [r9], #4
 800bf46:	d8e3      	bhi.n	800bf10 <__multiply+0xb0>
 800bf48:	9b01      	ldr	r3, [sp, #4]
 800bf4a:	f845 c003 	str.w	ip, [r5, r3]
 800bf4e:	9b03      	ldr	r3, [sp, #12]
 800bf50:	3104      	adds	r1, #4
 800bf52:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bf56:	f1b9 0f00 	cmp.w	r9, #0
 800bf5a:	d021      	beq.n	800bfa0 <__multiply+0x140>
 800bf5c:	46ae      	mov	lr, r5
 800bf5e:	f04f 0a00 	mov.w	sl, #0
 800bf62:	682b      	ldr	r3, [r5, #0]
 800bf64:	f104 0c14 	add.w	ip, r4, #20
 800bf68:	f8bc b000 	ldrh.w	fp, [ip]
 800bf6c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	fb09 770b 	mla	r7, r9, fp, r7
 800bf76:	4457      	add	r7, sl
 800bf78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bf7c:	f84e 3b04 	str.w	r3, [lr], #4
 800bf80:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bf84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf88:	f8be 3000 	ldrh.w	r3, [lr]
 800bf8c:	4562      	cmp	r2, ip
 800bf8e:	fb09 330a 	mla	r3, r9, sl, r3
 800bf92:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bf96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf9a:	d8e5      	bhi.n	800bf68 <__multiply+0x108>
 800bf9c:	9f01      	ldr	r7, [sp, #4]
 800bf9e:	51eb      	str	r3, [r5, r7]
 800bfa0:	3504      	adds	r5, #4
 800bfa2:	e79a      	b.n	800beda <__multiply+0x7a>
 800bfa4:	3e01      	subs	r6, #1
 800bfa6:	e79c      	b.n	800bee2 <__multiply+0x82>
 800bfa8:	0800dd20 	.word	0x0800dd20
 800bfac:	0800dd31 	.word	0x0800dd31

0800bfb0 <__pow5mult>:
 800bfb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfb4:	4615      	mov	r5, r2
 800bfb6:	f012 0203 	ands.w	r2, r2, #3
 800bfba:	4607      	mov	r7, r0
 800bfbc:	460e      	mov	r6, r1
 800bfbe:	d007      	beq.n	800bfd0 <__pow5mult+0x20>
 800bfc0:	4c25      	ldr	r4, [pc, #148]	@ (800c058 <__pow5mult+0xa8>)
 800bfc2:	3a01      	subs	r2, #1
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bfca:	f7ff fea1 	bl	800bd10 <__multadd>
 800bfce:	4606      	mov	r6, r0
 800bfd0:	10ad      	asrs	r5, r5, #2
 800bfd2:	d03d      	beq.n	800c050 <__pow5mult+0xa0>
 800bfd4:	69fc      	ldr	r4, [r7, #28]
 800bfd6:	b97c      	cbnz	r4, 800bff8 <__pow5mult+0x48>
 800bfd8:	2010      	movs	r0, #16
 800bfda:	f7ff fd81 	bl	800bae0 <malloc>
 800bfde:	4602      	mov	r2, r0
 800bfe0:	61f8      	str	r0, [r7, #28]
 800bfe2:	b928      	cbnz	r0, 800bff0 <__pow5mult+0x40>
 800bfe4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bfe8:	4b1c      	ldr	r3, [pc, #112]	@ (800c05c <__pow5mult+0xac>)
 800bfea:	481d      	ldr	r0, [pc, #116]	@ (800c060 <__pow5mult+0xb0>)
 800bfec:	f000 fdaa 	bl	800cb44 <__assert_func>
 800bff0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bff4:	6004      	str	r4, [r0, #0]
 800bff6:	60c4      	str	r4, [r0, #12]
 800bff8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bffc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c000:	b94c      	cbnz	r4, 800c016 <__pow5mult+0x66>
 800c002:	f240 2171 	movw	r1, #625	@ 0x271
 800c006:	4638      	mov	r0, r7
 800c008:	f7ff ff14 	bl	800be34 <__i2b>
 800c00c:	2300      	movs	r3, #0
 800c00e:	4604      	mov	r4, r0
 800c010:	f8c8 0008 	str.w	r0, [r8, #8]
 800c014:	6003      	str	r3, [r0, #0]
 800c016:	f04f 0900 	mov.w	r9, #0
 800c01a:	07eb      	lsls	r3, r5, #31
 800c01c:	d50a      	bpl.n	800c034 <__pow5mult+0x84>
 800c01e:	4631      	mov	r1, r6
 800c020:	4622      	mov	r2, r4
 800c022:	4638      	mov	r0, r7
 800c024:	f7ff ff1c 	bl	800be60 <__multiply>
 800c028:	4680      	mov	r8, r0
 800c02a:	4631      	mov	r1, r6
 800c02c:	4638      	mov	r0, r7
 800c02e:	f7ff fe4d 	bl	800bccc <_Bfree>
 800c032:	4646      	mov	r6, r8
 800c034:	106d      	asrs	r5, r5, #1
 800c036:	d00b      	beq.n	800c050 <__pow5mult+0xa0>
 800c038:	6820      	ldr	r0, [r4, #0]
 800c03a:	b938      	cbnz	r0, 800c04c <__pow5mult+0x9c>
 800c03c:	4622      	mov	r2, r4
 800c03e:	4621      	mov	r1, r4
 800c040:	4638      	mov	r0, r7
 800c042:	f7ff ff0d 	bl	800be60 <__multiply>
 800c046:	6020      	str	r0, [r4, #0]
 800c048:	f8c0 9000 	str.w	r9, [r0]
 800c04c:	4604      	mov	r4, r0
 800c04e:	e7e4      	b.n	800c01a <__pow5mult+0x6a>
 800c050:	4630      	mov	r0, r6
 800c052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c056:	bf00      	nop
 800c058:	0800dd8c 	.word	0x0800dd8c
 800c05c:	0800dcb1 	.word	0x0800dcb1
 800c060:	0800dd31 	.word	0x0800dd31

0800c064 <__lshift>:
 800c064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c068:	460c      	mov	r4, r1
 800c06a:	4607      	mov	r7, r0
 800c06c:	4691      	mov	r9, r2
 800c06e:	6923      	ldr	r3, [r4, #16]
 800c070:	6849      	ldr	r1, [r1, #4]
 800c072:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c076:	68a3      	ldr	r3, [r4, #8]
 800c078:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c07c:	f108 0601 	add.w	r6, r8, #1
 800c080:	42b3      	cmp	r3, r6
 800c082:	db0b      	blt.n	800c09c <__lshift+0x38>
 800c084:	4638      	mov	r0, r7
 800c086:	f7ff fde1 	bl	800bc4c <_Balloc>
 800c08a:	4605      	mov	r5, r0
 800c08c:	b948      	cbnz	r0, 800c0a2 <__lshift+0x3e>
 800c08e:	4602      	mov	r2, r0
 800c090:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c094:	4b27      	ldr	r3, [pc, #156]	@ (800c134 <__lshift+0xd0>)
 800c096:	4828      	ldr	r0, [pc, #160]	@ (800c138 <__lshift+0xd4>)
 800c098:	f000 fd54 	bl	800cb44 <__assert_func>
 800c09c:	3101      	adds	r1, #1
 800c09e:	005b      	lsls	r3, r3, #1
 800c0a0:	e7ee      	b.n	800c080 <__lshift+0x1c>
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	f100 0114 	add.w	r1, r0, #20
 800c0a8:	f100 0210 	add.w	r2, r0, #16
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	4553      	cmp	r3, sl
 800c0b0:	db33      	blt.n	800c11a <__lshift+0xb6>
 800c0b2:	6920      	ldr	r0, [r4, #16]
 800c0b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c0b8:	f104 0314 	add.w	r3, r4, #20
 800c0bc:	f019 091f 	ands.w	r9, r9, #31
 800c0c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c0c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c0c8:	d02b      	beq.n	800c122 <__lshift+0xbe>
 800c0ca:	468a      	mov	sl, r1
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	f1c9 0e20 	rsb	lr, r9, #32
 800c0d2:	6818      	ldr	r0, [r3, #0]
 800c0d4:	fa00 f009 	lsl.w	r0, r0, r9
 800c0d8:	4310      	orrs	r0, r2
 800c0da:	f84a 0b04 	str.w	r0, [sl], #4
 800c0de:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0e2:	459c      	cmp	ip, r3
 800c0e4:	fa22 f20e 	lsr.w	r2, r2, lr
 800c0e8:	d8f3      	bhi.n	800c0d2 <__lshift+0x6e>
 800c0ea:	ebac 0304 	sub.w	r3, ip, r4
 800c0ee:	3b15      	subs	r3, #21
 800c0f0:	f023 0303 	bic.w	r3, r3, #3
 800c0f4:	3304      	adds	r3, #4
 800c0f6:	f104 0015 	add.w	r0, r4, #21
 800c0fa:	4584      	cmp	ip, r0
 800c0fc:	bf38      	it	cc
 800c0fe:	2304      	movcc	r3, #4
 800c100:	50ca      	str	r2, [r1, r3]
 800c102:	b10a      	cbz	r2, 800c108 <__lshift+0xa4>
 800c104:	f108 0602 	add.w	r6, r8, #2
 800c108:	3e01      	subs	r6, #1
 800c10a:	4638      	mov	r0, r7
 800c10c:	4621      	mov	r1, r4
 800c10e:	612e      	str	r6, [r5, #16]
 800c110:	f7ff fddc 	bl	800bccc <_Bfree>
 800c114:	4628      	mov	r0, r5
 800c116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c11a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c11e:	3301      	adds	r3, #1
 800c120:	e7c5      	b.n	800c0ae <__lshift+0x4a>
 800c122:	3904      	subs	r1, #4
 800c124:	f853 2b04 	ldr.w	r2, [r3], #4
 800c128:	459c      	cmp	ip, r3
 800c12a:	f841 2f04 	str.w	r2, [r1, #4]!
 800c12e:	d8f9      	bhi.n	800c124 <__lshift+0xc0>
 800c130:	e7ea      	b.n	800c108 <__lshift+0xa4>
 800c132:	bf00      	nop
 800c134:	0800dd20 	.word	0x0800dd20
 800c138:	0800dd31 	.word	0x0800dd31

0800c13c <__mcmp>:
 800c13c:	4603      	mov	r3, r0
 800c13e:	690a      	ldr	r2, [r1, #16]
 800c140:	6900      	ldr	r0, [r0, #16]
 800c142:	b530      	push	{r4, r5, lr}
 800c144:	1a80      	subs	r0, r0, r2
 800c146:	d10e      	bne.n	800c166 <__mcmp+0x2a>
 800c148:	3314      	adds	r3, #20
 800c14a:	3114      	adds	r1, #20
 800c14c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c150:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c154:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c158:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c15c:	4295      	cmp	r5, r2
 800c15e:	d003      	beq.n	800c168 <__mcmp+0x2c>
 800c160:	d205      	bcs.n	800c16e <__mcmp+0x32>
 800c162:	f04f 30ff 	mov.w	r0, #4294967295
 800c166:	bd30      	pop	{r4, r5, pc}
 800c168:	42a3      	cmp	r3, r4
 800c16a:	d3f3      	bcc.n	800c154 <__mcmp+0x18>
 800c16c:	e7fb      	b.n	800c166 <__mcmp+0x2a>
 800c16e:	2001      	movs	r0, #1
 800c170:	e7f9      	b.n	800c166 <__mcmp+0x2a>
	...

0800c174 <__mdiff>:
 800c174:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c178:	4689      	mov	r9, r1
 800c17a:	4606      	mov	r6, r0
 800c17c:	4611      	mov	r1, r2
 800c17e:	4648      	mov	r0, r9
 800c180:	4614      	mov	r4, r2
 800c182:	f7ff ffdb 	bl	800c13c <__mcmp>
 800c186:	1e05      	subs	r5, r0, #0
 800c188:	d112      	bne.n	800c1b0 <__mdiff+0x3c>
 800c18a:	4629      	mov	r1, r5
 800c18c:	4630      	mov	r0, r6
 800c18e:	f7ff fd5d 	bl	800bc4c <_Balloc>
 800c192:	4602      	mov	r2, r0
 800c194:	b928      	cbnz	r0, 800c1a2 <__mdiff+0x2e>
 800c196:	f240 2137 	movw	r1, #567	@ 0x237
 800c19a:	4b3e      	ldr	r3, [pc, #248]	@ (800c294 <__mdiff+0x120>)
 800c19c:	483e      	ldr	r0, [pc, #248]	@ (800c298 <__mdiff+0x124>)
 800c19e:	f000 fcd1 	bl	800cb44 <__assert_func>
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c1a8:	4610      	mov	r0, r2
 800c1aa:	b003      	add	sp, #12
 800c1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1b0:	bfbc      	itt	lt
 800c1b2:	464b      	movlt	r3, r9
 800c1b4:	46a1      	movlt	r9, r4
 800c1b6:	4630      	mov	r0, r6
 800c1b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c1bc:	bfba      	itte	lt
 800c1be:	461c      	movlt	r4, r3
 800c1c0:	2501      	movlt	r5, #1
 800c1c2:	2500      	movge	r5, #0
 800c1c4:	f7ff fd42 	bl	800bc4c <_Balloc>
 800c1c8:	4602      	mov	r2, r0
 800c1ca:	b918      	cbnz	r0, 800c1d4 <__mdiff+0x60>
 800c1cc:	f240 2145 	movw	r1, #581	@ 0x245
 800c1d0:	4b30      	ldr	r3, [pc, #192]	@ (800c294 <__mdiff+0x120>)
 800c1d2:	e7e3      	b.n	800c19c <__mdiff+0x28>
 800c1d4:	f100 0b14 	add.w	fp, r0, #20
 800c1d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c1dc:	f109 0310 	add.w	r3, r9, #16
 800c1e0:	60c5      	str	r5, [r0, #12]
 800c1e2:	f04f 0c00 	mov.w	ip, #0
 800c1e6:	f109 0514 	add.w	r5, r9, #20
 800c1ea:	46d9      	mov	r9, fp
 800c1ec:	6926      	ldr	r6, [r4, #16]
 800c1ee:	f104 0e14 	add.w	lr, r4, #20
 800c1f2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c1f6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c1fa:	9301      	str	r3, [sp, #4]
 800c1fc:	9b01      	ldr	r3, [sp, #4]
 800c1fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c202:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c206:	b281      	uxth	r1, r0
 800c208:	9301      	str	r3, [sp, #4]
 800c20a:	fa1f f38a 	uxth.w	r3, sl
 800c20e:	1a5b      	subs	r3, r3, r1
 800c210:	0c00      	lsrs	r0, r0, #16
 800c212:	4463      	add	r3, ip
 800c214:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c218:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c21c:	b29b      	uxth	r3, r3
 800c21e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c222:	4576      	cmp	r6, lr
 800c224:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c228:	f849 3b04 	str.w	r3, [r9], #4
 800c22c:	d8e6      	bhi.n	800c1fc <__mdiff+0x88>
 800c22e:	1b33      	subs	r3, r6, r4
 800c230:	3b15      	subs	r3, #21
 800c232:	f023 0303 	bic.w	r3, r3, #3
 800c236:	3415      	adds	r4, #21
 800c238:	3304      	adds	r3, #4
 800c23a:	42a6      	cmp	r6, r4
 800c23c:	bf38      	it	cc
 800c23e:	2304      	movcc	r3, #4
 800c240:	441d      	add	r5, r3
 800c242:	445b      	add	r3, fp
 800c244:	461e      	mov	r6, r3
 800c246:	462c      	mov	r4, r5
 800c248:	4544      	cmp	r4, r8
 800c24a:	d30e      	bcc.n	800c26a <__mdiff+0xf6>
 800c24c:	f108 0103 	add.w	r1, r8, #3
 800c250:	1b49      	subs	r1, r1, r5
 800c252:	f021 0103 	bic.w	r1, r1, #3
 800c256:	3d03      	subs	r5, #3
 800c258:	45a8      	cmp	r8, r5
 800c25a:	bf38      	it	cc
 800c25c:	2100      	movcc	r1, #0
 800c25e:	440b      	add	r3, r1
 800c260:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c264:	b199      	cbz	r1, 800c28e <__mdiff+0x11a>
 800c266:	6117      	str	r7, [r2, #16]
 800c268:	e79e      	b.n	800c1a8 <__mdiff+0x34>
 800c26a:	46e6      	mov	lr, ip
 800c26c:	f854 1b04 	ldr.w	r1, [r4], #4
 800c270:	fa1f fc81 	uxth.w	ip, r1
 800c274:	44f4      	add	ip, lr
 800c276:	0c08      	lsrs	r0, r1, #16
 800c278:	4471      	add	r1, lr
 800c27a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c27e:	b289      	uxth	r1, r1
 800c280:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c284:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c288:	f846 1b04 	str.w	r1, [r6], #4
 800c28c:	e7dc      	b.n	800c248 <__mdiff+0xd4>
 800c28e:	3f01      	subs	r7, #1
 800c290:	e7e6      	b.n	800c260 <__mdiff+0xec>
 800c292:	bf00      	nop
 800c294:	0800dd20 	.word	0x0800dd20
 800c298:	0800dd31 	.word	0x0800dd31

0800c29c <__d2b>:
 800c29c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800c2a0:	2101      	movs	r1, #1
 800c2a2:	4690      	mov	r8, r2
 800c2a4:	4699      	mov	r9, r3
 800c2a6:	9e08      	ldr	r6, [sp, #32]
 800c2a8:	f7ff fcd0 	bl	800bc4c <_Balloc>
 800c2ac:	4604      	mov	r4, r0
 800c2ae:	b930      	cbnz	r0, 800c2be <__d2b+0x22>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	f240 310f 	movw	r1, #783	@ 0x30f
 800c2b6:	4b23      	ldr	r3, [pc, #140]	@ (800c344 <__d2b+0xa8>)
 800c2b8:	4823      	ldr	r0, [pc, #140]	@ (800c348 <__d2b+0xac>)
 800c2ba:	f000 fc43 	bl	800cb44 <__assert_func>
 800c2be:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c2c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c2c6:	b10d      	cbz	r5, 800c2cc <__d2b+0x30>
 800c2c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c2cc:	9301      	str	r3, [sp, #4]
 800c2ce:	f1b8 0300 	subs.w	r3, r8, #0
 800c2d2:	d024      	beq.n	800c31e <__d2b+0x82>
 800c2d4:	4668      	mov	r0, sp
 800c2d6:	9300      	str	r3, [sp, #0]
 800c2d8:	f7ff fd7f 	bl	800bdda <__lo0bits>
 800c2dc:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c2e0:	b1d8      	cbz	r0, 800c31a <__d2b+0x7e>
 800c2e2:	f1c0 0320 	rsb	r3, r0, #32
 800c2e6:	fa02 f303 	lsl.w	r3, r2, r3
 800c2ea:	430b      	orrs	r3, r1
 800c2ec:	40c2      	lsrs	r2, r0
 800c2ee:	6163      	str	r3, [r4, #20]
 800c2f0:	9201      	str	r2, [sp, #4]
 800c2f2:	9b01      	ldr	r3, [sp, #4]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	bf0c      	ite	eq
 800c2f8:	2201      	moveq	r2, #1
 800c2fa:	2202      	movne	r2, #2
 800c2fc:	61a3      	str	r3, [r4, #24]
 800c2fe:	6122      	str	r2, [r4, #16]
 800c300:	b1ad      	cbz	r5, 800c32e <__d2b+0x92>
 800c302:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c306:	4405      	add	r5, r0
 800c308:	6035      	str	r5, [r6, #0]
 800c30a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c30e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c310:	6018      	str	r0, [r3, #0]
 800c312:	4620      	mov	r0, r4
 800c314:	b002      	add	sp, #8
 800c316:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c31a:	6161      	str	r1, [r4, #20]
 800c31c:	e7e9      	b.n	800c2f2 <__d2b+0x56>
 800c31e:	a801      	add	r0, sp, #4
 800c320:	f7ff fd5b 	bl	800bdda <__lo0bits>
 800c324:	9b01      	ldr	r3, [sp, #4]
 800c326:	2201      	movs	r2, #1
 800c328:	6163      	str	r3, [r4, #20]
 800c32a:	3020      	adds	r0, #32
 800c32c:	e7e7      	b.n	800c2fe <__d2b+0x62>
 800c32e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c332:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c336:	6030      	str	r0, [r6, #0]
 800c338:	6918      	ldr	r0, [r3, #16]
 800c33a:	f7ff fd2f 	bl	800bd9c <__hi0bits>
 800c33e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c342:	e7e4      	b.n	800c30e <__d2b+0x72>
 800c344:	0800dd20 	.word	0x0800dd20
 800c348:	0800dd31 	.word	0x0800dd31

0800c34c <__ssputs_r>:
 800c34c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c350:	461f      	mov	r7, r3
 800c352:	688e      	ldr	r6, [r1, #8]
 800c354:	4682      	mov	sl, r0
 800c356:	42be      	cmp	r6, r7
 800c358:	460c      	mov	r4, r1
 800c35a:	4690      	mov	r8, r2
 800c35c:	680b      	ldr	r3, [r1, #0]
 800c35e:	d82d      	bhi.n	800c3bc <__ssputs_r+0x70>
 800c360:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c364:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c368:	d026      	beq.n	800c3b8 <__ssputs_r+0x6c>
 800c36a:	6965      	ldr	r5, [r4, #20]
 800c36c:	6909      	ldr	r1, [r1, #16]
 800c36e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c372:	eba3 0901 	sub.w	r9, r3, r1
 800c376:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c37a:	1c7b      	adds	r3, r7, #1
 800c37c:	444b      	add	r3, r9
 800c37e:	106d      	asrs	r5, r5, #1
 800c380:	429d      	cmp	r5, r3
 800c382:	bf38      	it	cc
 800c384:	461d      	movcc	r5, r3
 800c386:	0553      	lsls	r3, r2, #21
 800c388:	d527      	bpl.n	800c3da <__ssputs_r+0x8e>
 800c38a:	4629      	mov	r1, r5
 800c38c:	f7ff fbd2 	bl	800bb34 <_malloc_r>
 800c390:	4606      	mov	r6, r0
 800c392:	b360      	cbz	r0, 800c3ee <__ssputs_r+0xa2>
 800c394:	464a      	mov	r2, r9
 800c396:	6921      	ldr	r1, [r4, #16]
 800c398:	f000 fbc6 	bl	800cb28 <memcpy>
 800c39c:	89a3      	ldrh	r3, [r4, #12]
 800c39e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c3a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3a6:	81a3      	strh	r3, [r4, #12]
 800c3a8:	6126      	str	r6, [r4, #16]
 800c3aa:	444e      	add	r6, r9
 800c3ac:	6026      	str	r6, [r4, #0]
 800c3ae:	463e      	mov	r6, r7
 800c3b0:	6165      	str	r5, [r4, #20]
 800c3b2:	eba5 0509 	sub.w	r5, r5, r9
 800c3b6:	60a5      	str	r5, [r4, #8]
 800c3b8:	42be      	cmp	r6, r7
 800c3ba:	d900      	bls.n	800c3be <__ssputs_r+0x72>
 800c3bc:	463e      	mov	r6, r7
 800c3be:	4632      	mov	r2, r6
 800c3c0:	4641      	mov	r1, r8
 800c3c2:	6820      	ldr	r0, [r4, #0]
 800c3c4:	f000 fb63 	bl	800ca8e <memmove>
 800c3c8:	2000      	movs	r0, #0
 800c3ca:	68a3      	ldr	r3, [r4, #8]
 800c3cc:	1b9b      	subs	r3, r3, r6
 800c3ce:	60a3      	str	r3, [r4, #8]
 800c3d0:	6823      	ldr	r3, [r4, #0]
 800c3d2:	4433      	add	r3, r6
 800c3d4:	6023      	str	r3, [r4, #0]
 800c3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3da:	462a      	mov	r2, r5
 800c3dc:	f000 fbf6 	bl	800cbcc <_realloc_r>
 800c3e0:	4606      	mov	r6, r0
 800c3e2:	2800      	cmp	r0, #0
 800c3e4:	d1e0      	bne.n	800c3a8 <__ssputs_r+0x5c>
 800c3e6:	4650      	mov	r0, sl
 800c3e8:	6921      	ldr	r1, [r4, #16]
 800c3ea:	f7ff fb31 	bl	800ba50 <_free_r>
 800c3ee:	230c      	movs	r3, #12
 800c3f0:	f8ca 3000 	str.w	r3, [sl]
 800c3f4:	89a3      	ldrh	r3, [r4, #12]
 800c3f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c3fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3fe:	81a3      	strh	r3, [r4, #12]
 800c400:	e7e9      	b.n	800c3d6 <__ssputs_r+0x8a>
	...

0800c404 <_svfiprintf_r>:
 800c404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c408:	4698      	mov	r8, r3
 800c40a:	898b      	ldrh	r3, [r1, #12]
 800c40c:	4607      	mov	r7, r0
 800c40e:	061b      	lsls	r3, r3, #24
 800c410:	460d      	mov	r5, r1
 800c412:	4614      	mov	r4, r2
 800c414:	b09d      	sub	sp, #116	@ 0x74
 800c416:	d510      	bpl.n	800c43a <_svfiprintf_r+0x36>
 800c418:	690b      	ldr	r3, [r1, #16]
 800c41a:	b973      	cbnz	r3, 800c43a <_svfiprintf_r+0x36>
 800c41c:	2140      	movs	r1, #64	@ 0x40
 800c41e:	f7ff fb89 	bl	800bb34 <_malloc_r>
 800c422:	6028      	str	r0, [r5, #0]
 800c424:	6128      	str	r0, [r5, #16]
 800c426:	b930      	cbnz	r0, 800c436 <_svfiprintf_r+0x32>
 800c428:	230c      	movs	r3, #12
 800c42a:	603b      	str	r3, [r7, #0]
 800c42c:	f04f 30ff 	mov.w	r0, #4294967295
 800c430:	b01d      	add	sp, #116	@ 0x74
 800c432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c436:	2340      	movs	r3, #64	@ 0x40
 800c438:	616b      	str	r3, [r5, #20]
 800c43a:	2300      	movs	r3, #0
 800c43c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c43e:	2320      	movs	r3, #32
 800c440:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c444:	2330      	movs	r3, #48	@ 0x30
 800c446:	f04f 0901 	mov.w	r9, #1
 800c44a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c44e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800c5e8 <_svfiprintf_r+0x1e4>
 800c452:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c456:	4623      	mov	r3, r4
 800c458:	469a      	mov	sl, r3
 800c45a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c45e:	b10a      	cbz	r2, 800c464 <_svfiprintf_r+0x60>
 800c460:	2a25      	cmp	r2, #37	@ 0x25
 800c462:	d1f9      	bne.n	800c458 <_svfiprintf_r+0x54>
 800c464:	ebba 0b04 	subs.w	fp, sl, r4
 800c468:	d00b      	beq.n	800c482 <_svfiprintf_r+0x7e>
 800c46a:	465b      	mov	r3, fp
 800c46c:	4622      	mov	r2, r4
 800c46e:	4629      	mov	r1, r5
 800c470:	4638      	mov	r0, r7
 800c472:	f7ff ff6b 	bl	800c34c <__ssputs_r>
 800c476:	3001      	adds	r0, #1
 800c478:	f000 80a7 	beq.w	800c5ca <_svfiprintf_r+0x1c6>
 800c47c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c47e:	445a      	add	r2, fp
 800c480:	9209      	str	r2, [sp, #36]	@ 0x24
 800c482:	f89a 3000 	ldrb.w	r3, [sl]
 800c486:	2b00      	cmp	r3, #0
 800c488:	f000 809f 	beq.w	800c5ca <_svfiprintf_r+0x1c6>
 800c48c:	2300      	movs	r3, #0
 800c48e:	f04f 32ff 	mov.w	r2, #4294967295
 800c492:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c496:	f10a 0a01 	add.w	sl, sl, #1
 800c49a:	9304      	str	r3, [sp, #16]
 800c49c:	9307      	str	r3, [sp, #28]
 800c49e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c4a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800c4a4:	4654      	mov	r4, sl
 800c4a6:	2205      	movs	r2, #5
 800c4a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4ac:	484e      	ldr	r0, [pc, #312]	@ (800c5e8 <_svfiprintf_r+0x1e4>)
 800c4ae:	f7fe fc6e 	bl	800ad8e <memchr>
 800c4b2:	9a04      	ldr	r2, [sp, #16]
 800c4b4:	b9d8      	cbnz	r0, 800c4ee <_svfiprintf_r+0xea>
 800c4b6:	06d0      	lsls	r0, r2, #27
 800c4b8:	bf44      	itt	mi
 800c4ba:	2320      	movmi	r3, #32
 800c4bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c4c0:	0711      	lsls	r1, r2, #28
 800c4c2:	bf44      	itt	mi
 800c4c4:	232b      	movmi	r3, #43	@ 0x2b
 800c4c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c4ca:	f89a 3000 	ldrb.w	r3, [sl]
 800c4ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800c4d0:	d015      	beq.n	800c4fe <_svfiprintf_r+0xfa>
 800c4d2:	4654      	mov	r4, sl
 800c4d4:	2000      	movs	r0, #0
 800c4d6:	f04f 0c0a 	mov.w	ip, #10
 800c4da:	9a07      	ldr	r2, [sp, #28]
 800c4dc:	4621      	mov	r1, r4
 800c4de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4e2:	3b30      	subs	r3, #48	@ 0x30
 800c4e4:	2b09      	cmp	r3, #9
 800c4e6:	d94b      	bls.n	800c580 <_svfiprintf_r+0x17c>
 800c4e8:	b1b0      	cbz	r0, 800c518 <_svfiprintf_r+0x114>
 800c4ea:	9207      	str	r2, [sp, #28]
 800c4ec:	e014      	b.n	800c518 <_svfiprintf_r+0x114>
 800c4ee:	eba0 0308 	sub.w	r3, r0, r8
 800c4f2:	fa09 f303 	lsl.w	r3, r9, r3
 800c4f6:	4313      	orrs	r3, r2
 800c4f8:	46a2      	mov	sl, r4
 800c4fa:	9304      	str	r3, [sp, #16]
 800c4fc:	e7d2      	b.n	800c4a4 <_svfiprintf_r+0xa0>
 800c4fe:	9b03      	ldr	r3, [sp, #12]
 800c500:	1d19      	adds	r1, r3, #4
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	9103      	str	r1, [sp, #12]
 800c506:	2b00      	cmp	r3, #0
 800c508:	bfbb      	ittet	lt
 800c50a:	425b      	neglt	r3, r3
 800c50c:	f042 0202 	orrlt.w	r2, r2, #2
 800c510:	9307      	strge	r3, [sp, #28]
 800c512:	9307      	strlt	r3, [sp, #28]
 800c514:	bfb8      	it	lt
 800c516:	9204      	strlt	r2, [sp, #16]
 800c518:	7823      	ldrb	r3, [r4, #0]
 800c51a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c51c:	d10a      	bne.n	800c534 <_svfiprintf_r+0x130>
 800c51e:	7863      	ldrb	r3, [r4, #1]
 800c520:	2b2a      	cmp	r3, #42	@ 0x2a
 800c522:	d132      	bne.n	800c58a <_svfiprintf_r+0x186>
 800c524:	9b03      	ldr	r3, [sp, #12]
 800c526:	3402      	adds	r4, #2
 800c528:	1d1a      	adds	r2, r3, #4
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	9203      	str	r2, [sp, #12]
 800c52e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c532:	9305      	str	r3, [sp, #20]
 800c534:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800c5ec <_svfiprintf_r+0x1e8>
 800c538:	2203      	movs	r2, #3
 800c53a:	4650      	mov	r0, sl
 800c53c:	7821      	ldrb	r1, [r4, #0]
 800c53e:	f7fe fc26 	bl	800ad8e <memchr>
 800c542:	b138      	cbz	r0, 800c554 <_svfiprintf_r+0x150>
 800c544:	2240      	movs	r2, #64	@ 0x40
 800c546:	9b04      	ldr	r3, [sp, #16]
 800c548:	eba0 000a 	sub.w	r0, r0, sl
 800c54c:	4082      	lsls	r2, r0
 800c54e:	4313      	orrs	r3, r2
 800c550:	3401      	adds	r4, #1
 800c552:	9304      	str	r3, [sp, #16]
 800c554:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c558:	2206      	movs	r2, #6
 800c55a:	4825      	ldr	r0, [pc, #148]	@ (800c5f0 <_svfiprintf_r+0x1ec>)
 800c55c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c560:	f7fe fc15 	bl	800ad8e <memchr>
 800c564:	2800      	cmp	r0, #0
 800c566:	d036      	beq.n	800c5d6 <_svfiprintf_r+0x1d2>
 800c568:	4b22      	ldr	r3, [pc, #136]	@ (800c5f4 <_svfiprintf_r+0x1f0>)
 800c56a:	bb1b      	cbnz	r3, 800c5b4 <_svfiprintf_r+0x1b0>
 800c56c:	9b03      	ldr	r3, [sp, #12]
 800c56e:	3307      	adds	r3, #7
 800c570:	f023 0307 	bic.w	r3, r3, #7
 800c574:	3308      	adds	r3, #8
 800c576:	9303      	str	r3, [sp, #12]
 800c578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c57a:	4433      	add	r3, r6
 800c57c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c57e:	e76a      	b.n	800c456 <_svfiprintf_r+0x52>
 800c580:	460c      	mov	r4, r1
 800c582:	2001      	movs	r0, #1
 800c584:	fb0c 3202 	mla	r2, ip, r2, r3
 800c588:	e7a8      	b.n	800c4dc <_svfiprintf_r+0xd8>
 800c58a:	2300      	movs	r3, #0
 800c58c:	f04f 0c0a 	mov.w	ip, #10
 800c590:	4619      	mov	r1, r3
 800c592:	3401      	adds	r4, #1
 800c594:	9305      	str	r3, [sp, #20]
 800c596:	4620      	mov	r0, r4
 800c598:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c59c:	3a30      	subs	r2, #48	@ 0x30
 800c59e:	2a09      	cmp	r2, #9
 800c5a0:	d903      	bls.n	800c5aa <_svfiprintf_r+0x1a6>
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d0c6      	beq.n	800c534 <_svfiprintf_r+0x130>
 800c5a6:	9105      	str	r1, [sp, #20]
 800c5a8:	e7c4      	b.n	800c534 <_svfiprintf_r+0x130>
 800c5aa:	4604      	mov	r4, r0
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5b2:	e7f0      	b.n	800c596 <_svfiprintf_r+0x192>
 800c5b4:	ab03      	add	r3, sp, #12
 800c5b6:	9300      	str	r3, [sp, #0]
 800c5b8:	462a      	mov	r2, r5
 800c5ba:	4638      	mov	r0, r7
 800c5bc:	4b0e      	ldr	r3, [pc, #56]	@ (800c5f8 <_svfiprintf_r+0x1f4>)
 800c5be:	a904      	add	r1, sp, #16
 800c5c0:	f7fd fd7e 	bl	800a0c0 <_printf_float>
 800c5c4:	1c42      	adds	r2, r0, #1
 800c5c6:	4606      	mov	r6, r0
 800c5c8:	d1d6      	bne.n	800c578 <_svfiprintf_r+0x174>
 800c5ca:	89ab      	ldrh	r3, [r5, #12]
 800c5cc:	065b      	lsls	r3, r3, #25
 800c5ce:	f53f af2d 	bmi.w	800c42c <_svfiprintf_r+0x28>
 800c5d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c5d4:	e72c      	b.n	800c430 <_svfiprintf_r+0x2c>
 800c5d6:	ab03      	add	r3, sp, #12
 800c5d8:	9300      	str	r3, [sp, #0]
 800c5da:	462a      	mov	r2, r5
 800c5dc:	4638      	mov	r0, r7
 800c5de:	4b06      	ldr	r3, [pc, #24]	@ (800c5f8 <_svfiprintf_r+0x1f4>)
 800c5e0:	a904      	add	r1, sp, #16
 800c5e2:	f7fe f80b 	bl	800a5fc <_printf_i>
 800c5e6:	e7ed      	b.n	800c5c4 <_svfiprintf_r+0x1c0>
 800c5e8:	0800de88 	.word	0x0800de88
 800c5ec:	0800de8e 	.word	0x0800de8e
 800c5f0:	0800de92 	.word	0x0800de92
 800c5f4:	0800a0c1 	.word	0x0800a0c1
 800c5f8:	0800c34d 	.word	0x0800c34d

0800c5fc <__sfputc_r>:
 800c5fc:	6893      	ldr	r3, [r2, #8]
 800c5fe:	b410      	push	{r4}
 800c600:	3b01      	subs	r3, #1
 800c602:	2b00      	cmp	r3, #0
 800c604:	6093      	str	r3, [r2, #8]
 800c606:	da07      	bge.n	800c618 <__sfputc_r+0x1c>
 800c608:	6994      	ldr	r4, [r2, #24]
 800c60a:	42a3      	cmp	r3, r4
 800c60c:	db01      	blt.n	800c612 <__sfputc_r+0x16>
 800c60e:	290a      	cmp	r1, #10
 800c610:	d102      	bne.n	800c618 <__sfputc_r+0x1c>
 800c612:	bc10      	pop	{r4}
 800c614:	f7fe baa7 	b.w	800ab66 <__swbuf_r>
 800c618:	6813      	ldr	r3, [r2, #0]
 800c61a:	1c58      	adds	r0, r3, #1
 800c61c:	6010      	str	r0, [r2, #0]
 800c61e:	7019      	strb	r1, [r3, #0]
 800c620:	4608      	mov	r0, r1
 800c622:	bc10      	pop	{r4}
 800c624:	4770      	bx	lr

0800c626 <__sfputs_r>:
 800c626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c628:	4606      	mov	r6, r0
 800c62a:	460f      	mov	r7, r1
 800c62c:	4614      	mov	r4, r2
 800c62e:	18d5      	adds	r5, r2, r3
 800c630:	42ac      	cmp	r4, r5
 800c632:	d101      	bne.n	800c638 <__sfputs_r+0x12>
 800c634:	2000      	movs	r0, #0
 800c636:	e007      	b.n	800c648 <__sfputs_r+0x22>
 800c638:	463a      	mov	r2, r7
 800c63a:	4630      	mov	r0, r6
 800c63c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c640:	f7ff ffdc 	bl	800c5fc <__sfputc_r>
 800c644:	1c43      	adds	r3, r0, #1
 800c646:	d1f3      	bne.n	800c630 <__sfputs_r+0xa>
 800c648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c64c <_vfiprintf_r>:
 800c64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c650:	460d      	mov	r5, r1
 800c652:	4614      	mov	r4, r2
 800c654:	4698      	mov	r8, r3
 800c656:	4606      	mov	r6, r0
 800c658:	b09d      	sub	sp, #116	@ 0x74
 800c65a:	b118      	cbz	r0, 800c664 <_vfiprintf_r+0x18>
 800c65c:	6a03      	ldr	r3, [r0, #32]
 800c65e:	b90b      	cbnz	r3, 800c664 <_vfiprintf_r+0x18>
 800c660:	f7fe f978 	bl	800a954 <__sinit>
 800c664:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c666:	07d9      	lsls	r1, r3, #31
 800c668:	d405      	bmi.n	800c676 <_vfiprintf_r+0x2a>
 800c66a:	89ab      	ldrh	r3, [r5, #12]
 800c66c:	059a      	lsls	r2, r3, #22
 800c66e:	d402      	bmi.n	800c676 <_vfiprintf_r+0x2a>
 800c670:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c672:	f7fe fb8a 	bl	800ad8a <__retarget_lock_acquire_recursive>
 800c676:	89ab      	ldrh	r3, [r5, #12]
 800c678:	071b      	lsls	r3, r3, #28
 800c67a:	d501      	bpl.n	800c680 <_vfiprintf_r+0x34>
 800c67c:	692b      	ldr	r3, [r5, #16]
 800c67e:	b99b      	cbnz	r3, 800c6a8 <_vfiprintf_r+0x5c>
 800c680:	4629      	mov	r1, r5
 800c682:	4630      	mov	r0, r6
 800c684:	f7fe faae 	bl	800abe4 <__swsetup_r>
 800c688:	b170      	cbz	r0, 800c6a8 <_vfiprintf_r+0x5c>
 800c68a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c68c:	07dc      	lsls	r4, r3, #31
 800c68e:	d504      	bpl.n	800c69a <_vfiprintf_r+0x4e>
 800c690:	f04f 30ff 	mov.w	r0, #4294967295
 800c694:	b01d      	add	sp, #116	@ 0x74
 800c696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c69a:	89ab      	ldrh	r3, [r5, #12]
 800c69c:	0598      	lsls	r0, r3, #22
 800c69e:	d4f7      	bmi.n	800c690 <_vfiprintf_r+0x44>
 800c6a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c6a2:	f7fe fb73 	bl	800ad8c <__retarget_lock_release_recursive>
 800c6a6:	e7f3      	b.n	800c690 <_vfiprintf_r+0x44>
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6ac:	2320      	movs	r3, #32
 800c6ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c6b2:	2330      	movs	r3, #48	@ 0x30
 800c6b4:	f04f 0901 	mov.w	r9, #1
 800c6b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6bc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800c868 <_vfiprintf_r+0x21c>
 800c6c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c6c4:	4623      	mov	r3, r4
 800c6c6:	469a      	mov	sl, r3
 800c6c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6cc:	b10a      	cbz	r2, 800c6d2 <_vfiprintf_r+0x86>
 800c6ce:	2a25      	cmp	r2, #37	@ 0x25
 800c6d0:	d1f9      	bne.n	800c6c6 <_vfiprintf_r+0x7a>
 800c6d2:	ebba 0b04 	subs.w	fp, sl, r4
 800c6d6:	d00b      	beq.n	800c6f0 <_vfiprintf_r+0xa4>
 800c6d8:	465b      	mov	r3, fp
 800c6da:	4622      	mov	r2, r4
 800c6dc:	4629      	mov	r1, r5
 800c6de:	4630      	mov	r0, r6
 800c6e0:	f7ff ffa1 	bl	800c626 <__sfputs_r>
 800c6e4:	3001      	adds	r0, #1
 800c6e6:	f000 80a7 	beq.w	800c838 <_vfiprintf_r+0x1ec>
 800c6ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6ec:	445a      	add	r2, fp
 800c6ee:	9209      	str	r2, [sp, #36]	@ 0x24
 800c6f0:	f89a 3000 	ldrb.w	r3, [sl]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	f000 809f 	beq.w	800c838 <_vfiprintf_r+0x1ec>
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	f04f 32ff 	mov.w	r2, #4294967295
 800c700:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c704:	f10a 0a01 	add.w	sl, sl, #1
 800c708:	9304      	str	r3, [sp, #16]
 800c70a:	9307      	str	r3, [sp, #28]
 800c70c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c710:	931a      	str	r3, [sp, #104]	@ 0x68
 800c712:	4654      	mov	r4, sl
 800c714:	2205      	movs	r2, #5
 800c716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c71a:	4853      	ldr	r0, [pc, #332]	@ (800c868 <_vfiprintf_r+0x21c>)
 800c71c:	f7fe fb37 	bl	800ad8e <memchr>
 800c720:	9a04      	ldr	r2, [sp, #16]
 800c722:	b9d8      	cbnz	r0, 800c75c <_vfiprintf_r+0x110>
 800c724:	06d1      	lsls	r1, r2, #27
 800c726:	bf44      	itt	mi
 800c728:	2320      	movmi	r3, #32
 800c72a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c72e:	0713      	lsls	r3, r2, #28
 800c730:	bf44      	itt	mi
 800c732:	232b      	movmi	r3, #43	@ 0x2b
 800c734:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c738:	f89a 3000 	ldrb.w	r3, [sl]
 800c73c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c73e:	d015      	beq.n	800c76c <_vfiprintf_r+0x120>
 800c740:	4654      	mov	r4, sl
 800c742:	2000      	movs	r0, #0
 800c744:	f04f 0c0a 	mov.w	ip, #10
 800c748:	9a07      	ldr	r2, [sp, #28]
 800c74a:	4621      	mov	r1, r4
 800c74c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c750:	3b30      	subs	r3, #48	@ 0x30
 800c752:	2b09      	cmp	r3, #9
 800c754:	d94b      	bls.n	800c7ee <_vfiprintf_r+0x1a2>
 800c756:	b1b0      	cbz	r0, 800c786 <_vfiprintf_r+0x13a>
 800c758:	9207      	str	r2, [sp, #28]
 800c75a:	e014      	b.n	800c786 <_vfiprintf_r+0x13a>
 800c75c:	eba0 0308 	sub.w	r3, r0, r8
 800c760:	fa09 f303 	lsl.w	r3, r9, r3
 800c764:	4313      	orrs	r3, r2
 800c766:	46a2      	mov	sl, r4
 800c768:	9304      	str	r3, [sp, #16]
 800c76a:	e7d2      	b.n	800c712 <_vfiprintf_r+0xc6>
 800c76c:	9b03      	ldr	r3, [sp, #12]
 800c76e:	1d19      	adds	r1, r3, #4
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	9103      	str	r1, [sp, #12]
 800c774:	2b00      	cmp	r3, #0
 800c776:	bfbb      	ittet	lt
 800c778:	425b      	neglt	r3, r3
 800c77a:	f042 0202 	orrlt.w	r2, r2, #2
 800c77e:	9307      	strge	r3, [sp, #28]
 800c780:	9307      	strlt	r3, [sp, #28]
 800c782:	bfb8      	it	lt
 800c784:	9204      	strlt	r2, [sp, #16]
 800c786:	7823      	ldrb	r3, [r4, #0]
 800c788:	2b2e      	cmp	r3, #46	@ 0x2e
 800c78a:	d10a      	bne.n	800c7a2 <_vfiprintf_r+0x156>
 800c78c:	7863      	ldrb	r3, [r4, #1]
 800c78e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c790:	d132      	bne.n	800c7f8 <_vfiprintf_r+0x1ac>
 800c792:	9b03      	ldr	r3, [sp, #12]
 800c794:	3402      	adds	r4, #2
 800c796:	1d1a      	adds	r2, r3, #4
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	9203      	str	r2, [sp, #12]
 800c79c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c7a0:	9305      	str	r3, [sp, #20]
 800c7a2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800c86c <_vfiprintf_r+0x220>
 800c7a6:	2203      	movs	r2, #3
 800c7a8:	4650      	mov	r0, sl
 800c7aa:	7821      	ldrb	r1, [r4, #0]
 800c7ac:	f7fe faef 	bl	800ad8e <memchr>
 800c7b0:	b138      	cbz	r0, 800c7c2 <_vfiprintf_r+0x176>
 800c7b2:	2240      	movs	r2, #64	@ 0x40
 800c7b4:	9b04      	ldr	r3, [sp, #16]
 800c7b6:	eba0 000a 	sub.w	r0, r0, sl
 800c7ba:	4082      	lsls	r2, r0
 800c7bc:	4313      	orrs	r3, r2
 800c7be:	3401      	adds	r4, #1
 800c7c0:	9304      	str	r3, [sp, #16]
 800c7c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7c6:	2206      	movs	r2, #6
 800c7c8:	4829      	ldr	r0, [pc, #164]	@ (800c870 <_vfiprintf_r+0x224>)
 800c7ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c7ce:	f7fe fade 	bl	800ad8e <memchr>
 800c7d2:	2800      	cmp	r0, #0
 800c7d4:	d03f      	beq.n	800c856 <_vfiprintf_r+0x20a>
 800c7d6:	4b27      	ldr	r3, [pc, #156]	@ (800c874 <_vfiprintf_r+0x228>)
 800c7d8:	bb1b      	cbnz	r3, 800c822 <_vfiprintf_r+0x1d6>
 800c7da:	9b03      	ldr	r3, [sp, #12]
 800c7dc:	3307      	adds	r3, #7
 800c7de:	f023 0307 	bic.w	r3, r3, #7
 800c7e2:	3308      	adds	r3, #8
 800c7e4:	9303      	str	r3, [sp, #12]
 800c7e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7e8:	443b      	add	r3, r7
 800c7ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7ec:	e76a      	b.n	800c6c4 <_vfiprintf_r+0x78>
 800c7ee:	460c      	mov	r4, r1
 800c7f0:	2001      	movs	r0, #1
 800c7f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7f6:	e7a8      	b.n	800c74a <_vfiprintf_r+0xfe>
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	f04f 0c0a 	mov.w	ip, #10
 800c7fe:	4619      	mov	r1, r3
 800c800:	3401      	adds	r4, #1
 800c802:	9305      	str	r3, [sp, #20]
 800c804:	4620      	mov	r0, r4
 800c806:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c80a:	3a30      	subs	r2, #48	@ 0x30
 800c80c:	2a09      	cmp	r2, #9
 800c80e:	d903      	bls.n	800c818 <_vfiprintf_r+0x1cc>
 800c810:	2b00      	cmp	r3, #0
 800c812:	d0c6      	beq.n	800c7a2 <_vfiprintf_r+0x156>
 800c814:	9105      	str	r1, [sp, #20]
 800c816:	e7c4      	b.n	800c7a2 <_vfiprintf_r+0x156>
 800c818:	4604      	mov	r4, r0
 800c81a:	2301      	movs	r3, #1
 800c81c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c820:	e7f0      	b.n	800c804 <_vfiprintf_r+0x1b8>
 800c822:	ab03      	add	r3, sp, #12
 800c824:	9300      	str	r3, [sp, #0]
 800c826:	462a      	mov	r2, r5
 800c828:	4630      	mov	r0, r6
 800c82a:	4b13      	ldr	r3, [pc, #76]	@ (800c878 <_vfiprintf_r+0x22c>)
 800c82c:	a904      	add	r1, sp, #16
 800c82e:	f7fd fc47 	bl	800a0c0 <_printf_float>
 800c832:	4607      	mov	r7, r0
 800c834:	1c78      	adds	r0, r7, #1
 800c836:	d1d6      	bne.n	800c7e6 <_vfiprintf_r+0x19a>
 800c838:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c83a:	07d9      	lsls	r1, r3, #31
 800c83c:	d405      	bmi.n	800c84a <_vfiprintf_r+0x1fe>
 800c83e:	89ab      	ldrh	r3, [r5, #12]
 800c840:	059a      	lsls	r2, r3, #22
 800c842:	d402      	bmi.n	800c84a <_vfiprintf_r+0x1fe>
 800c844:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c846:	f7fe faa1 	bl	800ad8c <__retarget_lock_release_recursive>
 800c84a:	89ab      	ldrh	r3, [r5, #12]
 800c84c:	065b      	lsls	r3, r3, #25
 800c84e:	f53f af1f 	bmi.w	800c690 <_vfiprintf_r+0x44>
 800c852:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c854:	e71e      	b.n	800c694 <_vfiprintf_r+0x48>
 800c856:	ab03      	add	r3, sp, #12
 800c858:	9300      	str	r3, [sp, #0]
 800c85a:	462a      	mov	r2, r5
 800c85c:	4630      	mov	r0, r6
 800c85e:	4b06      	ldr	r3, [pc, #24]	@ (800c878 <_vfiprintf_r+0x22c>)
 800c860:	a904      	add	r1, sp, #16
 800c862:	f7fd fecb 	bl	800a5fc <_printf_i>
 800c866:	e7e4      	b.n	800c832 <_vfiprintf_r+0x1e6>
 800c868:	0800de88 	.word	0x0800de88
 800c86c:	0800de8e 	.word	0x0800de8e
 800c870:	0800de92 	.word	0x0800de92
 800c874:	0800a0c1 	.word	0x0800a0c1
 800c878:	0800c627 	.word	0x0800c627

0800c87c <__sflush_r>:
 800c87c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c882:	0716      	lsls	r6, r2, #28
 800c884:	4605      	mov	r5, r0
 800c886:	460c      	mov	r4, r1
 800c888:	d454      	bmi.n	800c934 <__sflush_r+0xb8>
 800c88a:	684b      	ldr	r3, [r1, #4]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	dc02      	bgt.n	800c896 <__sflush_r+0x1a>
 800c890:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c892:	2b00      	cmp	r3, #0
 800c894:	dd48      	ble.n	800c928 <__sflush_r+0xac>
 800c896:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c898:	2e00      	cmp	r6, #0
 800c89a:	d045      	beq.n	800c928 <__sflush_r+0xac>
 800c89c:	2300      	movs	r3, #0
 800c89e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c8a2:	682f      	ldr	r7, [r5, #0]
 800c8a4:	6a21      	ldr	r1, [r4, #32]
 800c8a6:	602b      	str	r3, [r5, #0]
 800c8a8:	d030      	beq.n	800c90c <__sflush_r+0x90>
 800c8aa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c8ac:	89a3      	ldrh	r3, [r4, #12]
 800c8ae:	0759      	lsls	r1, r3, #29
 800c8b0:	d505      	bpl.n	800c8be <__sflush_r+0x42>
 800c8b2:	6863      	ldr	r3, [r4, #4]
 800c8b4:	1ad2      	subs	r2, r2, r3
 800c8b6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c8b8:	b10b      	cbz	r3, 800c8be <__sflush_r+0x42>
 800c8ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c8bc:	1ad2      	subs	r2, r2, r3
 800c8be:	2300      	movs	r3, #0
 800c8c0:	4628      	mov	r0, r5
 800c8c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c8c4:	6a21      	ldr	r1, [r4, #32]
 800c8c6:	47b0      	blx	r6
 800c8c8:	1c43      	adds	r3, r0, #1
 800c8ca:	89a3      	ldrh	r3, [r4, #12]
 800c8cc:	d106      	bne.n	800c8dc <__sflush_r+0x60>
 800c8ce:	6829      	ldr	r1, [r5, #0]
 800c8d0:	291d      	cmp	r1, #29
 800c8d2:	d82b      	bhi.n	800c92c <__sflush_r+0xb0>
 800c8d4:	4a28      	ldr	r2, [pc, #160]	@ (800c978 <__sflush_r+0xfc>)
 800c8d6:	410a      	asrs	r2, r1
 800c8d8:	07d6      	lsls	r6, r2, #31
 800c8da:	d427      	bmi.n	800c92c <__sflush_r+0xb0>
 800c8dc:	2200      	movs	r2, #0
 800c8de:	6062      	str	r2, [r4, #4]
 800c8e0:	6922      	ldr	r2, [r4, #16]
 800c8e2:	04d9      	lsls	r1, r3, #19
 800c8e4:	6022      	str	r2, [r4, #0]
 800c8e6:	d504      	bpl.n	800c8f2 <__sflush_r+0x76>
 800c8e8:	1c42      	adds	r2, r0, #1
 800c8ea:	d101      	bne.n	800c8f0 <__sflush_r+0x74>
 800c8ec:	682b      	ldr	r3, [r5, #0]
 800c8ee:	b903      	cbnz	r3, 800c8f2 <__sflush_r+0x76>
 800c8f0:	6560      	str	r0, [r4, #84]	@ 0x54
 800c8f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c8f4:	602f      	str	r7, [r5, #0]
 800c8f6:	b1b9      	cbz	r1, 800c928 <__sflush_r+0xac>
 800c8f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c8fc:	4299      	cmp	r1, r3
 800c8fe:	d002      	beq.n	800c906 <__sflush_r+0x8a>
 800c900:	4628      	mov	r0, r5
 800c902:	f7ff f8a5 	bl	800ba50 <_free_r>
 800c906:	2300      	movs	r3, #0
 800c908:	6363      	str	r3, [r4, #52]	@ 0x34
 800c90a:	e00d      	b.n	800c928 <__sflush_r+0xac>
 800c90c:	2301      	movs	r3, #1
 800c90e:	4628      	mov	r0, r5
 800c910:	47b0      	blx	r6
 800c912:	4602      	mov	r2, r0
 800c914:	1c50      	adds	r0, r2, #1
 800c916:	d1c9      	bne.n	800c8ac <__sflush_r+0x30>
 800c918:	682b      	ldr	r3, [r5, #0]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d0c6      	beq.n	800c8ac <__sflush_r+0x30>
 800c91e:	2b1d      	cmp	r3, #29
 800c920:	d001      	beq.n	800c926 <__sflush_r+0xaa>
 800c922:	2b16      	cmp	r3, #22
 800c924:	d11d      	bne.n	800c962 <__sflush_r+0xe6>
 800c926:	602f      	str	r7, [r5, #0]
 800c928:	2000      	movs	r0, #0
 800c92a:	e021      	b.n	800c970 <__sflush_r+0xf4>
 800c92c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c930:	b21b      	sxth	r3, r3
 800c932:	e01a      	b.n	800c96a <__sflush_r+0xee>
 800c934:	690f      	ldr	r7, [r1, #16]
 800c936:	2f00      	cmp	r7, #0
 800c938:	d0f6      	beq.n	800c928 <__sflush_r+0xac>
 800c93a:	0793      	lsls	r3, r2, #30
 800c93c:	bf18      	it	ne
 800c93e:	2300      	movne	r3, #0
 800c940:	680e      	ldr	r6, [r1, #0]
 800c942:	bf08      	it	eq
 800c944:	694b      	ldreq	r3, [r1, #20]
 800c946:	1bf6      	subs	r6, r6, r7
 800c948:	600f      	str	r7, [r1, #0]
 800c94a:	608b      	str	r3, [r1, #8]
 800c94c:	2e00      	cmp	r6, #0
 800c94e:	ddeb      	ble.n	800c928 <__sflush_r+0xac>
 800c950:	4633      	mov	r3, r6
 800c952:	463a      	mov	r2, r7
 800c954:	4628      	mov	r0, r5
 800c956:	6a21      	ldr	r1, [r4, #32]
 800c958:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c95c:	47e0      	blx	ip
 800c95e:	2800      	cmp	r0, #0
 800c960:	dc07      	bgt.n	800c972 <__sflush_r+0xf6>
 800c962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c966:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c96a:	f04f 30ff 	mov.w	r0, #4294967295
 800c96e:	81a3      	strh	r3, [r4, #12]
 800c970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c972:	4407      	add	r7, r0
 800c974:	1a36      	subs	r6, r6, r0
 800c976:	e7e9      	b.n	800c94c <__sflush_r+0xd0>
 800c978:	dfbffffe 	.word	0xdfbffffe

0800c97c <_fflush_r>:
 800c97c:	b538      	push	{r3, r4, r5, lr}
 800c97e:	690b      	ldr	r3, [r1, #16]
 800c980:	4605      	mov	r5, r0
 800c982:	460c      	mov	r4, r1
 800c984:	b913      	cbnz	r3, 800c98c <_fflush_r+0x10>
 800c986:	2500      	movs	r5, #0
 800c988:	4628      	mov	r0, r5
 800c98a:	bd38      	pop	{r3, r4, r5, pc}
 800c98c:	b118      	cbz	r0, 800c996 <_fflush_r+0x1a>
 800c98e:	6a03      	ldr	r3, [r0, #32]
 800c990:	b90b      	cbnz	r3, 800c996 <_fflush_r+0x1a>
 800c992:	f7fd ffdf 	bl	800a954 <__sinit>
 800c996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d0f3      	beq.n	800c986 <_fflush_r+0xa>
 800c99e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c9a0:	07d0      	lsls	r0, r2, #31
 800c9a2:	d404      	bmi.n	800c9ae <_fflush_r+0x32>
 800c9a4:	0599      	lsls	r1, r3, #22
 800c9a6:	d402      	bmi.n	800c9ae <_fflush_r+0x32>
 800c9a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c9aa:	f7fe f9ee 	bl	800ad8a <__retarget_lock_acquire_recursive>
 800c9ae:	4628      	mov	r0, r5
 800c9b0:	4621      	mov	r1, r4
 800c9b2:	f7ff ff63 	bl	800c87c <__sflush_r>
 800c9b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c9b8:	4605      	mov	r5, r0
 800c9ba:	07da      	lsls	r2, r3, #31
 800c9bc:	d4e4      	bmi.n	800c988 <_fflush_r+0xc>
 800c9be:	89a3      	ldrh	r3, [r4, #12]
 800c9c0:	059b      	lsls	r3, r3, #22
 800c9c2:	d4e1      	bmi.n	800c988 <_fflush_r+0xc>
 800c9c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c9c6:	f7fe f9e1 	bl	800ad8c <__retarget_lock_release_recursive>
 800c9ca:	e7dd      	b.n	800c988 <_fflush_r+0xc>

0800c9cc <__swhatbuf_r>:
 800c9cc:	b570      	push	{r4, r5, r6, lr}
 800c9ce:	460c      	mov	r4, r1
 800c9d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9d4:	4615      	mov	r5, r2
 800c9d6:	2900      	cmp	r1, #0
 800c9d8:	461e      	mov	r6, r3
 800c9da:	b096      	sub	sp, #88	@ 0x58
 800c9dc:	da0c      	bge.n	800c9f8 <__swhatbuf_r+0x2c>
 800c9de:	89a3      	ldrh	r3, [r4, #12]
 800c9e0:	2100      	movs	r1, #0
 800c9e2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c9e6:	bf14      	ite	ne
 800c9e8:	2340      	movne	r3, #64	@ 0x40
 800c9ea:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c9ee:	2000      	movs	r0, #0
 800c9f0:	6031      	str	r1, [r6, #0]
 800c9f2:	602b      	str	r3, [r5, #0]
 800c9f4:	b016      	add	sp, #88	@ 0x58
 800c9f6:	bd70      	pop	{r4, r5, r6, pc}
 800c9f8:	466a      	mov	r2, sp
 800c9fa:	f000 f863 	bl	800cac4 <_fstat_r>
 800c9fe:	2800      	cmp	r0, #0
 800ca00:	dbed      	blt.n	800c9de <__swhatbuf_r+0x12>
 800ca02:	9901      	ldr	r1, [sp, #4]
 800ca04:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ca08:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ca0c:	4259      	negs	r1, r3
 800ca0e:	4159      	adcs	r1, r3
 800ca10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca14:	e7eb      	b.n	800c9ee <__swhatbuf_r+0x22>

0800ca16 <__smakebuf_r>:
 800ca16:	898b      	ldrh	r3, [r1, #12]
 800ca18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca1a:	079d      	lsls	r5, r3, #30
 800ca1c:	4606      	mov	r6, r0
 800ca1e:	460c      	mov	r4, r1
 800ca20:	d507      	bpl.n	800ca32 <__smakebuf_r+0x1c>
 800ca22:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ca26:	6023      	str	r3, [r4, #0]
 800ca28:	6123      	str	r3, [r4, #16]
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	6163      	str	r3, [r4, #20]
 800ca2e:	b003      	add	sp, #12
 800ca30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca32:	466a      	mov	r2, sp
 800ca34:	ab01      	add	r3, sp, #4
 800ca36:	f7ff ffc9 	bl	800c9cc <__swhatbuf_r>
 800ca3a:	9f00      	ldr	r7, [sp, #0]
 800ca3c:	4605      	mov	r5, r0
 800ca3e:	4639      	mov	r1, r7
 800ca40:	4630      	mov	r0, r6
 800ca42:	f7ff f877 	bl	800bb34 <_malloc_r>
 800ca46:	b948      	cbnz	r0, 800ca5c <__smakebuf_r+0x46>
 800ca48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca4c:	059a      	lsls	r2, r3, #22
 800ca4e:	d4ee      	bmi.n	800ca2e <__smakebuf_r+0x18>
 800ca50:	f023 0303 	bic.w	r3, r3, #3
 800ca54:	f043 0302 	orr.w	r3, r3, #2
 800ca58:	81a3      	strh	r3, [r4, #12]
 800ca5a:	e7e2      	b.n	800ca22 <__smakebuf_r+0xc>
 800ca5c:	89a3      	ldrh	r3, [r4, #12]
 800ca5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ca62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca66:	81a3      	strh	r3, [r4, #12]
 800ca68:	9b01      	ldr	r3, [sp, #4]
 800ca6a:	6020      	str	r0, [r4, #0]
 800ca6c:	b15b      	cbz	r3, 800ca86 <__smakebuf_r+0x70>
 800ca6e:	4630      	mov	r0, r6
 800ca70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca74:	f000 f838 	bl	800cae8 <_isatty_r>
 800ca78:	b128      	cbz	r0, 800ca86 <__smakebuf_r+0x70>
 800ca7a:	89a3      	ldrh	r3, [r4, #12]
 800ca7c:	f023 0303 	bic.w	r3, r3, #3
 800ca80:	f043 0301 	orr.w	r3, r3, #1
 800ca84:	81a3      	strh	r3, [r4, #12]
 800ca86:	89a3      	ldrh	r3, [r4, #12]
 800ca88:	431d      	orrs	r5, r3
 800ca8a:	81a5      	strh	r5, [r4, #12]
 800ca8c:	e7cf      	b.n	800ca2e <__smakebuf_r+0x18>

0800ca8e <memmove>:
 800ca8e:	4288      	cmp	r0, r1
 800ca90:	b510      	push	{r4, lr}
 800ca92:	eb01 0402 	add.w	r4, r1, r2
 800ca96:	d902      	bls.n	800ca9e <memmove+0x10>
 800ca98:	4284      	cmp	r4, r0
 800ca9a:	4623      	mov	r3, r4
 800ca9c:	d807      	bhi.n	800caae <memmove+0x20>
 800ca9e:	1e43      	subs	r3, r0, #1
 800caa0:	42a1      	cmp	r1, r4
 800caa2:	d008      	beq.n	800cab6 <memmove+0x28>
 800caa4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800caa8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800caac:	e7f8      	b.n	800caa0 <memmove+0x12>
 800caae:	4601      	mov	r1, r0
 800cab0:	4402      	add	r2, r0
 800cab2:	428a      	cmp	r2, r1
 800cab4:	d100      	bne.n	800cab8 <memmove+0x2a>
 800cab6:	bd10      	pop	{r4, pc}
 800cab8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cabc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cac0:	e7f7      	b.n	800cab2 <memmove+0x24>
	...

0800cac4 <_fstat_r>:
 800cac4:	b538      	push	{r3, r4, r5, lr}
 800cac6:	2300      	movs	r3, #0
 800cac8:	4d06      	ldr	r5, [pc, #24]	@ (800cae4 <_fstat_r+0x20>)
 800caca:	4604      	mov	r4, r0
 800cacc:	4608      	mov	r0, r1
 800cace:	4611      	mov	r1, r2
 800cad0:	602b      	str	r3, [r5, #0]
 800cad2:	f7f6 f8bf 	bl	8002c54 <_fstat>
 800cad6:	1c43      	adds	r3, r0, #1
 800cad8:	d102      	bne.n	800cae0 <_fstat_r+0x1c>
 800cada:	682b      	ldr	r3, [r5, #0]
 800cadc:	b103      	cbz	r3, 800cae0 <_fstat_r+0x1c>
 800cade:	6023      	str	r3, [r4, #0]
 800cae0:	bd38      	pop	{r3, r4, r5, pc}
 800cae2:	bf00      	nop
 800cae4:	200006a8 	.word	0x200006a8

0800cae8 <_isatty_r>:
 800cae8:	b538      	push	{r3, r4, r5, lr}
 800caea:	2300      	movs	r3, #0
 800caec:	4d05      	ldr	r5, [pc, #20]	@ (800cb04 <_isatty_r+0x1c>)
 800caee:	4604      	mov	r4, r0
 800caf0:	4608      	mov	r0, r1
 800caf2:	602b      	str	r3, [r5, #0]
 800caf4:	f7f6 f8bd 	bl	8002c72 <_isatty>
 800caf8:	1c43      	adds	r3, r0, #1
 800cafa:	d102      	bne.n	800cb02 <_isatty_r+0x1a>
 800cafc:	682b      	ldr	r3, [r5, #0]
 800cafe:	b103      	cbz	r3, 800cb02 <_isatty_r+0x1a>
 800cb00:	6023      	str	r3, [r4, #0]
 800cb02:	bd38      	pop	{r3, r4, r5, pc}
 800cb04:	200006a8 	.word	0x200006a8

0800cb08 <_sbrk_r>:
 800cb08:	b538      	push	{r3, r4, r5, lr}
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	4d05      	ldr	r5, [pc, #20]	@ (800cb24 <_sbrk_r+0x1c>)
 800cb0e:	4604      	mov	r4, r0
 800cb10:	4608      	mov	r0, r1
 800cb12:	602b      	str	r3, [r5, #0]
 800cb14:	f7f6 f8c4 	bl	8002ca0 <_sbrk>
 800cb18:	1c43      	adds	r3, r0, #1
 800cb1a:	d102      	bne.n	800cb22 <_sbrk_r+0x1a>
 800cb1c:	682b      	ldr	r3, [r5, #0]
 800cb1e:	b103      	cbz	r3, 800cb22 <_sbrk_r+0x1a>
 800cb20:	6023      	str	r3, [r4, #0]
 800cb22:	bd38      	pop	{r3, r4, r5, pc}
 800cb24:	200006a8 	.word	0x200006a8

0800cb28 <memcpy>:
 800cb28:	440a      	add	r2, r1
 800cb2a:	4291      	cmp	r1, r2
 800cb2c:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb30:	d100      	bne.n	800cb34 <memcpy+0xc>
 800cb32:	4770      	bx	lr
 800cb34:	b510      	push	{r4, lr}
 800cb36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb3a:	4291      	cmp	r1, r2
 800cb3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb40:	d1f9      	bne.n	800cb36 <memcpy+0xe>
 800cb42:	bd10      	pop	{r4, pc}

0800cb44 <__assert_func>:
 800cb44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb46:	4614      	mov	r4, r2
 800cb48:	461a      	mov	r2, r3
 800cb4a:	4b09      	ldr	r3, [pc, #36]	@ (800cb70 <__assert_func+0x2c>)
 800cb4c:	4605      	mov	r5, r0
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	68d8      	ldr	r0, [r3, #12]
 800cb52:	b954      	cbnz	r4, 800cb6a <__assert_func+0x26>
 800cb54:	4b07      	ldr	r3, [pc, #28]	@ (800cb74 <__assert_func+0x30>)
 800cb56:	461c      	mov	r4, r3
 800cb58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb5c:	9100      	str	r1, [sp, #0]
 800cb5e:	462b      	mov	r3, r5
 800cb60:	4905      	ldr	r1, [pc, #20]	@ (800cb78 <__assert_func+0x34>)
 800cb62:	f000 f86f 	bl	800cc44 <fiprintf>
 800cb66:	f000 f87f 	bl	800cc68 <abort>
 800cb6a:	4b04      	ldr	r3, [pc, #16]	@ (800cb7c <__assert_func+0x38>)
 800cb6c:	e7f4      	b.n	800cb58 <__assert_func+0x14>
 800cb6e:	bf00      	nop
 800cb70:	200000e0 	.word	0x200000e0
 800cb74:	0800dede 	.word	0x0800dede
 800cb78:	0800deb0 	.word	0x0800deb0
 800cb7c:	0800dea3 	.word	0x0800dea3

0800cb80 <_calloc_r>:
 800cb80:	b570      	push	{r4, r5, r6, lr}
 800cb82:	fba1 5402 	umull	r5, r4, r1, r2
 800cb86:	b93c      	cbnz	r4, 800cb98 <_calloc_r+0x18>
 800cb88:	4629      	mov	r1, r5
 800cb8a:	f7fe ffd3 	bl	800bb34 <_malloc_r>
 800cb8e:	4606      	mov	r6, r0
 800cb90:	b928      	cbnz	r0, 800cb9e <_calloc_r+0x1e>
 800cb92:	2600      	movs	r6, #0
 800cb94:	4630      	mov	r0, r6
 800cb96:	bd70      	pop	{r4, r5, r6, pc}
 800cb98:	220c      	movs	r2, #12
 800cb9a:	6002      	str	r2, [r0, #0]
 800cb9c:	e7f9      	b.n	800cb92 <_calloc_r+0x12>
 800cb9e:	462a      	mov	r2, r5
 800cba0:	4621      	mov	r1, r4
 800cba2:	f7fe f875 	bl	800ac90 <memset>
 800cba6:	e7f5      	b.n	800cb94 <_calloc_r+0x14>

0800cba8 <__ascii_mbtowc>:
 800cba8:	b082      	sub	sp, #8
 800cbaa:	b901      	cbnz	r1, 800cbae <__ascii_mbtowc+0x6>
 800cbac:	a901      	add	r1, sp, #4
 800cbae:	b142      	cbz	r2, 800cbc2 <__ascii_mbtowc+0x1a>
 800cbb0:	b14b      	cbz	r3, 800cbc6 <__ascii_mbtowc+0x1e>
 800cbb2:	7813      	ldrb	r3, [r2, #0]
 800cbb4:	600b      	str	r3, [r1, #0]
 800cbb6:	7812      	ldrb	r2, [r2, #0]
 800cbb8:	1e10      	subs	r0, r2, #0
 800cbba:	bf18      	it	ne
 800cbbc:	2001      	movne	r0, #1
 800cbbe:	b002      	add	sp, #8
 800cbc0:	4770      	bx	lr
 800cbc2:	4610      	mov	r0, r2
 800cbc4:	e7fb      	b.n	800cbbe <__ascii_mbtowc+0x16>
 800cbc6:	f06f 0001 	mvn.w	r0, #1
 800cbca:	e7f8      	b.n	800cbbe <__ascii_mbtowc+0x16>

0800cbcc <_realloc_r>:
 800cbcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbd0:	4680      	mov	r8, r0
 800cbd2:	4615      	mov	r5, r2
 800cbd4:	460c      	mov	r4, r1
 800cbd6:	b921      	cbnz	r1, 800cbe2 <_realloc_r+0x16>
 800cbd8:	4611      	mov	r1, r2
 800cbda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbde:	f7fe bfa9 	b.w	800bb34 <_malloc_r>
 800cbe2:	b92a      	cbnz	r2, 800cbf0 <_realloc_r+0x24>
 800cbe4:	f7fe ff34 	bl	800ba50 <_free_r>
 800cbe8:	2400      	movs	r4, #0
 800cbea:	4620      	mov	r0, r4
 800cbec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbf0:	f000 f841 	bl	800cc76 <_malloc_usable_size_r>
 800cbf4:	4285      	cmp	r5, r0
 800cbf6:	4606      	mov	r6, r0
 800cbf8:	d802      	bhi.n	800cc00 <_realloc_r+0x34>
 800cbfa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cbfe:	d8f4      	bhi.n	800cbea <_realloc_r+0x1e>
 800cc00:	4629      	mov	r1, r5
 800cc02:	4640      	mov	r0, r8
 800cc04:	f7fe ff96 	bl	800bb34 <_malloc_r>
 800cc08:	4607      	mov	r7, r0
 800cc0a:	2800      	cmp	r0, #0
 800cc0c:	d0ec      	beq.n	800cbe8 <_realloc_r+0x1c>
 800cc0e:	42b5      	cmp	r5, r6
 800cc10:	462a      	mov	r2, r5
 800cc12:	4621      	mov	r1, r4
 800cc14:	bf28      	it	cs
 800cc16:	4632      	movcs	r2, r6
 800cc18:	f7ff ff86 	bl	800cb28 <memcpy>
 800cc1c:	4621      	mov	r1, r4
 800cc1e:	4640      	mov	r0, r8
 800cc20:	f7fe ff16 	bl	800ba50 <_free_r>
 800cc24:	463c      	mov	r4, r7
 800cc26:	e7e0      	b.n	800cbea <_realloc_r+0x1e>

0800cc28 <__ascii_wctomb>:
 800cc28:	4603      	mov	r3, r0
 800cc2a:	4608      	mov	r0, r1
 800cc2c:	b141      	cbz	r1, 800cc40 <__ascii_wctomb+0x18>
 800cc2e:	2aff      	cmp	r2, #255	@ 0xff
 800cc30:	d904      	bls.n	800cc3c <__ascii_wctomb+0x14>
 800cc32:	228a      	movs	r2, #138	@ 0x8a
 800cc34:	f04f 30ff 	mov.w	r0, #4294967295
 800cc38:	601a      	str	r2, [r3, #0]
 800cc3a:	4770      	bx	lr
 800cc3c:	2001      	movs	r0, #1
 800cc3e:	700a      	strb	r2, [r1, #0]
 800cc40:	4770      	bx	lr
	...

0800cc44 <fiprintf>:
 800cc44:	b40e      	push	{r1, r2, r3}
 800cc46:	b503      	push	{r0, r1, lr}
 800cc48:	4601      	mov	r1, r0
 800cc4a:	ab03      	add	r3, sp, #12
 800cc4c:	4805      	ldr	r0, [pc, #20]	@ (800cc64 <fiprintf+0x20>)
 800cc4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc52:	6800      	ldr	r0, [r0, #0]
 800cc54:	9301      	str	r3, [sp, #4]
 800cc56:	f7ff fcf9 	bl	800c64c <_vfiprintf_r>
 800cc5a:	b002      	add	sp, #8
 800cc5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc60:	b003      	add	sp, #12
 800cc62:	4770      	bx	lr
 800cc64:	200000e0 	.word	0x200000e0

0800cc68 <abort>:
 800cc68:	2006      	movs	r0, #6
 800cc6a:	b508      	push	{r3, lr}
 800cc6c:	f000 f834 	bl	800ccd8 <raise>
 800cc70:	2001      	movs	r0, #1
 800cc72:	f7f5 ffa0 	bl	8002bb6 <_exit>

0800cc76 <_malloc_usable_size_r>:
 800cc76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc7a:	1f18      	subs	r0, r3, #4
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	bfbc      	itt	lt
 800cc80:	580b      	ldrlt	r3, [r1, r0]
 800cc82:	18c0      	addlt	r0, r0, r3
 800cc84:	4770      	bx	lr

0800cc86 <_raise_r>:
 800cc86:	291f      	cmp	r1, #31
 800cc88:	b538      	push	{r3, r4, r5, lr}
 800cc8a:	4605      	mov	r5, r0
 800cc8c:	460c      	mov	r4, r1
 800cc8e:	d904      	bls.n	800cc9a <_raise_r+0x14>
 800cc90:	2316      	movs	r3, #22
 800cc92:	6003      	str	r3, [r0, #0]
 800cc94:	f04f 30ff 	mov.w	r0, #4294967295
 800cc98:	bd38      	pop	{r3, r4, r5, pc}
 800cc9a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cc9c:	b112      	cbz	r2, 800cca4 <_raise_r+0x1e>
 800cc9e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cca2:	b94b      	cbnz	r3, 800ccb8 <_raise_r+0x32>
 800cca4:	4628      	mov	r0, r5
 800cca6:	f000 f831 	bl	800cd0c <_getpid_r>
 800ccaa:	4622      	mov	r2, r4
 800ccac:	4601      	mov	r1, r0
 800ccae:	4628      	mov	r0, r5
 800ccb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccb4:	f000 b818 	b.w	800cce8 <_kill_r>
 800ccb8:	2b01      	cmp	r3, #1
 800ccba:	d00a      	beq.n	800ccd2 <_raise_r+0x4c>
 800ccbc:	1c59      	adds	r1, r3, #1
 800ccbe:	d103      	bne.n	800ccc8 <_raise_r+0x42>
 800ccc0:	2316      	movs	r3, #22
 800ccc2:	6003      	str	r3, [r0, #0]
 800ccc4:	2001      	movs	r0, #1
 800ccc6:	e7e7      	b.n	800cc98 <_raise_r+0x12>
 800ccc8:	2100      	movs	r1, #0
 800ccca:	4620      	mov	r0, r4
 800cccc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ccd0:	4798      	blx	r3
 800ccd2:	2000      	movs	r0, #0
 800ccd4:	e7e0      	b.n	800cc98 <_raise_r+0x12>
	...

0800ccd8 <raise>:
 800ccd8:	4b02      	ldr	r3, [pc, #8]	@ (800cce4 <raise+0xc>)
 800ccda:	4601      	mov	r1, r0
 800ccdc:	6818      	ldr	r0, [r3, #0]
 800ccde:	f7ff bfd2 	b.w	800cc86 <_raise_r>
 800cce2:	bf00      	nop
 800cce4:	200000e0 	.word	0x200000e0

0800cce8 <_kill_r>:
 800cce8:	b538      	push	{r3, r4, r5, lr}
 800ccea:	2300      	movs	r3, #0
 800ccec:	4d06      	ldr	r5, [pc, #24]	@ (800cd08 <_kill_r+0x20>)
 800ccee:	4604      	mov	r4, r0
 800ccf0:	4608      	mov	r0, r1
 800ccf2:	4611      	mov	r1, r2
 800ccf4:	602b      	str	r3, [r5, #0]
 800ccf6:	f7f5 ff4e 	bl	8002b96 <_kill>
 800ccfa:	1c43      	adds	r3, r0, #1
 800ccfc:	d102      	bne.n	800cd04 <_kill_r+0x1c>
 800ccfe:	682b      	ldr	r3, [r5, #0]
 800cd00:	b103      	cbz	r3, 800cd04 <_kill_r+0x1c>
 800cd02:	6023      	str	r3, [r4, #0]
 800cd04:	bd38      	pop	{r3, r4, r5, pc}
 800cd06:	bf00      	nop
 800cd08:	200006a8 	.word	0x200006a8

0800cd0c <_getpid_r>:
 800cd0c:	f7f5 bf3c 	b.w	8002b88 <_getpid>

0800cd10 <pow>:
 800cd10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd14:	4614      	mov	r4, r2
 800cd16:	461d      	mov	r5, r3
 800cd18:	4680      	mov	r8, r0
 800cd1a:	4689      	mov	r9, r1
 800cd1c:	f000 f898 	bl	800ce50 <__ieee754_pow>
 800cd20:	4622      	mov	r2, r4
 800cd22:	4606      	mov	r6, r0
 800cd24:	460f      	mov	r7, r1
 800cd26:	462b      	mov	r3, r5
 800cd28:	4620      	mov	r0, r4
 800cd2a:	4629      	mov	r1, r5
 800cd2c:	f7f3 fe86 	bl	8000a3c <__aeabi_dcmpun>
 800cd30:	bbc8      	cbnz	r0, 800cda6 <pow+0x96>
 800cd32:	2200      	movs	r2, #0
 800cd34:	2300      	movs	r3, #0
 800cd36:	4640      	mov	r0, r8
 800cd38:	4649      	mov	r1, r9
 800cd3a:	f7f3 fe4d 	bl	80009d8 <__aeabi_dcmpeq>
 800cd3e:	b1b8      	cbz	r0, 800cd70 <pow+0x60>
 800cd40:	2200      	movs	r2, #0
 800cd42:	2300      	movs	r3, #0
 800cd44:	4620      	mov	r0, r4
 800cd46:	4629      	mov	r1, r5
 800cd48:	f7f3 fe46 	bl	80009d8 <__aeabi_dcmpeq>
 800cd4c:	2800      	cmp	r0, #0
 800cd4e:	d141      	bne.n	800cdd4 <pow+0xc4>
 800cd50:	4620      	mov	r0, r4
 800cd52:	4629      	mov	r1, r5
 800cd54:	f000 f844 	bl	800cde0 <finite>
 800cd58:	b328      	cbz	r0, 800cda6 <pow+0x96>
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	4620      	mov	r0, r4
 800cd60:	4629      	mov	r1, r5
 800cd62:	f7f3 fe43 	bl	80009ec <__aeabi_dcmplt>
 800cd66:	b1f0      	cbz	r0, 800cda6 <pow+0x96>
 800cd68:	f7fd ffe4 	bl	800ad34 <__errno>
 800cd6c:	2322      	movs	r3, #34	@ 0x22
 800cd6e:	e019      	b.n	800cda4 <pow+0x94>
 800cd70:	4630      	mov	r0, r6
 800cd72:	4639      	mov	r1, r7
 800cd74:	f000 f834 	bl	800cde0 <finite>
 800cd78:	b9c8      	cbnz	r0, 800cdae <pow+0x9e>
 800cd7a:	4640      	mov	r0, r8
 800cd7c:	4649      	mov	r1, r9
 800cd7e:	f000 f82f 	bl	800cde0 <finite>
 800cd82:	b1a0      	cbz	r0, 800cdae <pow+0x9e>
 800cd84:	4620      	mov	r0, r4
 800cd86:	4629      	mov	r1, r5
 800cd88:	f000 f82a 	bl	800cde0 <finite>
 800cd8c:	b178      	cbz	r0, 800cdae <pow+0x9e>
 800cd8e:	4632      	mov	r2, r6
 800cd90:	463b      	mov	r3, r7
 800cd92:	4630      	mov	r0, r6
 800cd94:	4639      	mov	r1, r7
 800cd96:	f7f3 fe51 	bl	8000a3c <__aeabi_dcmpun>
 800cd9a:	2800      	cmp	r0, #0
 800cd9c:	d0e4      	beq.n	800cd68 <pow+0x58>
 800cd9e:	f7fd ffc9 	bl	800ad34 <__errno>
 800cda2:	2321      	movs	r3, #33	@ 0x21
 800cda4:	6003      	str	r3, [r0, #0]
 800cda6:	4630      	mov	r0, r6
 800cda8:	4639      	mov	r1, r7
 800cdaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdae:	2200      	movs	r2, #0
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	4630      	mov	r0, r6
 800cdb4:	4639      	mov	r1, r7
 800cdb6:	f7f3 fe0f 	bl	80009d8 <__aeabi_dcmpeq>
 800cdba:	2800      	cmp	r0, #0
 800cdbc:	d0f3      	beq.n	800cda6 <pow+0x96>
 800cdbe:	4640      	mov	r0, r8
 800cdc0:	4649      	mov	r1, r9
 800cdc2:	f000 f80d 	bl	800cde0 <finite>
 800cdc6:	2800      	cmp	r0, #0
 800cdc8:	d0ed      	beq.n	800cda6 <pow+0x96>
 800cdca:	4620      	mov	r0, r4
 800cdcc:	4629      	mov	r1, r5
 800cdce:	f000 f807 	bl	800cde0 <finite>
 800cdd2:	e7c8      	b.n	800cd66 <pow+0x56>
 800cdd4:	2600      	movs	r6, #0
 800cdd6:	4f01      	ldr	r7, [pc, #4]	@ (800cddc <pow+0xcc>)
 800cdd8:	e7e5      	b.n	800cda6 <pow+0x96>
 800cdda:	bf00      	nop
 800cddc:	3ff00000 	.word	0x3ff00000

0800cde0 <finite>:
 800cde0:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800cde4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800cde8:	0fc0      	lsrs	r0, r0, #31
 800cdea:	4770      	bx	lr

0800cdec <trunc>:
 800cdec:	e92d 4878 	stmdb	sp!, {r3, r4, r5, r6, fp, lr}
 800cdf0:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800cdf4:	f2a5 34ff 	subw	r4, r5, #1023	@ 0x3ff
 800cdf8:	2c13      	cmp	r4, #19
 800cdfa:	4683      	mov	fp, r0
 800cdfc:	468c      	mov	ip, r1
 800cdfe:	dc13      	bgt.n	800ce28 <trunc+0x3c>
 800ce00:	2c00      	cmp	r4, #0
 800ce02:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800ce06:	da06      	bge.n	800ce16 <trunc+0x2a>
 800ce08:	2200      	movs	r2, #0
 800ce0a:	46ac      	mov	ip, r5
 800ce0c:	4693      	mov	fp, r2
 800ce0e:	4658      	mov	r0, fp
 800ce10:	4661      	mov	r1, ip
 800ce12:	e8bd 8878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, pc}
 800ce16:	2000      	movs	r0, #0
 800ce18:	4b0c      	ldr	r3, [pc, #48]	@ (800ce4c <trunc+0x60>)
 800ce1a:	4123      	asrs	r3, r4
 800ce1c:	400b      	ands	r3, r1
 800ce1e:	ea43 0105 	orr.w	r1, r3, r5
 800ce22:	4683      	mov	fp, r0
 800ce24:	468c      	mov	ip, r1
 800ce26:	e7f2      	b.n	800ce0e <trunc+0x22>
 800ce28:	2c33      	cmp	r4, #51	@ 0x33
 800ce2a:	dd07      	ble.n	800ce3c <trunc+0x50>
 800ce2c:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
 800ce30:	d1ed      	bne.n	800ce0e <trunc+0x22>
 800ce32:	4602      	mov	r2, r0
 800ce34:	460b      	mov	r3, r1
 800ce36:	f7f3 f9b1 	bl	800019c <__adddf3>
 800ce3a:	e7f2      	b.n	800ce22 <trunc+0x36>
 800ce3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ce40:	f2a5 4513 	subw	r5, r5, #1043	@ 0x413
 800ce44:	40eb      	lsrs	r3, r5
 800ce46:	ea20 0003 	bic.w	r0, r0, r3
 800ce4a:	e7ea      	b.n	800ce22 <trunc+0x36>
 800ce4c:	fff00000 	.word	0xfff00000

0800ce50 <__ieee754_pow>:
 800ce50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce54:	b091      	sub	sp, #68	@ 0x44
 800ce56:	e9cd 2300 	strd	r2, r3, [sp]
 800ce5a:	468b      	mov	fp, r1
 800ce5c:	e9dd 1800 	ldrd	r1, r8, [sp]
 800ce60:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800ce64:	4682      	mov	sl, r0
 800ce66:	ea57 0001 	orrs.w	r0, r7, r1
 800ce6a:	d112      	bne.n	800ce92 <__ieee754_pow+0x42>
 800ce6c:	4653      	mov	r3, sl
 800ce6e:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800ce72:	18db      	adds	r3, r3, r3
 800ce74:	4152      	adcs	r2, r2
 800ce76:	4298      	cmp	r0, r3
 800ce78:	4b91      	ldr	r3, [pc, #580]	@ (800d0c0 <__ieee754_pow+0x270>)
 800ce7a:	4193      	sbcs	r3, r2
 800ce7c:	f080 84ce 	bcs.w	800d81c <__ieee754_pow+0x9cc>
 800ce80:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce84:	4650      	mov	r0, sl
 800ce86:	4659      	mov	r1, fp
 800ce88:	f7f3 f988 	bl	800019c <__adddf3>
 800ce8c:	b011      	add	sp, #68	@ 0x44
 800ce8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce92:	4b8c      	ldr	r3, [pc, #560]	@ (800d0c4 <__ieee754_pow+0x274>)
 800ce94:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 800ce98:	429e      	cmp	r6, r3
 800ce9a:	465d      	mov	r5, fp
 800ce9c:	46d1      	mov	r9, sl
 800ce9e:	d807      	bhi.n	800ceb0 <__ieee754_pow+0x60>
 800cea0:	d102      	bne.n	800cea8 <__ieee754_pow+0x58>
 800cea2:	f1ba 0f00 	cmp.w	sl, #0
 800cea6:	d1eb      	bne.n	800ce80 <__ieee754_pow+0x30>
 800cea8:	429f      	cmp	r7, r3
 800ceaa:	d801      	bhi.n	800ceb0 <__ieee754_pow+0x60>
 800ceac:	d10f      	bne.n	800cece <__ieee754_pow+0x7e>
 800ceae:	b171      	cbz	r1, 800cece <__ieee754_pow+0x7e>
 800ceb0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800ceb4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800ceb8:	ea55 0509 	orrs.w	r5, r5, r9
 800cebc:	d1e0      	bne.n	800ce80 <__ieee754_pow+0x30>
 800cebe:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cec2:	18db      	adds	r3, r3, r3
 800cec4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800cec8:	4152      	adcs	r2, r2
 800ceca:	429d      	cmp	r5, r3
 800cecc:	e7d4      	b.n	800ce78 <__ieee754_pow+0x28>
 800cece:	2d00      	cmp	r5, #0
 800ced0:	4633      	mov	r3, r6
 800ced2:	da39      	bge.n	800cf48 <__ieee754_pow+0xf8>
 800ced4:	4a7c      	ldr	r2, [pc, #496]	@ (800d0c8 <__ieee754_pow+0x278>)
 800ced6:	4297      	cmp	r7, r2
 800ced8:	d84e      	bhi.n	800cf78 <__ieee754_pow+0x128>
 800ceda:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800cede:	4297      	cmp	r7, r2
 800cee0:	f240 84ab 	bls.w	800d83a <__ieee754_pow+0x9ea>
 800cee4:	153a      	asrs	r2, r7, #20
 800cee6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800ceea:	2a14      	cmp	r2, #20
 800ceec:	dd0f      	ble.n	800cf0e <__ieee754_pow+0xbe>
 800ceee:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800cef2:	fa21 f402 	lsr.w	r4, r1, r2
 800cef6:	fa04 f202 	lsl.w	r2, r4, r2
 800cefa:	428a      	cmp	r2, r1
 800cefc:	f040 849d 	bne.w	800d83a <__ieee754_pow+0x9ea>
 800cf00:	f004 0401 	and.w	r4, r4, #1
 800cf04:	f1c4 0402 	rsb	r4, r4, #2
 800cf08:	2900      	cmp	r1, #0
 800cf0a:	d15a      	bne.n	800cfc2 <__ieee754_pow+0x172>
 800cf0c:	e00e      	b.n	800cf2c <__ieee754_pow+0xdc>
 800cf0e:	2900      	cmp	r1, #0
 800cf10:	d156      	bne.n	800cfc0 <__ieee754_pow+0x170>
 800cf12:	f1c2 0214 	rsb	r2, r2, #20
 800cf16:	fa47 f402 	asr.w	r4, r7, r2
 800cf1a:	fa04 f202 	lsl.w	r2, r4, r2
 800cf1e:	42ba      	cmp	r2, r7
 800cf20:	f040 8488 	bne.w	800d834 <__ieee754_pow+0x9e4>
 800cf24:	f004 0401 	and.w	r4, r4, #1
 800cf28:	f1c4 0402 	rsb	r4, r4, #2
 800cf2c:	4a67      	ldr	r2, [pc, #412]	@ (800d0cc <__ieee754_pow+0x27c>)
 800cf2e:	4297      	cmp	r7, r2
 800cf30:	d130      	bne.n	800cf94 <__ieee754_pow+0x144>
 800cf32:	f1b8 0f00 	cmp.w	r8, #0
 800cf36:	f280 8479 	bge.w	800d82c <__ieee754_pow+0x9dc>
 800cf3a:	4652      	mov	r2, sl
 800cf3c:	465b      	mov	r3, fp
 800cf3e:	2000      	movs	r0, #0
 800cf40:	4962      	ldr	r1, [pc, #392]	@ (800d0cc <__ieee754_pow+0x27c>)
 800cf42:	f7f3 fc0b 	bl	800075c <__aeabi_ddiv>
 800cf46:	e7a1      	b.n	800ce8c <__ieee754_pow+0x3c>
 800cf48:	2400      	movs	r4, #0
 800cf4a:	2900      	cmp	r1, #0
 800cf4c:	d139      	bne.n	800cfc2 <__ieee754_pow+0x172>
 800cf4e:	4a5d      	ldr	r2, [pc, #372]	@ (800d0c4 <__ieee754_pow+0x274>)
 800cf50:	4297      	cmp	r7, r2
 800cf52:	d1eb      	bne.n	800cf2c <__ieee754_pow+0xdc>
 800cf54:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 800cf58:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800cf5c:	ea53 0309 	orrs.w	r3, r3, r9
 800cf60:	f000 845c 	beq.w	800d81c <__ieee754_pow+0x9cc>
 800cf64:	4b5a      	ldr	r3, [pc, #360]	@ (800d0d0 <__ieee754_pow+0x280>)
 800cf66:	429e      	cmp	r6, r3
 800cf68:	d908      	bls.n	800cf7c <__ieee754_pow+0x12c>
 800cf6a:	f1b8 0f00 	cmp.w	r8, #0
 800cf6e:	f2c0 8459 	blt.w	800d824 <__ieee754_pow+0x9d4>
 800cf72:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf76:	e789      	b.n	800ce8c <__ieee754_pow+0x3c>
 800cf78:	2402      	movs	r4, #2
 800cf7a:	e7e6      	b.n	800cf4a <__ieee754_pow+0xfa>
 800cf7c:	f1b8 0f00 	cmp.w	r8, #0
 800cf80:	f04f 0000 	mov.w	r0, #0
 800cf84:	f04f 0100 	mov.w	r1, #0
 800cf88:	da80      	bge.n	800ce8c <__ieee754_pow+0x3c>
 800cf8a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800cf8e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800cf92:	e77b      	b.n	800ce8c <__ieee754_pow+0x3c>
 800cf94:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800cf98:	d106      	bne.n	800cfa8 <__ieee754_pow+0x158>
 800cf9a:	4652      	mov	r2, sl
 800cf9c:	465b      	mov	r3, fp
 800cf9e:	4650      	mov	r0, sl
 800cfa0:	4659      	mov	r1, fp
 800cfa2:	f7f3 fab1 	bl	8000508 <__aeabi_dmul>
 800cfa6:	e771      	b.n	800ce8c <__ieee754_pow+0x3c>
 800cfa8:	4a4a      	ldr	r2, [pc, #296]	@ (800d0d4 <__ieee754_pow+0x284>)
 800cfaa:	4590      	cmp	r8, r2
 800cfac:	d109      	bne.n	800cfc2 <__ieee754_pow+0x172>
 800cfae:	2d00      	cmp	r5, #0
 800cfb0:	db07      	blt.n	800cfc2 <__ieee754_pow+0x172>
 800cfb2:	4650      	mov	r0, sl
 800cfb4:	4659      	mov	r1, fp
 800cfb6:	b011      	add	sp, #68	@ 0x44
 800cfb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfbc:	f000 bd12 	b.w	800d9e4 <__ieee754_sqrt>
 800cfc0:	2400      	movs	r4, #0
 800cfc2:	4650      	mov	r0, sl
 800cfc4:	4659      	mov	r1, fp
 800cfc6:	9302      	str	r3, [sp, #8]
 800cfc8:	f000 fc6a 	bl	800d8a0 <fabs>
 800cfcc:	9b02      	ldr	r3, [sp, #8]
 800cfce:	f1b9 0f00 	cmp.w	r9, #0
 800cfd2:	d127      	bne.n	800d024 <__ieee754_pow+0x1d4>
 800cfd4:	4a3d      	ldr	r2, [pc, #244]	@ (800d0cc <__ieee754_pow+0x27c>)
 800cfd6:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800cfda:	4594      	cmp	ip, r2
 800cfdc:	d000      	beq.n	800cfe0 <__ieee754_pow+0x190>
 800cfde:	bb0e      	cbnz	r6, 800d024 <__ieee754_pow+0x1d4>
 800cfe0:	f1b8 0f00 	cmp.w	r8, #0
 800cfe4:	da05      	bge.n	800cff2 <__ieee754_pow+0x1a2>
 800cfe6:	4602      	mov	r2, r0
 800cfe8:	460b      	mov	r3, r1
 800cfea:	2000      	movs	r0, #0
 800cfec:	4937      	ldr	r1, [pc, #220]	@ (800d0cc <__ieee754_pow+0x27c>)
 800cfee:	f7f3 fbb5 	bl	800075c <__aeabi_ddiv>
 800cff2:	2d00      	cmp	r5, #0
 800cff4:	f6bf af4a 	bge.w	800ce8c <__ieee754_pow+0x3c>
 800cff8:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800cffc:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800d000:	4326      	orrs	r6, r4
 800d002:	d108      	bne.n	800d016 <__ieee754_pow+0x1c6>
 800d004:	4602      	mov	r2, r0
 800d006:	460b      	mov	r3, r1
 800d008:	4610      	mov	r0, r2
 800d00a:	4619      	mov	r1, r3
 800d00c:	f7f3 f8c4 	bl	8000198 <__aeabi_dsub>
 800d010:	4602      	mov	r2, r0
 800d012:	460b      	mov	r3, r1
 800d014:	e795      	b.n	800cf42 <__ieee754_pow+0xf2>
 800d016:	2c01      	cmp	r4, #1
 800d018:	f47f af38 	bne.w	800ce8c <__ieee754_pow+0x3c>
 800d01c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d020:	4619      	mov	r1, r3
 800d022:	e733      	b.n	800ce8c <__ieee754_pow+0x3c>
 800d024:	0fea      	lsrs	r2, r5, #31
 800d026:	3a01      	subs	r2, #1
 800d028:	ea52 0c04 	orrs.w	ip, r2, r4
 800d02c:	d102      	bne.n	800d034 <__ieee754_pow+0x1e4>
 800d02e:	4652      	mov	r2, sl
 800d030:	465b      	mov	r3, fp
 800d032:	e7e9      	b.n	800d008 <__ieee754_pow+0x1b8>
 800d034:	f04f 0900 	mov.w	r9, #0
 800d038:	3c01      	subs	r4, #1
 800d03a:	4314      	orrs	r4, r2
 800d03c:	bf14      	ite	ne
 800d03e:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800d0cc <__ieee754_pow+0x27c>
 800d042:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800d0d8 <__ieee754_pow+0x288>
 800d046:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800d04a:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800d04e:	f240 8107 	bls.w	800d260 <__ieee754_pow+0x410>
 800d052:	4b22      	ldr	r3, [pc, #136]	@ (800d0dc <__ieee754_pow+0x28c>)
 800d054:	429f      	cmp	r7, r3
 800d056:	4b1e      	ldr	r3, [pc, #120]	@ (800d0d0 <__ieee754_pow+0x280>)
 800d058:	d913      	bls.n	800d082 <__ieee754_pow+0x232>
 800d05a:	429e      	cmp	r6, r3
 800d05c:	d808      	bhi.n	800d070 <__ieee754_pow+0x220>
 800d05e:	f1b8 0f00 	cmp.w	r8, #0
 800d062:	da08      	bge.n	800d076 <__ieee754_pow+0x226>
 800d064:	2000      	movs	r0, #0
 800d066:	b011      	add	sp, #68	@ 0x44
 800d068:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d06c:	f000 bcb4 	b.w	800d9d8 <__math_oflow>
 800d070:	f1b8 0f00 	cmp.w	r8, #0
 800d074:	dcf6      	bgt.n	800d064 <__ieee754_pow+0x214>
 800d076:	2000      	movs	r0, #0
 800d078:	b011      	add	sp, #68	@ 0x44
 800d07a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d07e:	f000 bca6 	b.w	800d9ce <__math_uflow>
 800d082:	429e      	cmp	r6, r3
 800d084:	d20c      	bcs.n	800d0a0 <__ieee754_pow+0x250>
 800d086:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d08a:	2200      	movs	r2, #0
 800d08c:	2300      	movs	r3, #0
 800d08e:	f7f3 fcad 	bl	80009ec <__aeabi_dcmplt>
 800d092:	3800      	subs	r0, #0
 800d094:	bf18      	it	ne
 800d096:	2001      	movne	r0, #1
 800d098:	f1b8 0f00 	cmp.w	r8, #0
 800d09c:	daec      	bge.n	800d078 <__ieee754_pow+0x228>
 800d09e:	e7e2      	b.n	800d066 <__ieee754_pow+0x216>
 800d0a0:	4b0a      	ldr	r3, [pc, #40]	@ (800d0cc <__ieee754_pow+0x27c>)
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	429e      	cmp	r6, r3
 800d0a6:	d91b      	bls.n	800d0e0 <__ieee754_pow+0x290>
 800d0a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	f7f3 fc9d 	bl	80009ec <__aeabi_dcmplt>
 800d0b2:	3800      	subs	r0, #0
 800d0b4:	bf18      	it	ne
 800d0b6:	2001      	movne	r0, #1
 800d0b8:	f1b8 0f00 	cmp.w	r8, #0
 800d0bc:	dcd3      	bgt.n	800d066 <__ieee754_pow+0x216>
 800d0be:	e7db      	b.n	800d078 <__ieee754_pow+0x228>
 800d0c0:	fff00000 	.word	0xfff00000
 800d0c4:	7ff00000 	.word	0x7ff00000
 800d0c8:	433fffff 	.word	0x433fffff
 800d0cc:	3ff00000 	.word	0x3ff00000
 800d0d0:	3fefffff 	.word	0x3fefffff
 800d0d4:	3fe00000 	.word	0x3fe00000
 800d0d8:	bff00000 	.word	0xbff00000
 800d0dc:	43f00000 	.word	0x43f00000
 800d0e0:	4b5b      	ldr	r3, [pc, #364]	@ (800d250 <__ieee754_pow+0x400>)
 800d0e2:	f7f3 f859 	bl	8000198 <__aeabi_dsub>
 800d0e6:	a352      	add	r3, pc, #328	@ (adr r3, 800d230 <__ieee754_pow+0x3e0>)
 800d0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ec:	4604      	mov	r4, r0
 800d0ee:	460d      	mov	r5, r1
 800d0f0:	f7f3 fa0a 	bl	8000508 <__aeabi_dmul>
 800d0f4:	a350      	add	r3, pc, #320	@ (adr r3, 800d238 <__ieee754_pow+0x3e8>)
 800d0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0fa:	4606      	mov	r6, r0
 800d0fc:	460f      	mov	r7, r1
 800d0fe:	4620      	mov	r0, r4
 800d100:	4629      	mov	r1, r5
 800d102:	f7f3 fa01 	bl	8000508 <__aeabi_dmul>
 800d106:	2200      	movs	r2, #0
 800d108:	4682      	mov	sl, r0
 800d10a:	468b      	mov	fp, r1
 800d10c:	4620      	mov	r0, r4
 800d10e:	4629      	mov	r1, r5
 800d110:	4b50      	ldr	r3, [pc, #320]	@ (800d254 <__ieee754_pow+0x404>)
 800d112:	f7f3 f9f9 	bl	8000508 <__aeabi_dmul>
 800d116:	4602      	mov	r2, r0
 800d118:	460b      	mov	r3, r1
 800d11a:	a149      	add	r1, pc, #292	@ (adr r1, 800d240 <__ieee754_pow+0x3f0>)
 800d11c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d120:	f7f3 f83a 	bl	8000198 <__aeabi_dsub>
 800d124:	4622      	mov	r2, r4
 800d126:	462b      	mov	r3, r5
 800d128:	f7f3 f9ee 	bl	8000508 <__aeabi_dmul>
 800d12c:	4602      	mov	r2, r0
 800d12e:	460b      	mov	r3, r1
 800d130:	2000      	movs	r0, #0
 800d132:	4949      	ldr	r1, [pc, #292]	@ (800d258 <__ieee754_pow+0x408>)
 800d134:	f7f3 f830 	bl	8000198 <__aeabi_dsub>
 800d138:	4622      	mov	r2, r4
 800d13a:	4680      	mov	r8, r0
 800d13c:	4689      	mov	r9, r1
 800d13e:	462b      	mov	r3, r5
 800d140:	4620      	mov	r0, r4
 800d142:	4629      	mov	r1, r5
 800d144:	f7f3 f9e0 	bl	8000508 <__aeabi_dmul>
 800d148:	4602      	mov	r2, r0
 800d14a:	460b      	mov	r3, r1
 800d14c:	4640      	mov	r0, r8
 800d14e:	4649      	mov	r1, r9
 800d150:	f7f3 f9da 	bl	8000508 <__aeabi_dmul>
 800d154:	a33c      	add	r3, pc, #240	@ (adr r3, 800d248 <__ieee754_pow+0x3f8>)
 800d156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d15a:	f7f3 f9d5 	bl	8000508 <__aeabi_dmul>
 800d15e:	4602      	mov	r2, r0
 800d160:	460b      	mov	r3, r1
 800d162:	4650      	mov	r0, sl
 800d164:	4659      	mov	r1, fp
 800d166:	f7f3 f817 	bl	8000198 <__aeabi_dsub>
 800d16a:	2400      	movs	r4, #0
 800d16c:	4602      	mov	r2, r0
 800d16e:	460b      	mov	r3, r1
 800d170:	4680      	mov	r8, r0
 800d172:	4689      	mov	r9, r1
 800d174:	4630      	mov	r0, r6
 800d176:	4639      	mov	r1, r7
 800d178:	f7f3 f810 	bl	800019c <__adddf3>
 800d17c:	4632      	mov	r2, r6
 800d17e:	463b      	mov	r3, r7
 800d180:	4620      	mov	r0, r4
 800d182:	460d      	mov	r5, r1
 800d184:	f7f3 f808 	bl	8000198 <__aeabi_dsub>
 800d188:	4602      	mov	r2, r0
 800d18a:	460b      	mov	r3, r1
 800d18c:	4640      	mov	r0, r8
 800d18e:	4649      	mov	r1, r9
 800d190:	f7f3 f802 	bl	8000198 <__aeabi_dsub>
 800d194:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d198:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d19c:	2300      	movs	r3, #0
 800d19e:	9304      	str	r3, [sp, #16]
 800d1a0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800d1a4:	4606      	mov	r6, r0
 800d1a6:	460f      	mov	r7, r1
 800d1a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d1ac:	4652      	mov	r2, sl
 800d1ae:	465b      	mov	r3, fp
 800d1b0:	f7f2 fff2 	bl	8000198 <__aeabi_dsub>
 800d1b4:	4622      	mov	r2, r4
 800d1b6:	462b      	mov	r3, r5
 800d1b8:	f7f3 f9a6 	bl	8000508 <__aeabi_dmul>
 800d1bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d1c0:	4680      	mov	r8, r0
 800d1c2:	4689      	mov	r9, r1
 800d1c4:	4630      	mov	r0, r6
 800d1c6:	4639      	mov	r1, r7
 800d1c8:	f7f3 f99e 	bl	8000508 <__aeabi_dmul>
 800d1cc:	4602      	mov	r2, r0
 800d1ce:	460b      	mov	r3, r1
 800d1d0:	4640      	mov	r0, r8
 800d1d2:	4649      	mov	r1, r9
 800d1d4:	f7f2 ffe2 	bl	800019c <__adddf3>
 800d1d8:	4652      	mov	r2, sl
 800d1da:	465b      	mov	r3, fp
 800d1dc:	4606      	mov	r6, r0
 800d1de:	460f      	mov	r7, r1
 800d1e0:	4620      	mov	r0, r4
 800d1e2:	4629      	mov	r1, r5
 800d1e4:	f7f3 f990 	bl	8000508 <__aeabi_dmul>
 800d1e8:	460b      	mov	r3, r1
 800d1ea:	4602      	mov	r2, r0
 800d1ec:	4680      	mov	r8, r0
 800d1ee:	4689      	mov	r9, r1
 800d1f0:	4630      	mov	r0, r6
 800d1f2:	4639      	mov	r1, r7
 800d1f4:	f7f2 ffd2 	bl	800019c <__adddf3>
 800d1f8:	4b18      	ldr	r3, [pc, #96]	@ (800d25c <__ieee754_pow+0x40c>)
 800d1fa:	4604      	mov	r4, r0
 800d1fc:	4299      	cmp	r1, r3
 800d1fe:	460d      	mov	r5, r1
 800d200:	468a      	mov	sl, r1
 800d202:	468b      	mov	fp, r1
 800d204:	f340 82e0 	ble.w	800d7c8 <__ieee754_pow+0x978>
 800d208:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800d20c:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800d210:	4303      	orrs	r3, r0
 800d212:	f000 81df 	beq.w	800d5d4 <__ieee754_pow+0x784>
 800d216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d21a:	2200      	movs	r2, #0
 800d21c:	2300      	movs	r3, #0
 800d21e:	f7f3 fbe5 	bl	80009ec <__aeabi_dcmplt>
 800d222:	3800      	subs	r0, #0
 800d224:	bf18      	it	ne
 800d226:	2001      	movne	r0, #1
 800d228:	e71d      	b.n	800d066 <__ieee754_pow+0x216>
 800d22a:	bf00      	nop
 800d22c:	f3af 8000 	nop.w
 800d230:	60000000 	.word	0x60000000
 800d234:	3ff71547 	.word	0x3ff71547
 800d238:	f85ddf44 	.word	0xf85ddf44
 800d23c:	3e54ae0b 	.word	0x3e54ae0b
 800d240:	55555555 	.word	0x55555555
 800d244:	3fd55555 	.word	0x3fd55555
 800d248:	652b82fe 	.word	0x652b82fe
 800d24c:	3ff71547 	.word	0x3ff71547
 800d250:	3ff00000 	.word	0x3ff00000
 800d254:	3fd00000 	.word	0x3fd00000
 800d258:	3fe00000 	.word	0x3fe00000
 800d25c:	408fffff 	.word	0x408fffff
 800d260:	4ad3      	ldr	r2, [pc, #844]	@ (800d5b0 <__ieee754_pow+0x760>)
 800d262:	402a      	ands	r2, r5
 800d264:	2a00      	cmp	r2, #0
 800d266:	f040 817a 	bne.w	800d55e <__ieee754_pow+0x70e>
 800d26a:	4bd2      	ldr	r3, [pc, #840]	@ (800d5b4 <__ieee754_pow+0x764>)
 800d26c:	2200      	movs	r2, #0
 800d26e:	f7f3 f94b 	bl	8000508 <__aeabi_dmul>
 800d272:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800d276:	460b      	mov	r3, r1
 800d278:	151a      	asrs	r2, r3, #20
 800d27a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800d27e:	4422      	add	r2, r4
 800d280:	920a      	str	r2, [sp, #40]	@ 0x28
 800d282:	4acd      	ldr	r2, [pc, #820]	@ (800d5b8 <__ieee754_pow+0x768>)
 800d284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d288:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800d28c:	4293      	cmp	r3, r2
 800d28e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d292:	dd08      	ble.n	800d2a6 <__ieee754_pow+0x456>
 800d294:	4ac9      	ldr	r2, [pc, #804]	@ (800d5bc <__ieee754_pow+0x76c>)
 800d296:	4293      	cmp	r3, r2
 800d298:	f340 8163 	ble.w	800d562 <__ieee754_pow+0x712>
 800d29c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d29e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800d2a2:	3301      	adds	r3, #1
 800d2a4:	930a      	str	r3, [sp, #40]	@ 0x28
 800d2a6:	2600      	movs	r6, #0
 800d2a8:	00f3      	lsls	r3, r6, #3
 800d2aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d2ac:	4bc4      	ldr	r3, [pc, #784]	@ (800d5c0 <__ieee754_pow+0x770>)
 800d2ae:	4629      	mov	r1, r5
 800d2b0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d2b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800d2be:	4623      	mov	r3, r4
 800d2c0:	4682      	mov	sl, r0
 800d2c2:	f7f2 ff69 	bl	8000198 <__aeabi_dsub>
 800d2c6:	4652      	mov	r2, sl
 800d2c8:	462b      	mov	r3, r5
 800d2ca:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800d2ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d2d2:	f7f2 ff63 	bl	800019c <__adddf3>
 800d2d6:	4602      	mov	r2, r0
 800d2d8:	460b      	mov	r3, r1
 800d2da:	2000      	movs	r0, #0
 800d2dc:	49b9      	ldr	r1, [pc, #740]	@ (800d5c4 <__ieee754_pow+0x774>)
 800d2de:	f7f3 fa3d 	bl	800075c <__aeabi_ddiv>
 800d2e2:	4602      	mov	r2, r0
 800d2e4:	460b      	mov	r3, r1
 800d2e6:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d2ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d2ee:	f7f3 f90b 	bl	8000508 <__aeabi_dmul>
 800d2f2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d2f6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800d2fa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d2fe:	2300      	movs	r3, #0
 800d300:	2200      	movs	r2, #0
 800d302:	46ab      	mov	fp, r5
 800d304:	106d      	asrs	r5, r5, #1
 800d306:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800d30a:	9304      	str	r3, [sp, #16]
 800d30c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800d310:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d314:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800d318:	4640      	mov	r0, r8
 800d31a:	4649      	mov	r1, r9
 800d31c:	4614      	mov	r4, r2
 800d31e:	461d      	mov	r5, r3
 800d320:	f7f3 f8f2 	bl	8000508 <__aeabi_dmul>
 800d324:	4602      	mov	r2, r0
 800d326:	460b      	mov	r3, r1
 800d328:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d32c:	f7f2 ff34 	bl	8000198 <__aeabi_dsub>
 800d330:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d334:	4606      	mov	r6, r0
 800d336:	460f      	mov	r7, r1
 800d338:	4620      	mov	r0, r4
 800d33a:	4629      	mov	r1, r5
 800d33c:	f7f2 ff2c 	bl	8000198 <__aeabi_dsub>
 800d340:	4602      	mov	r2, r0
 800d342:	460b      	mov	r3, r1
 800d344:	4650      	mov	r0, sl
 800d346:	4659      	mov	r1, fp
 800d348:	f7f2 ff26 	bl	8000198 <__aeabi_dsub>
 800d34c:	4642      	mov	r2, r8
 800d34e:	464b      	mov	r3, r9
 800d350:	f7f3 f8da 	bl	8000508 <__aeabi_dmul>
 800d354:	4602      	mov	r2, r0
 800d356:	460b      	mov	r3, r1
 800d358:	4630      	mov	r0, r6
 800d35a:	4639      	mov	r1, r7
 800d35c:	f7f2 ff1c 	bl	8000198 <__aeabi_dsub>
 800d360:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d364:	f7f3 f8d0 	bl	8000508 <__aeabi_dmul>
 800d368:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d36c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d370:	4610      	mov	r0, r2
 800d372:	4619      	mov	r1, r3
 800d374:	f7f3 f8c8 	bl	8000508 <__aeabi_dmul>
 800d378:	a37b      	add	r3, pc, #492	@ (adr r3, 800d568 <__ieee754_pow+0x718>)
 800d37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d37e:	4604      	mov	r4, r0
 800d380:	460d      	mov	r5, r1
 800d382:	f7f3 f8c1 	bl	8000508 <__aeabi_dmul>
 800d386:	a37a      	add	r3, pc, #488	@ (adr r3, 800d570 <__ieee754_pow+0x720>)
 800d388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d38c:	f7f2 ff06 	bl	800019c <__adddf3>
 800d390:	4622      	mov	r2, r4
 800d392:	462b      	mov	r3, r5
 800d394:	f7f3 f8b8 	bl	8000508 <__aeabi_dmul>
 800d398:	a377      	add	r3, pc, #476	@ (adr r3, 800d578 <__ieee754_pow+0x728>)
 800d39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d39e:	f7f2 fefd 	bl	800019c <__adddf3>
 800d3a2:	4622      	mov	r2, r4
 800d3a4:	462b      	mov	r3, r5
 800d3a6:	f7f3 f8af 	bl	8000508 <__aeabi_dmul>
 800d3aa:	a375      	add	r3, pc, #468	@ (adr r3, 800d580 <__ieee754_pow+0x730>)
 800d3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b0:	f7f2 fef4 	bl	800019c <__adddf3>
 800d3b4:	4622      	mov	r2, r4
 800d3b6:	462b      	mov	r3, r5
 800d3b8:	f7f3 f8a6 	bl	8000508 <__aeabi_dmul>
 800d3bc:	a372      	add	r3, pc, #456	@ (adr r3, 800d588 <__ieee754_pow+0x738>)
 800d3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c2:	f7f2 feeb 	bl	800019c <__adddf3>
 800d3c6:	4622      	mov	r2, r4
 800d3c8:	462b      	mov	r3, r5
 800d3ca:	f7f3 f89d 	bl	8000508 <__aeabi_dmul>
 800d3ce:	a370      	add	r3, pc, #448	@ (adr r3, 800d590 <__ieee754_pow+0x740>)
 800d3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d4:	f7f2 fee2 	bl	800019c <__adddf3>
 800d3d8:	4622      	mov	r2, r4
 800d3da:	4606      	mov	r6, r0
 800d3dc:	460f      	mov	r7, r1
 800d3de:	462b      	mov	r3, r5
 800d3e0:	4620      	mov	r0, r4
 800d3e2:	4629      	mov	r1, r5
 800d3e4:	f7f3 f890 	bl	8000508 <__aeabi_dmul>
 800d3e8:	4602      	mov	r2, r0
 800d3ea:	460b      	mov	r3, r1
 800d3ec:	4630      	mov	r0, r6
 800d3ee:	4639      	mov	r1, r7
 800d3f0:	f7f3 f88a 	bl	8000508 <__aeabi_dmul>
 800d3f4:	4604      	mov	r4, r0
 800d3f6:	460d      	mov	r5, r1
 800d3f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d3fc:	4642      	mov	r2, r8
 800d3fe:	464b      	mov	r3, r9
 800d400:	f7f2 fecc 	bl	800019c <__adddf3>
 800d404:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d408:	f7f3 f87e 	bl	8000508 <__aeabi_dmul>
 800d40c:	4622      	mov	r2, r4
 800d40e:	462b      	mov	r3, r5
 800d410:	f7f2 fec4 	bl	800019c <__adddf3>
 800d414:	4642      	mov	r2, r8
 800d416:	4682      	mov	sl, r0
 800d418:	468b      	mov	fp, r1
 800d41a:	464b      	mov	r3, r9
 800d41c:	4640      	mov	r0, r8
 800d41e:	4649      	mov	r1, r9
 800d420:	f7f3 f872 	bl	8000508 <__aeabi_dmul>
 800d424:	2200      	movs	r2, #0
 800d426:	4b68      	ldr	r3, [pc, #416]	@ (800d5c8 <__ieee754_pow+0x778>)
 800d428:	4606      	mov	r6, r0
 800d42a:	460f      	mov	r7, r1
 800d42c:	f7f2 feb6 	bl	800019c <__adddf3>
 800d430:	4652      	mov	r2, sl
 800d432:	465b      	mov	r3, fp
 800d434:	f7f2 feb2 	bl	800019c <__adddf3>
 800d438:	2400      	movs	r4, #0
 800d43a:	460d      	mov	r5, r1
 800d43c:	4622      	mov	r2, r4
 800d43e:	460b      	mov	r3, r1
 800d440:	4640      	mov	r0, r8
 800d442:	4649      	mov	r1, r9
 800d444:	f7f3 f860 	bl	8000508 <__aeabi_dmul>
 800d448:	2200      	movs	r2, #0
 800d44a:	4680      	mov	r8, r0
 800d44c:	4689      	mov	r9, r1
 800d44e:	4620      	mov	r0, r4
 800d450:	4629      	mov	r1, r5
 800d452:	4b5d      	ldr	r3, [pc, #372]	@ (800d5c8 <__ieee754_pow+0x778>)
 800d454:	f7f2 fea0 	bl	8000198 <__aeabi_dsub>
 800d458:	4632      	mov	r2, r6
 800d45a:	463b      	mov	r3, r7
 800d45c:	f7f2 fe9c 	bl	8000198 <__aeabi_dsub>
 800d460:	4602      	mov	r2, r0
 800d462:	460b      	mov	r3, r1
 800d464:	4650      	mov	r0, sl
 800d466:	4659      	mov	r1, fp
 800d468:	f7f2 fe96 	bl	8000198 <__aeabi_dsub>
 800d46c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d470:	f7f3 f84a 	bl	8000508 <__aeabi_dmul>
 800d474:	4622      	mov	r2, r4
 800d476:	4606      	mov	r6, r0
 800d478:	460f      	mov	r7, r1
 800d47a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d47e:	462b      	mov	r3, r5
 800d480:	f7f3 f842 	bl	8000508 <__aeabi_dmul>
 800d484:	4602      	mov	r2, r0
 800d486:	460b      	mov	r3, r1
 800d488:	4630      	mov	r0, r6
 800d48a:	4639      	mov	r1, r7
 800d48c:	f7f2 fe86 	bl	800019c <__adddf3>
 800d490:	2400      	movs	r4, #0
 800d492:	4606      	mov	r6, r0
 800d494:	460f      	mov	r7, r1
 800d496:	4602      	mov	r2, r0
 800d498:	460b      	mov	r3, r1
 800d49a:	4640      	mov	r0, r8
 800d49c:	4649      	mov	r1, r9
 800d49e:	f7f2 fe7d 	bl	800019c <__adddf3>
 800d4a2:	a33d      	add	r3, pc, #244	@ (adr r3, 800d598 <__ieee754_pow+0x748>)
 800d4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a8:	4620      	mov	r0, r4
 800d4aa:	460d      	mov	r5, r1
 800d4ac:	f7f3 f82c 	bl	8000508 <__aeabi_dmul>
 800d4b0:	4642      	mov	r2, r8
 800d4b2:	464b      	mov	r3, r9
 800d4b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d4b8:	4620      	mov	r0, r4
 800d4ba:	4629      	mov	r1, r5
 800d4bc:	f7f2 fe6c 	bl	8000198 <__aeabi_dsub>
 800d4c0:	4602      	mov	r2, r0
 800d4c2:	460b      	mov	r3, r1
 800d4c4:	4630      	mov	r0, r6
 800d4c6:	4639      	mov	r1, r7
 800d4c8:	f7f2 fe66 	bl	8000198 <__aeabi_dsub>
 800d4cc:	a334      	add	r3, pc, #208	@ (adr r3, 800d5a0 <__ieee754_pow+0x750>)
 800d4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d2:	f7f3 f819 	bl	8000508 <__aeabi_dmul>
 800d4d6:	a334      	add	r3, pc, #208	@ (adr r3, 800d5a8 <__ieee754_pow+0x758>)
 800d4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4dc:	4606      	mov	r6, r0
 800d4de:	460f      	mov	r7, r1
 800d4e0:	4620      	mov	r0, r4
 800d4e2:	4629      	mov	r1, r5
 800d4e4:	f7f3 f810 	bl	8000508 <__aeabi_dmul>
 800d4e8:	4602      	mov	r2, r0
 800d4ea:	460b      	mov	r3, r1
 800d4ec:	4630      	mov	r0, r6
 800d4ee:	4639      	mov	r1, r7
 800d4f0:	f7f2 fe54 	bl	800019c <__adddf3>
 800d4f4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d4f6:	4b35      	ldr	r3, [pc, #212]	@ (800d5cc <__ieee754_pow+0x77c>)
 800d4f8:	2400      	movs	r4, #0
 800d4fa:	4413      	add	r3, r2
 800d4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d500:	f7f2 fe4c 	bl	800019c <__adddf3>
 800d504:	4682      	mov	sl, r0
 800d506:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d508:	468b      	mov	fp, r1
 800d50a:	f7f2 ff93 	bl	8000434 <__aeabi_i2d>
 800d50e:	4606      	mov	r6, r0
 800d510:	460f      	mov	r7, r1
 800d512:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d514:	4b2e      	ldr	r3, [pc, #184]	@ (800d5d0 <__ieee754_pow+0x780>)
 800d516:	4413      	add	r3, r2
 800d518:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d51c:	4652      	mov	r2, sl
 800d51e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d522:	465b      	mov	r3, fp
 800d524:	f7f2 fe3a 	bl	800019c <__adddf3>
 800d528:	4642      	mov	r2, r8
 800d52a:	464b      	mov	r3, r9
 800d52c:	f7f2 fe36 	bl	800019c <__adddf3>
 800d530:	4632      	mov	r2, r6
 800d532:	463b      	mov	r3, r7
 800d534:	f7f2 fe32 	bl	800019c <__adddf3>
 800d538:	4632      	mov	r2, r6
 800d53a:	463b      	mov	r3, r7
 800d53c:	4620      	mov	r0, r4
 800d53e:	460d      	mov	r5, r1
 800d540:	f7f2 fe2a 	bl	8000198 <__aeabi_dsub>
 800d544:	4642      	mov	r2, r8
 800d546:	464b      	mov	r3, r9
 800d548:	f7f2 fe26 	bl	8000198 <__aeabi_dsub>
 800d54c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d550:	f7f2 fe22 	bl	8000198 <__aeabi_dsub>
 800d554:	4602      	mov	r2, r0
 800d556:	460b      	mov	r3, r1
 800d558:	4650      	mov	r0, sl
 800d55a:	4659      	mov	r1, fp
 800d55c:	e618      	b.n	800d190 <__ieee754_pow+0x340>
 800d55e:	2400      	movs	r4, #0
 800d560:	e68a      	b.n	800d278 <__ieee754_pow+0x428>
 800d562:	2601      	movs	r6, #1
 800d564:	e6a0      	b.n	800d2a8 <__ieee754_pow+0x458>
 800d566:	bf00      	nop
 800d568:	4a454eef 	.word	0x4a454eef
 800d56c:	3fca7e28 	.word	0x3fca7e28
 800d570:	93c9db65 	.word	0x93c9db65
 800d574:	3fcd864a 	.word	0x3fcd864a
 800d578:	a91d4101 	.word	0xa91d4101
 800d57c:	3fd17460 	.word	0x3fd17460
 800d580:	518f264d 	.word	0x518f264d
 800d584:	3fd55555 	.word	0x3fd55555
 800d588:	db6fabff 	.word	0xdb6fabff
 800d58c:	3fdb6db6 	.word	0x3fdb6db6
 800d590:	33333303 	.word	0x33333303
 800d594:	3fe33333 	.word	0x3fe33333
 800d598:	e0000000 	.word	0xe0000000
 800d59c:	3feec709 	.word	0x3feec709
 800d5a0:	dc3a03fd 	.word	0xdc3a03fd
 800d5a4:	3feec709 	.word	0x3feec709
 800d5a8:	145b01f5 	.word	0x145b01f5
 800d5ac:	be3e2fe0 	.word	0xbe3e2fe0
 800d5b0:	7ff00000 	.word	0x7ff00000
 800d5b4:	43400000 	.word	0x43400000
 800d5b8:	0003988e 	.word	0x0003988e
 800d5bc:	000bb679 	.word	0x000bb679
 800d5c0:	0800e000 	.word	0x0800e000
 800d5c4:	3ff00000 	.word	0x3ff00000
 800d5c8:	40080000 	.word	0x40080000
 800d5cc:	0800dfe0 	.word	0x0800dfe0
 800d5d0:	0800dff0 	.word	0x0800dff0
 800d5d4:	a39a      	add	r3, pc, #616	@ (adr r3, 800d840 <__ieee754_pow+0x9f0>)
 800d5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5da:	4630      	mov	r0, r6
 800d5dc:	4639      	mov	r1, r7
 800d5de:	f7f2 fddd 	bl	800019c <__adddf3>
 800d5e2:	4642      	mov	r2, r8
 800d5e4:	e9cd 0100 	strd	r0, r1, [sp]
 800d5e8:	464b      	mov	r3, r9
 800d5ea:	4620      	mov	r0, r4
 800d5ec:	4629      	mov	r1, r5
 800d5ee:	f7f2 fdd3 	bl	8000198 <__aeabi_dsub>
 800d5f2:	4602      	mov	r2, r0
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5fa:	f7f3 fa15 	bl	8000a28 <__aeabi_dcmpgt>
 800d5fe:	2800      	cmp	r0, #0
 800d600:	f47f ae09 	bne.w	800d216 <__ieee754_pow+0x3c6>
 800d604:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d608:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800d60c:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800d610:	fa43 fa0a 	asr.w	sl, r3, sl
 800d614:	44da      	add	sl, fp
 800d616:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800d61a:	489b      	ldr	r0, [pc, #620]	@ (800d888 <__ieee754_pow+0xa38>)
 800d61c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800d620:	4108      	asrs	r0, r1
 800d622:	ea00 030a 	and.w	r3, r0, sl
 800d626:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800d62a:	f1c1 0114 	rsb	r1, r1, #20
 800d62e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800d632:	4640      	mov	r0, r8
 800d634:	fa4a fa01 	asr.w	sl, sl, r1
 800d638:	f1bb 0f00 	cmp.w	fp, #0
 800d63c:	4649      	mov	r1, r9
 800d63e:	f04f 0200 	mov.w	r2, #0
 800d642:	bfb8      	it	lt
 800d644:	f1ca 0a00 	rsblt	sl, sl, #0
 800d648:	f7f2 fda6 	bl	8000198 <__aeabi_dsub>
 800d64c:	4680      	mov	r8, r0
 800d64e:	4689      	mov	r9, r1
 800d650:	2400      	movs	r4, #0
 800d652:	4632      	mov	r2, r6
 800d654:	463b      	mov	r3, r7
 800d656:	4640      	mov	r0, r8
 800d658:	4649      	mov	r1, r9
 800d65a:	f7f2 fd9f 	bl	800019c <__adddf3>
 800d65e:	a37a      	add	r3, pc, #488	@ (adr r3, 800d848 <__ieee754_pow+0x9f8>)
 800d660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d664:	4620      	mov	r0, r4
 800d666:	460d      	mov	r5, r1
 800d668:	f7f2 ff4e 	bl	8000508 <__aeabi_dmul>
 800d66c:	4642      	mov	r2, r8
 800d66e:	464b      	mov	r3, r9
 800d670:	e9cd 0100 	strd	r0, r1, [sp]
 800d674:	4620      	mov	r0, r4
 800d676:	4629      	mov	r1, r5
 800d678:	f7f2 fd8e 	bl	8000198 <__aeabi_dsub>
 800d67c:	4602      	mov	r2, r0
 800d67e:	460b      	mov	r3, r1
 800d680:	4630      	mov	r0, r6
 800d682:	4639      	mov	r1, r7
 800d684:	f7f2 fd88 	bl	8000198 <__aeabi_dsub>
 800d688:	a371      	add	r3, pc, #452	@ (adr r3, 800d850 <__ieee754_pow+0xa00>)
 800d68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d68e:	f7f2 ff3b 	bl	8000508 <__aeabi_dmul>
 800d692:	a371      	add	r3, pc, #452	@ (adr r3, 800d858 <__ieee754_pow+0xa08>)
 800d694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d698:	4680      	mov	r8, r0
 800d69a:	4689      	mov	r9, r1
 800d69c:	4620      	mov	r0, r4
 800d69e:	4629      	mov	r1, r5
 800d6a0:	f7f2 ff32 	bl	8000508 <__aeabi_dmul>
 800d6a4:	4602      	mov	r2, r0
 800d6a6:	460b      	mov	r3, r1
 800d6a8:	4640      	mov	r0, r8
 800d6aa:	4649      	mov	r1, r9
 800d6ac:	f7f2 fd76 	bl	800019c <__adddf3>
 800d6b0:	4604      	mov	r4, r0
 800d6b2:	460d      	mov	r5, r1
 800d6b4:	4602      	mov	r2, r0
 800d6b6:	460b      	mov	r3, r1
 800d6b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d6bc:	f7f2 fd6e 	bl	800019c <__adddf3>
 800d6c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6c4:	4680      	mov	r8, r0
 800d6c6:	4689      	mov	r9, r1
 800d6c8:	f7f2 fd66 	bl	8000198 <__aeabi_dsub>
 800d6cc:	4602      	mov	r2, r0
 800d6ce:	460b      	mov	r3, r1
 800d6d0:	4620      	mov	r0, r4
 800d6d2:	4629      	mov	r1, r5
 800d6d4:	f7f2 fd60 	bl	8000198 <__aeabi_dsub>
 800d6d8:	4642      	mov	r2, r8
 800d6da:	4606      	mov	r6, r0
 800d6dc:	460f      	mov	r7, r1
 800d6de:	464b      	mov	r3, r9
 800d6e0:	4640      	mov	r0, r8
 800d6e2:	4649      	mov	r1, r9
 800d6e4:	f7f2 ff10 	bl	8000508 <__aeabi_dmul>
 800d6e8:	a35d      	add	r3, pc, #372	@ (adr r3, 800d860 <__ieee754_pow+0xa10>)
 800d6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ee:	4604      	mov	r4, r0
 800d6f0:	460d      	mov	r5, r1
 800d6f2:	f7f2 ff09 	bl	8000508 <__aeabi_dmul>
 800d6f6:	a35c      	add	r3, pc, #368	@ (adr r3, 800d868 <__ieee754_pow+0xa18>)
 800d6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6fc:	f7f2 fd4c 	bl	8000198 <__aeabi_dsub>
 800d700:	4622      	mov	r2, r4
 800d702:	462b      	mov	r3, r5
 800d704:	f7f2 ff00 	bl	8000508 <__aeabi_dmul>
 800d708:	a359      	add	r3, pc, #356	@ (adr r3, 800d870 <__ieee754_pow+0xa20>)
 800d70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d70e:	f7f2 fd45 	bl	800019c <__adddf3>
 800d712:	4622      	mov	r2, r4
 800d714:	462b      	mov	r3, r5
 800d716:	f7f2 fef7 	bl	8000508 <__aeabi_dmul>
 800d71a:	a357      	add	r3, pc, #348	@ (adr r3, 800d878 <__ieee754_pow+0xa28>)
 800d71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d720:	f7f2 fd3a 	bl	8000198 <__aeabi_dsub>
 800d724:	4622      	mov	r2, r4
 800d726:	462b      	mov	r3, r5
 800d728:	f7f2 feee 	bl	8000508 <__aeabi_dmul>
 800d72c:	a354      	add	r3, pc, #336	@ (adr r3, 800d880 <__ieee754_pow+0xa30>)
 800d72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d732:	f7f2 fd33 	bl	800019c <__adddf3>
 800d736:	4622      	mov	r2, r4
 800d738:	462b      	mov	r3, r5
 800d73a:	f7f2 fee5 	bl	8000508 <__aeabi_dmul>
 800d73e:	4602      	mov	r2, r0
 800d740:	460b      	mov	r3, r1
 800d742:	4640      	mov	r0, r8
 800d744:	4649      	mov	r1, r9
 800d746:	f7f2 fd27 	bl	8000198 <__aeabi_dsub>
 800d74a:	4604      	mov	r4, r0
 800d74c:	460d      	mov	r5, r1
 800d74e:	4602      	mov	r2, r0
 800d750:	460b      	mov	r3, r1
 800d752:	4640      	mov	r0, r8
 800d754:	4649      	mov	r1, r9
 800d756:	f7f2 fed7 	bl	8000508 <__aeabi_dmul>
 800d75a:	2200      	movs	r2, #0
 800d75c:	e9cd 0100 	strd	r0, r1, [sp]
 800d760:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d764:	4620      	mov	r0, r4
 800d766:	4629      	mov	r1, r5
 800d768:	f7f2 fd16 	bl	8000198 <__aeabi_dsub>
 800d76c:	4602      	mov	r2, r0
 800d76e:	460b      	mov	r3, r1
 800d770:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d774:	f7f2 fff2 	bl	800075c <__aeabi_ddiv>
 800d778:	4632      	mov	r2, r6
 800d77a:	4604      	mov	r4, r0
 800d77c:	460d      	mov	r5, r1
 800d77e:	463b      	mov	r3, r7
 800d780:	4640      	mov	r0, r8
 800d782:	4649      	mov	r1, r9
 800d784:	f7f2 fec0 	bl	8000508 <__aeabi_dmul>
 800d788:	4632      	mov	r2, r6
 800d78a:	463b      	mov	r3, r7
 800d78c:	f7f2 fd06 	bl	800019c <__adddf3>
 800d790:	4602      	mov	r2, r0
 800d792:	460b      	mov	r3, r1
 800d794:	4620      	mov	r0, r4
 800d796:	4629      	mov	r1, r5
 800d798:	f7f2 fcfe 	bl	8000198 <__aeabi_dsub>
 800d79c:	4642      	mov	r2, r8
 800d79e:	464b      	mov	r3, r9
 800d7a0:	f7f2 fcfa 	bl	8000198 <__aeabi_dsub>
 800d7a4:	4602      	mov	r2, r0
 800d7a6:	460b      	mov	r3, r1
 800d7a8:	2000      	movs	r0, #0
 800d7aa:	4938      	ldr	r1, [pc, #224]	@ (800d88c <__ieee754_pow+0xa3c>)
 800d7ac:	f7f2 fcf4 	bl	8000198 <__aeabi_dsub>
 800d7b0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800d7b4:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800d7b8:	da2e      	bge.n	800d818 <__ieee754_pow+0x9c8>
 800d7ba:	4652      	mov	r2, sl
 800d7bc:	f000 f874 	bl	800d8a8 <scalbn>
 800d7c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d7c4:	f7ff bbed 	b.w	800cfa2 <__ieee754_pow+0x152>
 800d7c8:	4c31      	ldr	r4, [pc, #196]	@ (800d890 <__ieee754_pow+0xa40>)
 800d7ca:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d7ce:	42a3      	cmp	r3, r4
 800d7d0:	d91a      	bls.n	800d808 <__ieee754_pow+0x9b8>
 800d7d2:	4b30      	ldr	r3, [pc, #192]	@ (800d894 <__ieee754_pow+0xa44>)
 800d7d4:	440b      	add	r3, r1
 800d7d6:	4303      	orrs	r3, r0
 800d7d8:	d009      	beq.n	800d7ee <__ieee754_pow+0x99e>
 800d7da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7de:	2200      	movs	r2, #0
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	f7f3 f903 	bl	80009ec <__aeabi_dcmplt>
 800d7e6:	3800      	subs	r0, #0
 800d7e8:	bf18      	it	ne
 800d7ea:	2001      	movne	r0, #1
 800d7ec:	e444      	b.n	800d078 <__ieee754_pow+0x228>
 800d7ee:	4642      	mov	r2, r8
 800d7f0:	464b      	mov	r3, r9
 800d7f2:	f7f2 fcd1 	bl	8000198 <__aeabi_dsub>
 800d7f6:	4632      	mov	r2, r6
 800d7f8:	463b      	mov	r3, r7
 800d7fa:	f7f3 f90b 	bl	8000a14 <__aeabi_dcmpge>
 800d7fe:	2800      	cmp	r0, #0
 800d800:	d1eb      	bne.n	800d7da <__ieee754_pow+0x98a>
 800d802:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800d898 <__ieee754_pow+0xa48>
 800d806:	e6fd      	b.n	800d604 <__ieee754_pow+0x7b4>
 800d808:	469a      	mov	sl, r3
 800d80a:	4b24      	ldr	r3, [pc, #144]	@ (800d89c <__ieee754_pow+0xa4c>)
 800d80c:	459a      	cmp	sl, r3
 800d80e:	f63f aef9 	bhi.w	800d604 <__ieee754_pow+0x7b4>
 800d812:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d816:	e71b      	b.n	800d650 <__ieee754_pow+0x800>
 800d818:	4621      	mov	r1, r4
 800d81a:	e7d1      	b.n	800d7c0 <__ieee754_pow+0x970>
 800d81c:	2000      	movs	r0, #0
 800d81e:	491b      	ldr	r1, [pc, #108]	@ (800d88c <__ieee754_pow+0xa3c>)
 800d820:	f7ff bb34 	b.w	800ce8c <__ieee754_pow+0x3c>
 800d824:	2000      	movs	r0, #0
 800d826:	2100      	movs	r1, #0
 800d828:	f7ff bb30 	b.w	800ce8c <__ieee754_pow+0x3c>
 800d82c:	4650      	mov	r0, sl
 800d82e:	4659      	mov	r1, fp
 800d830:	f7ff bb2c 	b.w	800ce8c <__ieee754_pow+0x3c>
 800d834:	460c      	mov	r4, r1
 800d836:	f7ff bb79 	b.w	800cf2c <__ieee754_pow+0xdc>
 800d83a:	2400      	movs	r4, #0
 800d83c:	f7ff bb64 	b.w	800cf08 <__ieee754_pow+0xb8>
 800d840:	652b82fe 	.word	0x652b82fe
 800d844:	3c971547 	.word	0x3c971547
 800d848:	00000000 	.word	0x00000000
 800d84c:	3fe62e43 	.word	0x3fe62e43
 800d850:	fefa39ef 	.word	0xfefa39ef
 800d854:	3fe62e42 	.word	0x3fe62e42
 800d858:	0ca86c39 	.word	0x0ca86c39
 800d85c:	be205c61 	.word	0xbe205c61
 800d860:	72bea4d0 	.word	0x72bea4d0
 800d864:	3e663769 	.word	0x3e663769
 800d868:	c5d26bf1 	.word	0xc5d26bf1
 800d86c:	3ebbbd41 	.word	0x3ebbbd41
 800d870:	af25de2c 	.word	0xaf25de2c
 800d874:	3f11566a 	.word	0x3f11566a
 800d878:	16bebd93 	.word	0x16bebd93
 800d87c:	3f66c16c 	.word	0x3f66c16c
 800d880:	5555553e 	.word	0x5555553e
 800d884:	3fc55555 	.word	0x3fc55555
 800d888:	fff00000 	.word	0xfff00000
 800d88c:	3ff00000 	.word	0x3ff00000
 800d890:	4090cbff 	.word	0x4090cbff
 800d894:	3f6f3400 	.word	0x3f6f3400
 800d898:	4090cc00 	.word	0x4090cc00
 800d89c:	3fe00000 	.word	0x3fe00000

0800d8a0 <fabs>:
 800d8a0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d8a4:	4619      	mov	r1, r3
 800d8a6:	4770      	bx	lr

0800d8a8 <scalbn>:
 800d8a8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800d8ac:	4616      	mov	r6, r2
 800d8ae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d8b2:	4683      	mov	fp, r0
 800d8b4:	468c      	mov	ip, r1
 800d8b6:	460b      	mov	r3, r1
 800d8b8:	b982      	cbnz	r2, 800d8dc <scalbn+0x34>
 800d8ba:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d8be:	4303      	orrs	r3, r0
 800d8c0:	d039      	beq.n	800d936 <scalbn+0x8e>
 800d8c2:	4b2f      	ldr	r3, [pc, #188]	@ (800d980 <scalbn+0xd8>)
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	f7f2 fe1f 	bl	8000508 <__aeabi_dmul>
 800d8ca:	4b2e      	ldr	r3, [pc, #184]	@ (800d984 <scalbn+0xdc>)
 800d8cc:	4683      	mov	fp, r0
 800d8ce:	429e      	cmp	r6, r3
 800d8d0:	468c      	mov	ip, r1
 800d8d2:	da0d      	bge.n	800d8f0 <scalbn+0x48>
 800d8d4:	a326      	add	r3, pc, #152	@ (adr r3, 800d970 <scalbn+0xc8>)
 800d8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8da:	e01b      	b.n	800d914 <scalbn+0x6c>
 800d8dc:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800d8e0:	42ba      	cmp	r2, r7
 800d8e2:	d109      	bne.n	800d8f8 <scalbn+0x50>
 800d8e4:	4602      	mov	r2, r0
 800d8e6:	f7f2 fc59 	bl	800019c <__adddf3>
 800d8ea:	4683      	mov	fp, r0
 800d8ec:	468c      	mov	ip, r1
 800d8ee:	e022      	b.n	800d936 <scalbn+0x8e>
 800d8f0:	460b      	mov	r3, r1
 800d8f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d8f6:	3a36      	subs	r2, #54	@ 0x36
 800d8f8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800d8fc:	428e      	cmp	r6, r1
 800d8fe:	dd0c      	ble.n	800d91a <scalbn+0x72>
 800d900:	a31d      	add	r3, pc, #116	@ (adr r3, 800d978 <scalbn+0xd0>)
 800d902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d906:	461c      	mov	r4, r3
 800d908:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800d90c:	f361 74df 	bfi	r4, r1, #31, #1
 800d910:	4621      	mov	r1, r4
 800d912:	481d      	ldr	r0, [pc, #116]	@ (800d988 <scalbn+0xe0>)
 800d914:	f7f2 fdf8 	bl	8000508 <__aeabi_dmul>
 800d918:	e7e7      	b.n	800d8ea <scalbn+0x42>
 800d91a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800d91e:	4432      	add	r2, r6
 800d920:	428a      	cmp	r2, r1
 800d922:	dced      	bgt.n	800d900 <scalbn+0x58>
 800d924:	2a00      	cmp	r2, #0
 800d926:	dd0a      	ble.n	800d93e <scalbn+0x96>
 800d928:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d92c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d930:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d934:	46ac      	mov	ip, r5
 800d936:	4658      	mov	r0, fp
 800d938:	4661      	mov	r1, ip
 800d93a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800d93e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800d942:	da09      	bge.n	800d958 <scalbn+0xb0>
 800d944:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800d948:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800d94c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800d950:	480e      	ldr	r0, [pc, #56]	@ (800d98c <scalbn+0xe4>)
 800d952:	f041 011f 	orr.w	r1, r1, #31
 800d956:	e7bd      	b.n	800d8d4 <scalbn+0x2c>
 800d958:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d95c:	3236      	adds	r2, #54	@ 0x36
 800d95e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d962:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d966:	4658      	mov	r0, fp
 800d968:	4629      	mov	r1, r5
 800d96a:	2200      	movs	r2, #0
 800d96c:	4b08      	ldr	r3, [pc, #32]	@ (800d990 <scalbn+0xe8>)
 800d96e:	e7d1      	b.n	800d914 <scalbn+0x6c>
 800d970:	c2f8f359 	.word	0xc2f8f359
 800d974:	01a56e1f 	.word	0x01a56e1f
 800d978:	8800759c 	.word	0x8800759c
 800d97c:	7e37e43c 	.word	0x7e37e43c
 800d980:	43500000 	.word	0x43500000
 800d984:	ffff3cb0 	.word	0xffff3cb0
 800d988:	8800759c 	.word	0x8800759c
 800d98c:	c2f8f359 	.word	0xc2f8f359
 800d990:	3c900000 	.word	0x3c900000

0800d994 <with_errno>:
 800d994:	b570      	push	{r4, r5, r6, lr}
 800d996:	4604      	mov	r4, r0
 800d998:	460d      	mov	r5, r1
 800d99a:	4616      	mov	r6, r2
 800d99c:	f7fd f9ca 	bl	800ad34 <__errno>
 800d9a0:	4629      	mov	r1, r5
 800d9a2:	6006      	str	r6, [r0, #0]
 800d9a4:	4620      	mov	r0, r4
 800d9a6:	bd70      	pop	{r4, r5, r6, pc}

0800d9a8 <xflow>:
 800d9a8:	b513      	push	{r0, r1, r4, lr}
 800d9aa:	4604      	mov	r4, r0
 800d9ac:	4619      	mov	r1, r3
 800d9ae:	4610      	mov	r0, r2
 800d9b0:	b10c      	cbz	r4, 800d9b6 <xflow+0xe>
 800d9b2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d9b6:	e9cd 2300 	strd	r2, r3, [sp]
 800d9ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d9be:	f7f2 fda3 	bl	8000508 <__aeabi_dmul>
 800d9c2:	2222      	movs	r2, #34	@ 0x22
 800d9c4:	b002      	add	sp, #8
 800d9c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9ca:	f7ff bfe3 	b.w	800d994 <with_errno>

0800d9ce <__math_uflow>:
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d9d4:	f7ff bfe8 	b.w	800d9a8 <xflow>

0800d9d8 <__math_oflow>:
 800d9d8:	2200      	movs	r2, #0
 800d9da:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800d9de:	f7ff bfe3 	b.w	800d9a8 <xflow>
	...

0800d9e4 <__ieee754_sqrt>:
 800d9e4:	4a67      	ldr	r2, [pc, #412]	@ (800db84 <__ieee754_sqrt+0x1a0>)
 800d9e6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ea:	438a      	bics	r2, r1
 800d9ec:	4606      	mov	r6, r0
 800d9ee:	460f      	mov	r7, r1
 800d9f0:	460b      	mov	r3, r1
 800d9f2:	4604      	mov	r4, r0
 800d9f4:	d10e      	bne.n	800da14 <__ieee754_sqrt+0x30>
 800d9f6:	4602      	mov	r2, r0
 800d9f8:	f7f2 fd86 	bl	8000508 <__aeabi_dmul>
 800d9fc:	4602      	mov	r2, r0
 800d9fe:	460b      	mov	r3, r1
 800da00:	4630      	mov	r0, r6
 800da02:	4639      	mov	r1, r7
 800da04:	f7f2 fbca 	bl	800019c <__adddf3>
 800da08:	4606      	mov	r6, r0
 800da0a:	460f      	mov	r7, r1
 800da0c:	4630      	mov	r0, r6
 800da0e:	4639      	mov	r1, r7
 800da10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da14:	2900      	cmp	r1, #0
 800da16:	dc0c      	bgt.n	800da32 <__ieee754_sqrt+0x4e>
 800da18:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800da1c:	4302      	orrs	r2, r0
 800da1e:	d0f5      	beq.n	800da0c <__ieee754_sqrt+0x28>
 800da20:	b189      	cbz	r1, 800da46 <__ieee754_sqrt+0x62>
 800da22:	4602      	mov	r2, r0
 800da24:	f7f2 fbb8 	bl	8000198 <__aeabi_dsub>
 800da28:	4602      	mov	r2, r0
 800da2a:	460b      	mov	r3, r1
 800da2c:	f7f2 fe96 	bl	800075c <__aeabi_ddiv>
 800da30:	e7ea      	b.n	800da08 <__ieee754_sqrt+0x24>
 800da32:	150a      	asrs	r2, r1, #20
 800da34:	d115      	bne.n	800da62 <__ieee754_sqrt+0x7e>
 800da36:	2100      	movs	r1, #0
 800da38:	e009      	b.n	800da4e <__ieee754_sqrt+0x6a>
 800da3a:	0ae3      	lsrs	r3, r4, #11
 800da3c:	3a15      	subs	r2, #21
 800da3e:	0564      	lsls	r4, r4, #21
 800da40:	2b00      	cmp	r3, #0
 800da42:	d0fa      	beq.n	800da3a <__ieee754_sqrt+0x56>
 800da44:	e7f7      	b.n	800da36 <__ieee754_sqrt+0x52>
 800da46:	460a      	mov	r2, r1
 800da48:	e7fa      	b.n	800da40 <__ieee754_sqrt+0x5c>
 800da4a:	005b      	lsls	r3, r3, #1
 800da4c:	3101      	adds	r1, #1
 800da4e:	02d8      	lsls	r0, r3, #11
 800da50:	d5fb      	bpl.n	800da4a <__ieee754_sqrt+0x66>
 800da52:	1e48      	subs	r0, r1, #1
 800da54:	1a12      	subs	r2, r2, r0
 800da56:	f1c1 0020 	rsb	r0, r1, #32
 800da5a:	fa24 f000 	lsr.w	r0, r4, r0
 800da5e:	4303      	orrs	r3, r0
 800da60:	408c      	lsls	r4, r1
 800da62:	2600      	movs	r6, #0
 800da64:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800da68:	2116      	movs	r1, #22
 800da6a:	07d2      	lsls	r2, r2, #31
 800da6c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800da70:	4632      	mov	r2, r6
 800da72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800da7a:	bf5c      	itt	pl
 800da7c:	005b      	lslpl	r3, r3, #1
 800da7e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800da82:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800da86:	bf58      	it	pl
 800da88:	0064      	lslpl	r4, r4, #1
 800da8a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800da8e:	107f      	asrs	r7, r7, #1
 800da90:	0064      	lsls	r4, r4, #1
 800da92:	1815      	adds	r5, r2, r0
 800da94:	429d      	cmp	r5, r3
 800da96:	bfde      	ittt	le
 800da98:	182a      	addle	r2, r5, r0
 800da9a:	1b5b      	suble	r3, r3, r5
 800da9c:	1836      	addle	r6, r6, r0
 800da9e:	0fe5      	lsrs	r5, r4, #31
 800daa0:	3901      	subs	r1, #1
 800daa2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800daa6:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800daaa:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800daae:	d1f0      	bne.n	800da92 <__ieee754_sqrt+0xae>
 800dab0:	460d      	mov	r5, r1
 800dab2:	f04f 0a20 	mov.w	sl, #32
 800dab6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800daba:	429a      	cmp	r2, r3
 800dabc:	eb01 0c00 	add.w	ip, r1, r0
 800dac0:	db02      	blt.n	800dac8 <__ieee754_sqrt+0xe4>
 800dac2:	d113      	bne.n	800daec <__ieee754_sqrt+0x108>
 800dac4:	45a4      	cmp	ip, r4
 800dac6:	d811      	bhi.n	800daec <__ieee754_sqrt+0x108>
 800dac8:	f1bc 0f00 	cmp.w	ip, #0
 800dacc:	eb0c 0100 	add.w	r1, ip, r0
 800dad0:	da42      	bge.n	800db58 <__ieee754_sqrt+0x174>
 800dad2:	2900      	cmp	r1, #0
 800dad4:	db40      	blt.n	800db58 <__ieee754_sqrt+0x174>
 800dad6:	f102 0e01 	add.w	lr, r2, #1
 800dada:	1a9b      	subs	r3, r3, r2
 800dadc:	4672      	mov	r2, lr
 800dade:	45a4      	cmp	ip, r4
 800dae0:	bf88      	it	hi
 800dae2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800dae6:	eba4 040c 	sub.w	r4, r4, ip
 800daea:	4405      	add	r5, r0
 800daec:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800daf0:	f1ba 0a01 	subs.w	sl, sl, #1
 800daf4:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800daf8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800dafc:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800db00:	d1db      	bne.n	800daba <__ieee754_sqrt+0xd6>
 800db02:	431c      	orrs	r4, r3
 800db04:	d01a      	beq.n	800db3c <__ieee754_sqrt+0x158>
 800db06:	4c20      	ldr	r4, [pc, #128]	@ (800db88 <__ieee754_sqrt+0x1a4>)
 800db08:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800db8c <__ieee754_sqrt+0x1a8>
 800db0c:	e9d4 0100 	ldrd	r0, r1, [r4]
 800db10:	e9db 2300 	ldrd	r2, r3, [fp]
 800db14:	f7f2 fb40 	bl	8000198 <__aeabi_dsub>
 800db18:	e9d4 8900 	ldrd	r8, r9, [r4]
 800db1c:	4602      	mov	r2, r0
 800db1e:	460b      	mov	r3, r1
 800db20:	4640      	mov	r0, r8
 800db22:	4649      	mov	r1, r9
 800db24:	f7f2 ff6c 	bl	8000a00 <__aeabi_dcmple>
 800db28:	b140      	cbz	r0, 800db3c <__ieee754_sqrt+0x158>
 800db2a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800db2e:	e9db 2300 	ldrd	r2, r3, [fp]
 800db32:	f1b5 3fff 	cmp.w	r5, #4294967295
 800db36:	d111      	bne.n	800db5c <__ieee754_sqrt+0x178>
 800db38:	4655      	mov	r5, sl
 800db3a:	3601      	adds	r6, #1
 800db3c:	1072      	asrs	r2, r6, #1
 800db3e:	086b      	lsrs	r3, r5, #1
 800db40:	07f1      	lsls	r1, r6, #31
 800db42:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800db46:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800db4a:	bf48      	it	mi
 800db4c:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800db50:	4618      	mov	r0, r3
 800db52:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800db56:	e757      	b.n	800da08 <__ieee754_sqrt+0x24>
 800db58:	4696      	mov	lr, r2
 800db5a:	e7be      	b.n	800dada <__ieee754_sqrt+0xf6>
 800db5c:	f7f2 fb1e 	bl	800019c <__adddf3>
 800db60:	e9d4 8900 	ldrd	r8, r9, [r4]
 800db64:	4602      	mov	r2, r0
 800db66:	460b      	mov	r3, r1
 800db68:	4640      	mov	r0, r8
 800db6a:	4649      	mov	r1, r9
 800db6c:	f7f2 ff3e 	bl	80009ec <__aeabi_dcmplt>
 800db70:	b120      	cbz	r0, 800db7c <__ieee754_sqrt+0x198>
 800db72:	1ca8      	adds	r0, r5, #2
 800db74:	bf08      	it	eq
 800db76:	3601      	addeq	r6, #1
 800db78:	3502      	adds	r5, #2
 800db7a:	e7df      	b.n	800db3c <__ieee754_sqrt+0x158>
 800db7c:	1c6b      	adds	r3, r5, #1
 800db7e:	f023 0501 	bic.w	r5, r3, #1
 800db82:	e7db      	b.n	800db3c <__ieee754_sqrt+0x158>
 800db84:	7ff00000 	.word	0x7ff00000
 800db88:	200002a8 	.word	0x200002a8
 800db8c:	200002a0 	.word	0x200002a0

0800db90 <_init>:
 800db90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db92:	bf00      	nop
 800db94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db96:	bc08      	pop	{r3}
 800db98:	469e      	mov	lr, r3
 800db9a:	4770      	bx	lr

0800db9c <_fini>:
 800db9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db9e:	bf00      	nop
 800dba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dba2:	bc08      	pop	{r3}
 800dba4:	469e      	mov	lr, r3
 800dba6:	4770      	bx	lr
